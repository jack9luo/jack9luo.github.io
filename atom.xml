<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>luoxiaohei🥝</title>
  
  
  <link href="https://qzl.luoxiaohei.asia/atom.xml" rel="self"/>
  
  <link href="https://qzl.luoxiaohei.asia/"/>
  <updated>2024-10-13T08:58:58.051Z</updated>
  <id>https://qzl.luoxiaohei.asia/</id>
  
  <author>
    <name>luoxiaohei🥝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>solidity面经</title>
    <link href="https://qzl.luoxiaohei.asia/posts/38f5a7e3.html"/>
    <id>https://qzl.luoxiaohei.asia/posts/38f5a7e3.html</id>
    <published>2024-10-13T16:15:02.000Z</published>
    <updated>2024-10-13T08:58:58.051Z</updated>
    
    <content type="html"><![CDATA[<h1>面试题</h1><h2 id="storage">storage</h2><h3 id="1、假如-一个合约中只有-三个状态变量-三个变量的类型分别为-bool-uint8-uint64-请问他们会以怎么样的方式存储到-storage-中呢">1、假如 一个合约中只有 三个状态变量, 三个变量的类型分别为 bool uint8 uint64, 请问他们会以怎么样的方式存储到 storage 中呢?</h3><aside>💡<h4 id="存储位置"><strong>存储位置</strong></h4><p>solidity数据存储位置有三类：<code>storage</code>、<code>memory</code>、<code>calldata</code>。</p><p><code>状态变量</code>默认都是存储在storage中，也就是上链，消耗的gas最多；</p><p>函数的<code>局部变量</code>和<code>临时变量</code>存储在<code>memory</code>中；</p><p><code>calldata</code>变量也存储在内存中，和<code>memory</code>的区别在于<code>calldata</code>变量不允许修改；</p><p>并且赋值方面也有区别：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.4</span>;</span><br><span class="line">contract DataStorage&#123;</span><br><span class="line">    uint[] x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">    function <span class="title function_">fStorage</span><span class="params">()</span> <span class="keyword">public</span>&#123;</span><br><span class="line">        uint[] <span class="type">storage</span> <span class="variable">xStorage</span> <span class="operator">=</span> x;<span class="comment">//声明storage变量xStorage，指向x的引用</span></span><br><span class="line">        xStorage[<span class="number">0</span>] =<span class="number">520</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    function <span class="title function_">fmemory</span><span class="params">()</span> <span class="keyword">public</span> view&#123;</span><br><span class="line">        uint[] <span class="type">memory</span> <span class="variable">xMemory</span> <span class="operator">=</span> x;<span class="comment">// 声明memory变量xMemory，复制x，修改xMemory不会影响x</span></span><br><span class="line">        xMemory[<span class="number">0</span>] = <span class="number">520</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    function <span class="title function_">fcalldata</span><span class="params">(uint[] calldata _x)</span> <span class="keyword">public</span> pure <span class="title function_">returns</span><span class="params">(uint[] calldata)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>(_x); <span class="comment">//calldata数组不能被修改,_x[0]=0;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="storeage存储规则"><strong>storeage存储规则</strong></h4><p>现在来说solidity中storeage变量的存储规则：</p><p>首先storeage槽的大小32字节，状态变量会按照声明顺序依次存储，并且把可以打包成小于32字节的包存储在一个槽中，<strong>但是注意声明变量的顺序（见下图）</strong>。</p><aside>💡<p><img src="https://s2.loli.net/2024/10/13/KDQNwoy5WYdbsqv.png" alt="image.png"></p><ul><li><p><strong>值类型</strong>（例如<code>uint</code>、<code>int</code>、<code>bool</code>）</p><p><strong>按照声明顺序</strong>存储到storeage中，并且将多个小于32字节的变量打包到同一个存储槽中。</p></li><li><p><strong>引用类型变量</strong>（例如<code>struct</code>、<code>array</code>、<code>mapping</code>）</p><p>仅在存储槽中存储一个指向实际数据位置的指针。</p><ul><li>固定数组：存储在连续的存储槽中。</li><li>动态数组：存储槽（P）存数组长度，数组元素根据<code>keccak256</code>哈希计算得出的，比如第一个数组元素存储在 <code>keccak256(p)</code> 计算出的槽中，第二个元素存储在 <code>keccak256(p) + 1</code>，第三个元素存储在 <code>keccak256(p) + 2</code>，依此类推，形成一系列连续的存储槽。<strong>在动态数组中，每个元素通常占用一个完整的存储槽</strong>。</li></ul></li><li><p><strong>结构体（struct）的存储</strong></p><p>和固定数组的存储方式一样。</p></li><li><p><strong>映射（mapping）的存储</strong></p><p>mapping数据结构包括<code>起始槽号</code>和<code>键值对</code>。</p><p><code>起始槽号</code>本身占用一个存储槽，不存储实际数据，由 Solidity 自动分配的，而是利用这个<code>起始槽号</code>去计算每个键值对的位置。</p></li></ul><p>键值对存储位置的计算: <code>keccak256(abi.encodePacked(key, slot))</code>,其中<code>key</code> 是映射中的键，<code>slot</code> 是映射变量的存储槽号。</p><h4 id="答">答</h4><p>所以三个变量的类型分别为 bool uint8 uint64，他们会存储在一个存储槽中，因为他们的大小加起来没有超过32字节。</p><aside>💡<p><img src="https://s2.loli.net/2024/10/13/YvR4sDGWVKQnBLM.png" alt="image 1.png"></p><p>key是存储槽号，value是32字节数据</p><p>value：0x0000000000000000000000000000000000000000000000000000000000200201</p><ul><li><strong><code>0x01</code></strong>：<code>bool a = true</code></li><li><strong><code>0x02</code></strong>：<code>uint8 b = 2</code></li><li><strong><code>0x0000000000000020</code></strong>：<code>uint64 c = 32</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="number">0x0000000000000000000000000000000000000000000000000000000000200201</span> ]</span><br><span class="line">     ↑↑             ↑ ↑</span><br><span class="line">                        <span class="number">22</span> 字节空闲c             b a</span><br></pre></td></tr></table></figure><h3 id="2、-数组-在-状态变量中是怎么存储的-slot-Keccak256">2、 数组 在 状态变量中是怎么存储的, ( slot, Keccak256 )</h3><aside>💡<p>上面也说了，<code>静态数组</code>和<code>动态数组</code>的区别</p><p>静态数组连续打包，而动态数组存储数组长度，根据存储数组长度的存储槽号进行哈希运算，得到的哈希值就是元素存储位置，并且连续打包，如图所示</p><p><img src="https://s2.loli.net/2024/10/13/yTgjk6wEzr8Qsu2.png" alt="image 2.png"></p><h3 id="3、-mapping-在状态变量中中是怎么存储的-slot-Keccak256-Keccak256-abi-encodePacked-k-p">3、 mapping 在状态变量中中是怎么存储的, (slot, Keccak256) (Keccak256(abi.encodePacked(k, p)))</h3><aside>💡<p>和 1 说的一样，但是起始槽号是自动分配的，不存储数据。</p><p><img src="https://s2.loli.net/2024/10/13/RDUPAHejfB9wM61.png" alt="image 3.png"></p><h3 id="4、-solidity-自定义类型-Struct-在状态变量中-storage-它的存储方式是什么样的-关于优化存储方式也可以聊一聊。-最右开始存储">4、 solidity 自定义类型(Struct), 在状态变量中(storage) 它的存储方式是什么样的. 关于优化存储方式也可以聊一聊。(最右开始存储)</h3><aside>💡<p>存储方式和固定数组一致，优化存储方式就是打包存储。和 1 说的一致</p><p><img src="https://s2.loli.net/2024/10/13/hWcgLeNbIHrm7nf.png" alt="image 4.png"></p><h3 id="0、assembly-内联汇编-是否有使用过-会使用吗">0、assembly 内联汇编 是否有使用过,会使用吗?</h3><aside>💡<p>使用过，内联汇编作用就是直接编写<strong>汇编指令</strong>，用来优化gas成本或者直接与EVM交互。</p><h3 id="常用的汇编指令"><strong>常用的汇编指令</strong></h3><ul><li><p><strong><code>add(x, y)</code></strong>：返回 <code>x + y</code> 的结果。</p></li><li><p><strong><code>mul(x, y)</code></strong>：返回 <code>x * y</code> 的结果。</p></li><li><p><strong><code>mstore(p, v)</code></strong>：将值 <code>v</code> 存储到内存位置 <code>p</code>。</p></li><li><p><strong><code>mload(p)</code></strong>：从内存位置 <code>p</code> 加载值。</p></li><li><p><strong><code>sstore(slot, value)</code></strong>：将值存储在存储槽 <code>slot</code> 中。</p></li><li><p><strong><code>sload(slot)</code></strong>：从存储槽 <code>slot</code> 中加载值。</p></li><li><p><strong>优化 Gas 成本</strong>：通过内联汇编，可以跳过 Solidity 中的一些<strong>安全检查（如溢出检查</strong>），从而减少不必要的 Gas 消耗。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line">contract GasOptimized &#123;</span><br><span class="line">    function <span class="title function_">multiply</span><span class="params">(uint256 a, uint256 b)</span> <span class="keyword">public</span> pure <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        uint256 result;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            result := mul(a, b)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>直接与 EVM 交互</strong>：汇编允许你直接控制 EVM 的内存、存储和栈，这种技术通常用于实现更复杂的存储或优化存储操作，以降低存储成本</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract DirectStorage &#123;</span><br><span class="line">    uint256 <span class="keyword">public</span> storedValue;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">setStoredValue</span><span class="params">(uint256 newValue)</span> <span class="keyword">public</span> &#123;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            sstore(storedValue.slot, newValue)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">getStoredValue</span><span class="params">()</span> <span class="keyword">public</span> view <span class="title function_">returns</span> <span class="params">(uint256 result)</span> &#123;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            result := sload(storedValue.slot)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/10/13/Nzi8G3AIB756Lkl.png" alt="image 5.png"></p><p>比如之前在<strong>Wyvern 代理注册协议</strong> 中使用到的代理合约<strong>AuthenticatedProxy</strong>中，在<code>fallback</code> 函数中，通过手动控制内存、栈以及返回值，实现了更高效的执行。比如调用EVM中的<code>delegatecall</code> 指令，而不是solidity的<code>delegatecall</code> 指令，跳过了 Solidity 高层抽象的类型检查和安全检查，减少了不必要的 Gas 开销。</p><h3 id="1、-值类型和引用类型-在-内联汇编中-有什么不一样的地方">1、 值类型和引用类型 在 内联汇编中 有什么不一样的地方.</h3><aside>💡<p><strong>值类型</strong>：在内联汇编中，值类型可以直接操作，它们的值存储在栈或内存中，不需要通过指针访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">contract ValueTypeExample &#123;</span><br><span class="line">    function <span class="title function_">addValues</span><span class="params">(uint256 a, uint256 b)</span> <span class="keyword">public</span> pure <span class="title function_">returns</span> <span class="params">(uint256 result)</span> &#123;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            <span class="comment">// 直接在栈上进行加法运算</span></span><br><span class="line">            result := add(a, b)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>引用类型</strong>：引用类型需要先获取引用的指针，再根据偏移量获获取内存地址。<br><strong>内存</strong>中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">contract ReferenceTypeExample &#123;</span><br><span class="line">    function <span class="title function_">updateArray</span><span class="params">(uint256[] memory arr)</span> <span class="keyword">public</span> pure <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            <span class="comment">// 获取数组的第一个元素的位置</span></span><br><span class="line">            let firstElementPtr := add(arr, <span class="number">0x20</span>)  <span class="comment">// 数组数据从偏移量 0x20 (32字节)开始存储</span></span><br><span class="line">            <span class="comment">// 更新第一个元素为 42</span></span><br><span class="line">            mstore(firstElementPtr, <span class="number">42</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>存储</strong>中:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">contract StorageExample &#123;</span><br><span class="line">    uint256[] <span class="keyword">public</span> arr;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">updateStorage</span><span class="params">()</span> <span class="keyword">public</span> &#123;</span><br><span class="line">        arr.push(<span class="number">1</span>);</span><br><span class="line">        arr.push(<span class="number">2</span>);</span><br><span class="line">        arr.push(<span class="number">3</span>);</span><br><span class="line">        assembly &#123;</span><br><span class="line">            <span class="comment">// 获取数组的存储槽位置</span></span><br><span class="line">            let slot := arr.slot</span><br><span class="line">            <span class="comment">// 将存储槽号写入到内存，位置为 0x0</span></span><br><span class="line">            mstore(<span class="number">0x0</span>, slot)</span><br><span class="line">            <span class="comment">// 计算数组第一个元素的存储槽（keccak256 的结果）</span></span><br><span class="line">            <span class="comment">// keccak256 必须满足32字节</span></span><br><span class="line">            let firstElementPtr := keccak256(<span class="number">0x0</span>, <span class="number">0x20</span>)  <span class="comment">// 0x20表示 32 字节</span></span><br><span class="line">            <span class="comment">// 更新数组第一个元素的值为 42</span></span><br><span class="line">            sstore(firstElementPtr, <span class="number">42</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最后">最后</h3><p>要说基本类型和引用类型不一样的地方还是在操作上面，基本类型直接根据符号引用直接操作，EVM 可以在<strong>栈或存储</strong>中直接读取或写入它们的值；而引用类型需要先获取引用，再根据引用和数据类型，再计算数据类型的偏移量，定位引用类型中的元素。</p><h3 id="2、-在solidity-中-数组和-mapping-中两种类型-是否可以在内存-memory-或者-存储状态变量-storage-中使用">2、 在solidity 中 数组和 mapping 中两种类型, 是否可以在内存(memory) 或者 存储状态变量(storage) 中使用.</h3><aside>💡<p>数组可以在内存中也可以在存储中使用。</p><p>mapping可以在存储中，但是不可以在内存中，因为映射的数据结构在 Solidity 中设计是为了持久化存储。</p><p><code>mapping(address =&gt; uint256) memory tempMapping;  // 这是非法的</code></p><h3 id="总结：数组与-mapping-在内存和存储中的适用情况"><strong>总结：数组与 mapping 在内存和存储中的适用情况</strong></h3><table><thead><tr><th>类型</th><th><strong>存储 (storage)</strong></th><th><strong>内存 (memory)</strong></th><th><strong>调用数据 (calldata)</strong></th></tr></thead><tbody><tr><td><strong>动态数组</strong></td><td>可以使用，支持 <code>push</code>/<code>pop</code> 等动态操作</td><td>可以使用，但必须预先分配长度，不能 <code>push</code> 或 <code>pop</code></td><td>只读，不可修改</td></tr><tr><td><strong>静态数组</strong></td><td>可以使用</td><td>可以使用</td><td>只读，不可修改</td></tr><tr><td><strong>Mapping</strong></td><td>只能在存储中使用</td><td>不能使用</td><td>不能使用</td></tr><tr><td></aside></td><td></td><td></td><td></td></tr></tbody></table><h3 id="3、-可变数组-uint256-能否在内存中-对它做进行-增删-的操作-需要注意什么">3、 可变数组 []uint256, 能否在内存中 对它做进行 增删 的操作. 需要注意什么 ?</h3><aside>💡<p>内存中的动态数组是不能进行**<code>push</code> 和 <code>pop</code> 操作**。<br>内存中的动态数组必须在声明时指定长度,在内存中需要手动管理长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">createAndModifyArray</span><span class="params">()</span> <span class="keyword">public</span> pure <span class="title function_">returns</span> <span class="params">(uint256[] memory)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个长度为 3 的内存数组</span></span><br><span class="line">        uint256[] <span class="type">memory</span> <span class="variable">tempArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">uint256</span>[](<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 给数组赋值</span></span><br><span class="line">        tempArray[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        tempArray[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">        tempArray[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">        <span class="comment">// 不能直接使用 `push` 操作，因此你只能手动调整现有数组中的值</span></span><br><span class="line">        <span class="comment">// tempArray.push(4); 这是非法操作，无法在内存中使用</span></span><br><span class="line">        tempArray = addElement(tempArray, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> tempArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">addElement</span><span class="params">(uint256[] memory array, uint256 newValue)</span> <span class="keyword">public</span> pure <span class="title function_">returns</span> <span class="params">(uint256[] memory)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个新的内存数组，长度比原来的数组多 1</span></span><br><span class="line">        uint256[] <span class="type">memory</span> <span class="variable">newArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">uint256</span>[](array.length + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将原数组的元素复制到新数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">uint</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            newArray[i] = array[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将新的值放入新数组的最后一个位置</span></span><br><span class="line">        newArray[array.length] = newValue;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> newArray;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="关于-合约-继承问题">关于 合约 继承问题</h2><h3 id="1、合约继承-不同状态变量-slot-的顺序位置-是如何确定的">1、合约继承, 不同状态变量(slot) 的顺序位置 是如何确定的</h3><aside>💡<p>按照顺序分配，从槽0开始分配，先分配祖先合约存储位置，再依次往下分配。</p><p>多继承情况下，从左到右分配</p><p>对于钻石继承，使用C3线性化算法，它遵循从左到右的继承顺序，避免重复继承，并保证父合约只初始化一次。</p><p>c3过程就是通过递归的方式来构建最终的继承顺序，每个合约的父合约按从左到右的顺序处理，并且不会重复处理相同的合约。</p><h3 id="2、-super-对象有用过吗-它是如何调用的">2、 super 对象有用过吗? 它是如何调用的.</h3><aside>💡<p><code>super</code> 关键字在 Solidity 中经常用于多重继承时调用父合约的函数或状态。它允许合约在继承链中调用“父合约”的函数，实现代码复用或进一步扩展父合约的功能。</p><p><code>super</code> 不会直接指向某个特定合约，而是沿着继承链继续向上查找，因此它可能调用的不是直接父合约，而是继承链中的下一个合约。<code>super</code> 调用遵循 <strong>C3 线性化</strong> 规则，即它会按照继承链中的顺序调用继承关系中的父合约。</p><h2 id="可升级合约">可升级合约</h2><h3 id="1、在openzeplin-中-有一个可升级合约的方式-eip1967-简单说一下它是如何实现合约升级的-delegatecall">1、在openzeplin 中 有一个可升级合约的方式 eip1967, 简单说一下它是如何实现合约升级的?delegatecall</h3><aside>💡<p><strong>EIP-1967</strong> 规定了代理合约的<code>实现合约</code>地址存储在一个特定的槽位中。<br>代理合约通过 <code>delegatecall</code> 调用实现合约的逻辑，同时保持自己的存储。<br>当实现合约的逻辑需要更新时，<strong>只需更新代理合约指向的新合约地址</strong>，而无需迁移数据。<br>在<strong>Wyvern 代理注册协议中</strong>也有应用。</p><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代理合约中的fallback函数，使用delegatecall代理调用其他合约。</span></span><br><span class="line">function () payable <span class="keyword">public</span> &#123;</span><br><span class="line">    <span class="type">address</span> <span class="variable">_impl</span> <span class="operator">=</span> implementation();</span><br><span class="line">    require(_impl != address(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    assembly &#123;</span><br><span class="line">        let ptr := mload(<span class="number">0x40</span>)</span><br><span class="line">        <span class="comment">// 将参数存储到从 ptr 开始的数据槽，需要的槽位:calldatasize</span></span><br><span class="line">        calldatacopy(ptr, <span class="number">0</span>, calldatasize)</span><br><span class="line">        <span class="comment">// 注意，这里的 delegatecall 并非 Solidity 中的 delegatecall</span></span><br><span class="line">        <span class="comment">// 此处是 EVM 中的操作符，所以叫做内联汇编</span></span><br><span class="line">        let result := delegatecall(gas, _impl, ptr, calldatasize, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        let size := returndatasize</span><br><span class="line">        <span class="comment">// 将返回值存储到从 ptr 开始的数据槽，需要的槽位:size</span></span><br><span class="line">        returndatacopy(ptr, <span class="number">0</span>, size)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查调用是否成功</span></span><br><span class="line">        <span class="keyword">switch</span> result</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span> &#123; revert(ptr, size) &#125;</span><br><span class="line">        <span class="comment">// 如果成功，则返回数据</span></span><br><span class="line">        <span class="keyword">default</span> &#123; <span class="keyword">return</span>(ptr, size) &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>implementation</code> 是可以被“升级”的。即，允许重新上链一个合约作为 <code>implementation</code>。</p><h2 id="其他">其他</h2><h3 id="1、constant-和-immutable-有什么区别吗">1、constant 和 immutable 有什么区别吗?</h3><aside>💡<p>这两者的主要区别在于 <strong>什么时候赋值</strong>。如果你的值在编译时就已知，用 <code>constant</code>；如果需要在部署时赋值，且之后保持不变，用 <code>immutable</code>。</p><table><thead><tr><th>特性</th><th><code>constant</code></th><th><code>immutable</code></th></tr></thead><tbody><tr><td><strong>赋值时机</strong></td><td>在编译时赋值，值必须在声明时确定</td><td>在部署时赋值，值可以在构造函数中确定</td></tr><tr><td><strong>是否可以修改</strong></td><td>部署后不可修改</td><td>部署后不可修改</td></tr><tr><td><strong>存储方式</strong></td><td>值嵌入字节码，不占用存储空间</td><td>值嵌入字节码，不占用存储空间</td></tr><tr><td><strong>适用场景</strong></td><td>编译时已知的常量（如数学常数）</td><td>部署时确定的值（如合约部署者地址）</td></tr></tbody></table></aside><h3 id="2、calldata-和-memory-的-external-区别">2、calldata 和 memory 的(external)区别</h3><aside>💡<p>它们主要用于在<strong>函数参数</strong>中指定数据的位置。两者的主要区别在于它们的存储位置、可修改性以及使用场景，特别是在 <code>external</code> 函数中有显著的不同。</p><table><thead><tr><th>特性</th><th><strong><code>calldata</code></strong></th><th><strong><code>memory</code></strong></th></tr></thead><tbody><tr><td><strong>可修改性</strong></td><td>不可修改，只读</td><td>可修改，读写权限</td></tr><tr><td><strong>存储位置</strong></td><td>数据存储在调用者提供的<strong>外部调用数据中</strong></td><td>数据存储在 EVM 内存中</td></tr><tr><td><strong>生命周期</strong></td><td>只在外部调用时存在，适用于 <code>external</code> 函数</td><td>临时存在于函数执行期间，适用于所有函数</td></tr><tr><td><strong>Gas 消耗</strong></td><td>更节省 Gas，因为不需要复制数据</td><td>Gas 消耗较高，因为需要复制数据到内存中</td></tr><tr><td><strong>典型应用</strong></td><td>适用于 <code>external</code> 函数的参数，尤其是大数组</td><td>适用于需要临时存储和修改的数据</td></tr></tbody></table><h3 id="3、说说-你采用过哪些方式进行过-白名单空投">3、说说 你采用过哪些方式进行过 白名单空投</h3><aside>💡<p>白名单空投用于在特定条件下将代币分发给一组预先选定的地址。</p><p>以上几种白名单空投的实现方式各有优缺点，可以根据实际的项目需求来选择：</p><p><strong>1、基于白名单</strong>：适合小规模空投，简单易实现。<br>开发者会在智能合约中维护一个存储映射。用户自己承担领取代币的 Gas 成本。用户需要自己调用合约的空投领取函数，验证其白名单身份后才能领取代币，预先将合格地址添加到白名单，空投时，只有在白名单中的地址才能领取代币。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">contract WhitelistAirdrop &#123;</span><br><span class="line">    mapping(address =&gt; bool) <span class="keyword">public</span> whitelist;</span><br><span class="line">    mapping(address =&gt; bool) <span class="keyword">public</span> hasClaimed;</span><br><span class="line">    address <span class="keyword">public</span> owner;</span><br><span class="line">    uint256 <span class="keyword">public</span> airdropAmount;</span><br><span class="line"></span><br><span class="line">    constructor(uint256 _airdropAmount) &#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">        airdropAmount = _airdropAmount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier <span class="title function_">onlyOwner</span><span class="params">()</span> &#123;</span><br><span class="line">        require(msg.sender == owner, <span class="string">&quot;Not the contract owner&quot;</span>);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">addToWhitelist</span><span class="params">(address[] calldata _addresses)</span> external onlyOwner &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">uint</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; _addresses.length; i++) &#123;</span><br><span class="line">            whitelist[_addresses[i]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">claimAirdrop</span><span class="params">()</span> external &#123;</span><br><span class="line">        require(whitelist[msg.sender], <span class="string">&quot;Not on the whitelist&quot;</span>);</span><br><span class="line">        require(!hasClaimed[msg.sender], <span class="string">&quot;Airdrop already claimed&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行空投逻辑（例如：发送代币）</span></span><br><span class="line">        <span class="comment">// transferTokens(msg.sender, airdropAmount);</span></span><br><span class="line"></span><br><span class="line">        hasClaimed[msg.sender] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、Merkle 树空投</strong>：适合大规模空投，Gas 成本较低，隐私性好。</p><p>Merkle 树白名单空投是优化的方式，通过哈希树的方式对白名单数据进行压缩，减少链上的存储成本。<strong>Merkle 树的根（Merkle Root）会被存储在智能合约中</strong>，<strong>用户通过提供自己的地址和 Merkle 证明来验证自己是否在白名单中。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">contract MerkleAirdrop &#123;</span><br><span class="line">    bytes32 <span class="keyword">public</span> merkleRoot;</span><br><span class="line">    mapping(address =&gt; bool) <span class="keyword">public</span> hasClaimed;</span><br><span class="line"></span><br><span class="line">    constructor(bytes32 _merkleRoot) &#123;</span><br><span class="line">        merkleRoot = _merkleRoot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">claimAirdrop</span><span class="params">(uint256 amount, bytes32[] calldata merkleProof)</span> external &#123;</span><br><span class="line">        require(!hasClaimed[msg.sender], <span class="string">&quot;Airdrop already claimed&quot;</span>);</span><br><span class="line">        <span class="type">bytes32</span> <span class="variable">leaf</span> <span class="operator">=</span> keccak256(abi.encodePacked(msg.sender, amount));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证 Merkle 证明</span></span><br><span class="line">        require(verify(merkleProof, leaf), <span class="string">&quot;Invalid proof&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行空投逻辑</span></span><br><span class="line">        <span class="comment">// transferTokens(msg.sender, amount);</span></span><br><span class="line"></span><br><span class="line">        hasClaimed[msg.sender] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">verify</span><span class="params">(bytes32[] memory proof, bytes32 leaf)</span> internal view <span class="title function_">returns</span> <span class="params">(bool)</span> &#123;</span><br><span class="line">        <span class="type">bytes32</span> <span class="variable">computedHash</span> <span class="operator">=</span> leaf;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">uint256</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; proof.length; i++) &#123;</span><br><span class="line">            <span class="type">bytes32</span> <span class="variable">proofElement</span> <span class="operator">=</span> proof[i];</span><br><span class="line">            <span class="keyword">if</span> (computedHash &lt; proofElement) &#123;</span><br><span class="line">                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> computedHash == merkleRoot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>3、基于签名的空投</strong>：灵活、无存储成本，但用户体验复杂一些。</p><p>合约不需要存储任何白名单地址。开发者通过离线生成签名来验证用户的资格。用户提交他们的签名，合约可以通过公钥验证签名是否合法，从而决定是否空投。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">contract SignatureAirdrop &#123;</span><br><span class="line">    address <span class="keyword">public</span> owner;</span><br><span class="line">    mapping(address =&gt; bool) <span class="keyword">public</span> hasClaimed;</span><br><span class="line">    uint256 <span class="keyword">public</span> airdropAmount;</span><br><span class="line"></span><br><span class="line">    constructor(uint256 _airdropAmount) &#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">        airdropAmount = _airdropAmount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">claimAirdrop</span><span class="params">(bytes memory signature)</span> <span class="keyword">public</span> &#123;</span><br><span class="line">        require(!hasClaimed[msg.sender], <span class="string">&quot;Airdrop already claimed&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">bytes32</span> <span class="variable">message</span> <span class="operator">=</span> prefixed(keccak256(abi.encodePacked(msg.sender, airdropAmount)));</span><br><span class="line">        require(recoverSigner(message, signature) == owner, <span class="string">&quot;Invalid signature&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行空投逻辑</span></span><br><span class="line">        <span class="comment">// transferTokens(msg.sender, airdropAmount);</span></span><br><span class="line"></span><br><span class="line">        hasClaimed[msg.sender] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">prefixed</span><span class="params">(bytes32 hash)</span> internal pure <span class="title function_">returns</span> <span class="params">(bytes32)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> keccak256(abi.encodePacked(<span class="string">&quot;\x19Ethereum Signed Message:\n32&quot;</span>, hash));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">recoverSigner</span><span class="params">(bytes32 message, bytes memory sig)</span> internal pure <span class="title function_">returns</span> <span class="params">(address)</span> &#123;</span><br><span class="line">        (uint8 v, bytes32 r, bytes32 s) = splitSignature(sig);</span><br><span class="line">        <span class="keyword">return</span> ecrecover(message, v, r, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">splitSignature</span><span class="params">(bytes memory sig)</span> internal pure <span class="title function_">returns</span> <span class="params">(uint8 v, bytes32 r, bytes32 s)</span> &#123;</span><br><span class="line">        require(sig.length == <span class="number">65</span>, <span class="string">&quot;Invalid signature length&quot;</span>);</span><br><span class="line"></span><br><span class="line">        assembly &#123;</span><br><span class="line">            r := mload(add(sig, <span class="number">32</span>))</span><br><span class="line">            s := mload(add(sig, <span class="number">64</span>))</span><br><span class="line">            v := <span class="type">byte</span>(<span class="number">0</span>, mload(add(sig, <span class="number">96</span>)))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4、直接空投</strong>：用户体验最佳，但开发者需要支付更多的 Gas。</p><p>开发者直接向白名单地址发送代币，支付每笔转账的 Gas 成本，费用较高。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">contract DirectAirdrop &#123;</span><br><span class="line">    address <span class="keyword">public</span> owner;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier <span class="title function_">onlyOwner</span><span class="params">()</span> &#123;</span><br><span class="line">        require(msg.sender == owner, <span class="string">&quot;Not the owner&quot;</span>);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">airdrop</span><span class="params">(address[] calldata recipients, uint256[] calldata amounts)</span> external onlyOwner &#123;</span><br><span class="line">        require(recipients.length == amounts.length, <span class="string">&quot;Invalid input&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">uint256</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; recipients.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 执行空投逻辑</span></span><br><span class="line">            <span class="comment">// transferTokens(recipients[i], amounts[i]);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据具体项目的规模、用户体验要求和 Gas 成本，可以选择适合的空投方式。</p><h3 id="4、receiver-和-fallback-的区别">4、receiver 和 fallback 的区别</h3><aside>💡<p><code>receive</code> 和 <code>fallback</code> 函数都是用来接收以太币的特殊函数，但它们有不同的触发条件和用途。</p><p><strong><code>receive</code> 主要用于纯粹接收以太币的情况</strong>，例如调用合约的 <code>transfer()</code> 或 <code>send()</code> 函数时，这些函数不附带数据。如果合约中没有定义 <code>receive</code> 函数但仍接收到以太币，且存在 <code>fallback</code> 函数，那么 <code>fallback</code> 会被调用。</p><p><code>fallback</code> <strong>来处理所有的未匹配调用</strong>，包括错误调用、带数据的调用或者接收带数据的以太币。</p><h3 id="区别总结："><strong>区别总结：</strong></h3><table><thead><tr><th>特性</th><th><strong><code>receive</code></strong></th><th><strong><code>fallback</code></strong></th></tr></thead><tbody><tr><td><strong>触发条件</strong></td><td>仅在接收以太币且没有附带数据时触发</td><td>当调用不存在的函数或有数据时触发</td></tr><tr><td><strong>主要用途</strong></td><td>专门用于接收没有数据的以太币转账</td><td>处理不存在的函数调用或接收带数据的以太币</td></tr><tr><td><strong>是否能接收以太币</strong></td><td>可以接收以太币（需要 <code>payable</code>）</td><td>可以接收以太币（需要 <code>payable</code>）</td></tr><tr><td><strong>函数签名</strong></td><td><code>receive() external payable &#123;&#125;</code></td><td><code>fallback() external payable &#123;&#125;</code></td></tr><tr><td><strong>是否需要数据</strong></td><td>不能包含数据，只接收以太币</td><td>可以包含数据或接收以太币</td></tr><tr><td></aside></td><td></td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;面试题&lt;/h1&gt;
&lt;h2 id=&quot;storage&quot;&gt;storage&lt;/h2&gt;
&lt;h3 id=&quot;1、假如-一个合约中只有-三个状态变量-三个变量的类型分别为-bool-uint8-uint64-请问他们会以怎么样的方式存储到-storage-中呢&quot;&gt;1、假如 一个合约中只有</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>opensea中wyvern合约调研</title>
    <link href="https://qzl.luoxiaohei.asia/posts/a4351552.html"/>
    <id>https://qzl.luoxiaohei.asia/posts/a4351552.html</id>
    <published>2024-10-13T16:12:27.000Z</published>
    <updated>2024-10-13T08:14:38.881Z</updated>
    
    <content type="html"><![CDATA[<h1>OpenSea市场合约调研</h1><h2 id="Opensea市场交换流程">Opensea市场交换流程</h2><p><img src="https://i-blog.csdnimg.cn/blog_migrate/f9d8ef2be046814bd09bddb1dad86f18.png" alt="img"></p><p>如图所示，交易的流程包括下面四个步骤：</p><p>授权—提交订单—订单匹配—执行交易</p><p>简单来说Opensea就是一个交易中介，帮你完成交易并从交易中收取一定的报酬，而这个中介的核心合约就是wyvern。</p><h3 id="Wyvern">Wyvern</h3><p><strong>具体工作机制</strong></p><p><strong>Wyvern 协议</strong>是 OpenSea 使用的核心交易协议。Wyvern 协议是一个去中心化的、基于智能合约的 NFT 交易系统，支持用户创建和执行订单。Wyvern 协议使用了一种双向签名交易模型，确保买家和卖家在链下签署订单，只有当两个签名都符合条件时，才在链上执行交易。Wyvern Protocol 的核心机制基于<code>订单匹配</code>和<code>签名验证(代理注册)</code>。</p><h3 id="代理注册">代理注册</h3><p>代理注册目的是通过<code>代理模式</code>实现<code>可更新</code>的<code>授权实现者</code>。</p><p><code>授权实现者</code>是指在NFT（非同质化代币）合约中，通过用户授权后，支持通过<code>delegatecall</code> 或者 <code>call</code> 调用可以代替用户处理 NFT。</p><p><code>可更新</code>是指代理合约可更换目标合约。</p><p>接下来根据具体合约解析，合约继承图如下：</p><p><img src="https://github.com/yuegs/yuegs.github.io/blob/master/images/smart-contract/wyvern-registry/wyvern-registry-contracts.png?raw=true" alt="img"></p><h4 id="代理合约"><strong>代理合约</strong></h4><p>代理过程，通过 <code>fallback</code> 函数实现，<code>fallback</code> 中，通过内联汇编，实现可以接收返回值的 <code>delegatecall</code>。<br>汇编代码中，最终调用 <code>implementation</code> 做实现。而该变量，在 <code>Proxy</code> 构造时，被构造参数赋值为 <code>AuthenticatedProxy</code>目标合约，目标合约的逻辑实现最终决定实际的执行结果。<br>当然，<code>implementation</code> 是可以被“升级”的。即，允许重新上链一个合约作为 <code>implementation</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 代理合约中的fallback函数，使用delegatecall代理调用其他合约。</span><br><span class="line">function () payable public &#123;</span><br><span class="line">    address _impl = implementation();</span><br><span class="line">    require(_impl != address(0));</span><br><span class="line"></span><br><span class="line">    assembly &#123;</span><br><span class="line">        let ptr := mload(0x40)</span><br><span class="line">        // 将参数存储到从 ptr 开始的数据槽，需要的槽位:calldatasize</span><br><span class="line">        calldatacopy(ptr, 0, calldatasize)</span><br><span class="line">        // 注意，这里的 delegatecall 并非 Solidity 中的 delegatecall</span><br><span class="line">        // 此处是 EVM 中的操作符，所以叫做内联汇编</span><br><span class="line">        let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)</span><br><span class="line"></span><br><span class="line">        let size := returndatasize</span><br><span class="line">        // 将返回值存储到从 ptr 开始的数据槽，需要的槽位:size</span><br><span class="line">        returndatacopy(ptr, 0, size)</span><br><span class="line"></span><br><span class="line">        // 检查调用是否成功</span><br><span class="line">        switch result</span><br><span class="line">        case 0 &#123; revert(ptr, size) &#125;</span><br><span class="line">        // 如果成功，则返回数据</span><br><span class="line">        default &#123; return(ptr, size) &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AuthenticatedProxy"><a href="https://etherscan.io/address/0xf9e266af4bca5890e2781812cc6a6e89495a79f2#code">AuthenticatedProxy</a></h4><p><code>AuthenticatedProxy</code> 是事实上的<code>授权实现者</code>。</p><p><strong>AuthenticatedProxy</strong> 是执行<strong>授权逻辑</strong>的核心合约，用户可以通过代理合约 <strong>OwnableDelegateProxy</strong> 进行授权操作，最终由 <strong>AuthenticatedProxy</strong> 通过 <code>delegatecall</code> 处理实际的调用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// AuthenticatedProxy核心函数，用于代理执行目标合约的调用</span><br><span class="line">// dest目标合约</span><br><span class="line">function proxy(address dest, HowToCall howToCall, bytes calldata) public returns (bool result)</span><br><span class="line">&#123;</span><br><span class="line">    // user, 发起 `registerProxy` 注册的用户。</span><br><span class="line">    // registry, 即 `ProxyRegistry`</span><br><span class="line">    // 因此，调用该函数，需要调用者是注册的发起者，或者，是调用者授权的第三方</span><br><span class="line">    require(msg.sender == user || (!revoked &amp;&amp; registry.contracts(msg.sender)));</span><br><span class="line">    if (howToCall == HowToCall.Call) &#123;</span><br><span class="line">        result = dest.call(calldata);</span><br><span class="line">    &#125; else if (howToCall == HowToCall.DelegateCall) &#123;</span><br><span class="line">        result = dest.delegatecall(calldata);</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，在注册中心 <code>registry</code>（ProxyRegistry），已经对交易协议 <a href="https://etherscan.io/address/0x7f268357a8c2552623316e2562d90e642bb538e5#code">Wyvern Exchange v2</a> 进行了授权。因此，当调用者为 <code>Wyvern Exchange v2</code> 时，<code>registry.contracts(msg.sender))</code> 将返回 <code>true</code>。</p><p><strong>ProxyRegistry</strong></p><p>主要包括两个功能：</p><ul><li>授权管理</li><li>为调用者创建代理对象。</li></ul><p><strong>授权管理</strong></p><p>授权的本质，是 <code>registry.contracts(msg.sender)</code> 布尔值的赋值。根据该值，将决定是否被允许可以进行 <code>AuthenticatedProxy</code> 中 <code>proxy</code> 调用。</p><p>在授权第三方可以请求代理方法执行时，授权过程需要两周才会生效。而取消一个授权，是可以直接取消的。</p><p>在授权时，只有一种不需要 <code>两周时延</code> 的方法，但是只能调用一次。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// ProxyRegistry 合约函数</span><br><span class="line">// 三方授权</span><br><span class="line">function startGrantAuthentication (address addr) public onlyOwner&#123;</span><br><span class="line">    require(!contracts[addr] &amp;&amp; pending[addr] == 0);</span><br><span class="line">    // 两周后，再调用 endGrantAuthentication 可以完成授权  </span><br><span class="line">    pending[addr] = now;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function endGrantAuthentication(address addr) public onlyOwner &#123;</span><br><span class="line">    require(pending[addr] &gt; 0);  // 确保 startGrantAuthentication 已经调用过</span><br><span class="line">    require(now &gt;= pending[addr] + 2 weeks);  // 确保至少两周时间已经过去</span><br><span class="line">    contracts[addr] = true;  // 授权完成</span><br><span class="line">    pending[addr] = 0;  // 清空 pending 状态</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function grantInitialAuthentication (address authAddress) onlyOwner public</span><br><span class="line">&#123;</span><br><span class="line">    require(!initialAddressSet);</span><br><span class="line">    initialAddressSet = true;</span><br><span class="line">    contracts[authAddress] = true;</span><br><span class="line">&#125;</span><br><span class="line">// 取消授权</span><br><span class="line">function revokeAuthentication (address addr) public onlyOwner</span><br><span class="line">&#123;</span><br><span class="line">    contracts[addr] = false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建代理</strong></p><p><code>ProxyRegistry</code> 会为用户创建 <code>OwnableDelegateProxy</code> 合约。<code>OwnableDelegateProxy</code> 合约是用户授权的对象，它有权限转移用户的 NFT。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function registerProxy() public returns (OwnableDelegateProxy proxy)</span><br><span class="line">&#123;</span><br><span class="line">    require(proxies[msg.sender] == address(0));</span><br><span class="line">    // 为 `msg.sender` 创建一个代理合约</span><br><span class="line">    // `initialize` 实际上，是 `AuthenticatedProxy` 中的方法</span><br><span class="line">    proxy = new OwnableDelegateProxy(msg.sender, delegateProxyImplementation, abi.encodeWithSignature(&quot;initialize(address,address)&quot;, msg.sender, address(this)));</span><br><span class="line">    proxies[msg.sender] = proxy;</span><br><span class="line">    return proxy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代理对象-OwnableDelegateProxy"><a href="https://etherscan.io/address/0x16be9005894e09671c6efb50cd1d221f0d6320f2#code">代理对象 OwnableDelegateProxy</a></h4><p>最终，<strong>为用户注册的代理合约为 <code>OwnableDelegateProxy</code></strong><br>其构造方法为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// owner:AuthenticatedProxy;initialImplementation:AuthenticatedProxy;calldata:AuthenticatedProxy的初始化数据</span><br><span class="line">constructor(address owner, address initialImplementation, bytes calldata)</span><br><span class="line">public</span><br><span class="line">&#123;</span><br><span class="line">// 设置代理合约的所有者</span><br><span class="line">    // 被代理者，可以更换 代理实现，即 AuthenticatedProxy</span><br><span class="line">    setUpgradeabilityOwner(owner);</span><br><span class="line">    // 设置代理合约的目标实现合约</span><br><span class="line">    _upgradeTo(initialImplementation);</span><br><span class="line">    // 注意，这里通过 `delegatecall` 调用了 AuthenticatedProxy 中的 `initialize` 方法</span><br><span class="line">    require(initialImplementation.delegatecall(calldata));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 调用了 AuthenticatedProxy 中的 `initialize`</span><br><span class="line">function initialize (address addrUser, ProxyRegistry addrRegistry) public</span><br><span class="line">&#123;</span><br><span class="line">// 防止重复初始化</span><br><span class="line">    require(!initialized);</span><br><span class="line">    // 以下状态变量，都将在 OwnableDelegateProxy 空间中。</span><br><span class="line">    initialized = true;</span><br><span class="line">    user = addrUser;</span><br><span class="line">    registry = addrRegistry;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="WyvernProxyRegistry"><a href="https://etherscan.io/address/0xa5409ec958c83c3f309868babaca7c86dcb077c1#code">WyvernProxyRegistry</a></h4><p>继承于<code>ProxyRegistry</code>，在构造函数中创建AuthenticatedProxy，该对象将传递给各个由 <code>WyvernProxyRegistry</code> 创建的 <code>OwnableDelegateProxy</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">constructor () public</span><br><span class="line">&#123;</span><br><span class="line">    delegateProxyImplementation = new AuthenticatedProxy();</span><br><span class="line">&#125;</span><br><span class="line">function registerProxy()</span><br><span class="line">        public</span><br><span class="line">        returns (OwnableDelegateProxy proxy)</span><br><span class="line">&#123;</span><br><span class="line">        require(proxies[msg.sender] == address(0));</span><br><span class="line">        proxy = new OwnableDelegateProxy(msg.sender, delegateProxyImplementation, abi.encodeWithSignature(&quot;initialize(address,address)&quot;, msg.sender, address(this)));</span><br><span class="line">        proxies[msg.sender] = proxy;</span><br><span class="line">        return proxy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且进行一次没有时延的合约授权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function grantInitialAuthentication (address authAddress) onlyOwner public</span><br><span class="line">&#123;</span><br><span class="line">    require(!initialAddressSet);</span><br><span class="line">    initialAddressSet = true;</span><br><span class="line">    contracts[authAddress] = true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-OwnedUpgradeabilityProxy">7. <a href="https://etherscan.io/address/0xc28d31eacec212e2f0606f718bfe936a29b98d1c#code">OwnedUpgradeabilityProxy</a></h4><p>最后就是管理代理更新的合约。这个合约有两个功能：1、管理谁有权限更新实现；2、当前实现的管理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function transferProxyOwnership(address newOwner) public onlyProxyOwner &#123;</span><br><span class="line">    require(newOwner != address(0));</span><br><span class="line">    emit ProxyOwnershipTransferred(proxyOwner(), newOwner);</span><br><span class="line">    setUpgradeabilityOwner(newOwner);</span><br><span class="line">&#125;</span><br><span class="line">function _upgradeTo(address newImplementation) internal &#123;</span><br><span class="line">    address currentImplementation = implementation();</span><br><span class="line">    require(currentImplementation != newImplementation);</span><br><span class="line">    setImplementation(newImplementation);</span><br><span class="line">    emit Upgraded(newImplementation);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="订单匹配">订单匹配</h3><h4 id="1、概述">1、概述</h4><p>匹配过程围绕 <em><strong>*买/卖双方的订单*</strong></em> 展开。卖方创建销售订单，以固定价格或者竞拍的方式，将 NFT 挂出去；买方创建购买订单，并将卖方创建的销售订单一起，发给交换合约 <a href="https://etherscan.io/address/0x7f268357a8c2552623316e2562d90e642bb538e5#code">Wyvern Exchange Contract</a>。交换合约将对订单校验，校验通过后，完成两个转移：</p><ul><li>支付费用转移；</li><li>NFT 产品转移。</li></ul><p>这个过程涉及订单、费用转移和NFT转移，接下来按照这个顺序展开。</p><p><strong>WyvernExchangeWithBulkCancellations合约地址</strong>：<a href="https://etherscan.io/address/0x7f268357a8c2552623316e2562d90e642bb538e5#code">https://etherscan.io/address/0x7f268357a8c2552623316e2562d90e642bb538e5#code</a></p><h4 id="2-1-、订单">2.1 、订单</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">struct Order &#123;</span><br><span class="line">    // 交换合约 Wyvern Exchange Contracrt 的地址</span><br><span class="line">    address exchange;</span><br><span class="line">    // 订单创建者，对于卖方订单来说，是卖方账户；对于买方订单来说，是买方账户</span><br><span class="line">    address maker;</span><br><span class="line">    // 订单另一方，即，订单参与者。对于卖单，该地址为零地址；对于买单，该地址是卖方账户地址</span><br><span class="line">    address taker;</span><br><span class="line">    // 订单创建者需要支付的 relayerFee，这部分费用支付给了平台方</span><br><span class="line">    uint makerRelayerFee;</span><br><span class="line">    // 订单参与方需要支付的 relayerFee，费用仍然是支付给了平台方</span><br><span class="line">    uint takerRelayerFee;</span><br><span class="line">    // 订单创建者需要支付的协议费，这部分费用将支付给 Wyvern</span><br><span class="line">    uint makerProtocolFee;</span><br><span class="line">    // 订单参与者方需要支付的协议费，这部分费用将支付给 Wyvern</span><br><span class="line">    uint takerProtocolFee;</span><br><span class="line">    // 平台方费用接收账户</span><br><span class="line">    address feeRecipient;</span><br><span class="line">    // 费用收取方法：只用支付协议费，或者是需要同时支付协议费和平台费</span><br><span class="line">    FeeMethod feeMethod;</span><br><span class="line">    // 该订单是卖方单还是买方单</span><br><span class="line">    SaleKindInterface.Side side;</span><br><span class="line">    // 销售方式是固定价格，还是采用竞拍的方式</span><br><span class="line">    SaleKindInterface.SaleKind saleKind;</span><br><span class="line">    // 需要借助该账户，完成 NFT 转移</span><br><span class="line">    address target;</span><br><span class="line">    // 调用方式是 call 还是 delegatecall</span><br><span class="line">    AuthenticatedProxy.HowToCall howToCall;</span><br><span class="line">    // target 执行时的 calldata</span><br><span class="line">    bytes calldata;</span><br><span class="line">    // Calldata replacement pattern, or an empty byte array for no replacement. //</span><br><span class="line">    bytes replacementPattern;</span><br><span class="line">    // 静态调用（不修改状态）的 target 账户地址；为 0 表示没有这种调用</span><br><span class="line">    address staticTarget;</span><br><span class="line">    // 静态调用时设置的额外数据，最终交给 staticTarget 处理</span><br><span class="line">    bytes staticExtradata;</span><br><span class="line">    // 该地址为 0 ，表示使用 ether 支付，否则，表示使用一个 erc20 token 支付</span><br><span class="line">    address paymentToken;</span><br><span class="line">    // Base price of the order (in paymentTokens). //</span><br><span class="line">    // 如果是 saleKind 固定价格，则该值就表示固定价格；否则，真正的价格，还包括 extra 部分. 价格单位为 Wei</span><br><span class="line">    uint basePrice;</span><br><span class="line">    // 竞拍方式下，extra 表示需要额外的最大值. 价格单位为 Wei</span><br><span class="line">    uint extra;</span><br><span class="line">    // 挂单时间</span><br><span class="line">    uint listingTime;</span><br><span class="line">    // 订单过期失效时间</span><br><span class="line">    uint expirationTime;</span><br><span class="line">    // 给订单加盐，防止 hash 重复</span><br><span class="line">    uint salt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在订单中，根据销售方式不同，订单中销售价格的确定流程为：</p><p><img src="https://github.com/yuegs/yuegs.github.io/blob/master/images/smart-contract/wyvern-exchange/wyvern-exchange-order-price.png?raw=true" alt="img"></p><p>由于在卖单/买单中，都会存在价格计算，因此，<em><strong>*最终最后的价格结算*</strong></em>，是根据下述流程过程的：</p><p><img src="https://github.com/yuegs/yuegs.github.io/blob/master/images/smart-contract/wyvern-exchange/wyvern-exchange-order-final-price.png?raw=true" alt="img"></p><p>注意，最终的出来的价格，就是会转给卖家的价格。<br>但是，protocolFee 和 relayerFee 都并不包含在这个价格里，这两个费用由买卖双方根据订单中的相关记录自己出。对于每一种 fee，卖家订单中订单中 feeRecipient 为有效地址，卖家需要支付 makerRelayerFee 给 feeRecipient，买家需要支付 takerRelayerFee 给 feeRecipient，反之亦然。对于 protocolFee，逻辑亦是如此。<br><strong>实际上，在 OpenSea 的实践中，卖方 feeRecipient 为合法地址，makerRelayerFee 为 250，takerRelayerFee 为 0，因此，只有卖方支付了 relayerFee 给 OpenSea，支付的金额是其收入的 2.5%。买方没有其它额外支付。</strong></p><h4 id="2-2、-创建订单">2.2、 创建订单</h4><p>用户在与 <a href="https://etherscan.io/address/0x7f268357a8c2552623316e2562d90e642bb538e5#code">Wyvern Exchange Contract</a> 交互，需要完成订单匹配时，需要将 买/卖 双方的订单都传递给交互合约。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function atomicMatch_(</span><br><span class="line">        address[14] addrs,uint[18] uints,uint8[8] feeMethodsSidesKindsHowToCalls,bytes calldataBuy,bytes calldataSell,bytes replacementPatternBuy,bytes replacementPatternSell,bytes staticExtradataBuy,bytes staticExtradataSell,uint8[2] vs,bytes32[5] rssMetadata)</span><br><span class="line">    public</span><br><span class="line">    payable</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        return atomicMatch(</span><br><span class="line">            // 买单</span><br><span class="line">            Order(addrs[0], addrs[1], addrs[2], uints[0], uints[1], uints[2], uints[3], addrs[3], FeeMethod(feeMethodsSidesKindsHowToCalls[0]), SaleKindInterface.Side(feeMethodsSidesKindsHowToCalls[1]), SaleKindInterface.SaleKind(feeMethodsSidesKindsHowToCalls[2]), addrs[4], AuthenticatedProxy.HowToCall(feeMethodsSidesKindsHowToCalls[3]), calldataBuy, replacementPatternBuy, addrs[5], staticExtradataBuy, ERC20(addrs[6]), uints[4], uints[5], uints[6], uints[7], uints[8]),</span><br><span class="line">            // 签名</span><br><span class="line">            Sig(vs[0], rssMetadata[0], rssMetadata[1]),</span><br><span class="line">            // 卖单</span><br><span class="line">            Order(addrs[7], addrs[8], addrs[9], uints[9], uints[10], uints[11], uints[12], addrs[10], FeeMethod(feeMethodsSidesKindsHowToCalls[4]), SaleKindInterface.Side(feeMethodsSidesKindsHowToCalls[5]), SaleKindInterface.SaleKind(feeMethodsSidesKindsHowToCalls[6]), addrs[11], AuthenticatedProxy.HowToCall(feeMethodsSidesKindsHowToCalls[7]), calldataSell, replacementPatternSell, addrs[12], staticExtradataSell, ERC20(addrs[13]), uints[13], uints[14], uints[15], uints[16], uints[17]),</span><br><span class="line">            // 签名</span><br><span class="line">            Sig(vs[1], rssMetadata[2], rssMetadata[3]),</span><br><span class="line">            rssMetadata[4]</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="2-3、-订单校验">2.3、 订单校验</h4><p>订单校验，可以分为参数校验和订单合法性校验。<br>参数校验过程如下：</p><p><img src="https://github.com/yuegs/yuegs.github.io/blob/master/images/smart-contract/wyvern-exchange/wyvern-exchange-order-params-check.png?raw=true" alt="img"></p><p>订单合法性校验过程如下：</p><p><img src="https://github.com/yuegs/yuegs.github.io/blob/master/images/smart-contract/wyvern-exchange/wyvern-exchange-order-check.png?raw=true" alt="img"></p><p>可以看到，合法性校验包含了参数校验。<br>这两种校验方式，分别用于两种不同的场景，如果交易发起者是买家，买家只需要进行参数校验，反之，需要进行合法性校验，验证订单的签名。<br>这是一种减少不必要 gas 消耗的过程。</p><h4 id="3、-费用支付">3、 费用支付</h4><p>费用是由卖单中的 <code>feeMethod</code> 指定的，收取方式有两种：</p><ul><li><em><strong>*SplitFee：*</strong></em> 根据卖方或者买方中的订单记录（二选一），买卖双方按照卖方订单中指定的支付币种（ether 或 erc20 token）各自支付 RelayerFee 给订单指定的 FeeRecipient，由买卖双方各自支付 ProtocolFee 给交易合约（<a href="https://etherscan.io/address/0x7f268357a8c2552623316e2562d90e642bb538e5#readContract">Wyvern Exchange Contract</a>）中指定的 protocolFeeRecipient.</li><li><em><strong>*ProtocolFee：*</strong></em> 根据卖方或者买方中的订单记录，使用交易合约中指定的 exchangeToken 支付协议费。</li></ul><p><img src="https://github.com/yuegs/yuegs.github.io/blob/master/images/smart-contract/wyvern-exchange/wyvern-exchange-relayer-fee.png?raw=true" alt="img"></p><p><img src="https://github.com/yuegs/yuegs.github.io/blob/master/images/smart-contract/wyvern-exchange/wyvern-exchange-protocol-fee.png?raw=true" alt="img"></p><p>在 OpenSea 平台上，makerRelayerFee 为 250，且只是从卖家收入中扣除，因此，其收入为交易额度的 2.5%，protocolFee 为 0，暂时还是没有给 Wyvern 协议费。</p><h4 id="4、-交易转账">4、 交易转账</h4><p>NFT 交易需要转账。</p><p><img src="https://github.com/yuegs/yuegs.github.io/blob/master/images/smart-contract/wyvern-exchange/wyvern-exchange-pay.png?raw=true" alt="img"></p><h4 id="5、-NFT-转移">5、 NFT 转移</h4><p><img src="https://github.com/yuegs/yuegs.github.io/blob/master/images/smart-contract/wyvern-exchange/wyvern-exchange-match.png?raw=true" alt="img"></p><hr><p>参考：</p><p><a href="https://wyvernprotocol.com/docs/protocol-components#authorizing-an-order">Wyvern 官网关于授权订单的介绍</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;OpenSea市场合约调研&lt;/h1&gt;
&lt;h2 id=&quot;Opensea市场交换流程&quot;&gt;Opensea市场交换流程&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://i-blog.csdnimg.cn/blog_migrate/f9d8ef2be046814bd09bddb</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hardhat学习记录</title>
    <link href="https://qzl.luoxiaohei.asia/posts/fa683a29.html"/>
    <id>https://qzl.luoxiaohei.asia/posts/fa683a29.html</id>
    <published>2024-10-06T10:59:04.000Z</published>
    <updated>2024-10-13T08:14:19.566Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://hardhat.org/tutorial">https://hardhat.org/tutorial</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://hardhat.org/tutorial&quot;&gt;https://hardhat.org/tutorial&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>虚拟机配置</title>
    <link href="https://qzl.luoxiaohei.asia/posts/9c5ebeea.html"/>
    <id>https://qzl.luoxiaohei.asia/posts/9c5ebeea.html</id>
    <published>2024-10-05T21:48:07.000Z</published>
    <updated>2024-10-05T14:29:35.114Z</updated>
    
    <content type="html"><![CDATA[<h1>虚拟机配置</h1><p>本来是使用WSL的，但是奈何它的网络配置太麻烦了。导致网络代理一直出不去。</p><p>所以最后还是使用VM了，VM配置代理只需要在网络配置中选择 网络配置项 在 虚拟机中设置手动代理。</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/5ab320459f15a3b4338421f1c5dfe6d6.png" alt="img"></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/3799988deebfaaf7cef1b13c329631da.png" alt="img"></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/05f8d947f6ccce3f08fc91b7118ddf3d.png" alt="img"></p><p>最后就是用自己的VSCODE连接自己的虚拟机了：<br><code>ssh 主机名@ip</code></p><h2 id="设置root登录和免密登录">设置root登录和免密登录</h2><p>1、虚拟机设置ssh</p><h4 id="激活配置">激活配置</h4><p>注释掉PermitRootLogin without-password，即#PermitRootLogin without-password<br>增加一行：PermitRootLogin yes</p><h4 id="重启ssh服务">重启ssh服务</h4><p>sudo service ssh restart</p><h4 id="设置root用户密码">设置root用户密码</h4><p>sudo passwd root</p><p>设置vscode中config</p><p>免密：</p><p><a href="https://blog.csdn.net/qq_33909269/article/details/136676954">https://blog.csdn.net/qq_33909269/article/details/136676954</a></p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;虚拟机配置&lt;/h1&gt;
&lt;p&gt;本来是使用WSL的，但是奈何它的网络配置太麻烦了。导致网络代理一直出不去。&lt;/p&gt;
&lt;p&gt;所以最后还是使用VM了，VM配置代理只需要在网络配置中选择 网络配置项 在 虚拟机中设置手动代理。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i-</summary>
      
    
    
    
    <category term="Linux" scheme="https://qzl.luoxiaohei.asia/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://qzl.luoxiaohei.asia/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>学习习惯反思</title>
    <link href="https://qzl.luoxiaohei.asia/posts/d6897c72.html"/>
    <id>https://qzl.luoxiaohei.asia/posts/d6897c72.html</id>
    <published>2024-09-30T20:17:28.000Z</published>
    <updated>2024-09-30T13:21:44.468Z</updated>
    
    <content type="html"><![CDATA[<h1>学习习惯反思</h1><p>今天探讨一下自己学习习惯上的错误，并进行思考和批判，最后得出结论。</p><h2 id="学习习惯上的错误">学习习惯上的错误</h2><p>第一，我学习速度很快，但是急于求成，经常导致学过的知识日后就忘记了，并且想要重新捡起来的时候不知从何处下手，这导致我后面学习都需要去先补一下之前的基础知识，直接影响我学习的兴趣。</p><p>第二，我学习速度很快的一个原因是我的工作狂模式，这个模式会让我快速理解抽象知识，但是也会使我对生活中的事情没有精力，我管这种模式叫做：牛马模式，只有老板才喜欢这种牛马，但是我不能经常这样，这样是不明智的，捡了芝麻丢了西瓜。</p><p>第三，我大部分时间都是学习，而没有做总结和展望的内容，导致我学习不系统，也不全面。</p><h2 id="思考和反思">思考和反思</h2><p>首先第一个，学习到一个阶段的时候应该去做总结、回望和展望。这是为什么呢？因为虽然这是短时间吃力不讨好的事情，但是它带来的是长久的回报，咱总不能做一个目光短浅的鼠辈吧。这个主要是福格行为模型中的提示吧，根据福格说的，多观察观察自己的行为习惯，什么时候才会出现刺激，一般是在我很闲不知道干什么的时候，这种情况根本不受控制，依照我高中的学习习惯，能给我制定规范的，只有贴在我桌子上的小纸条了，哈哈，没想到我高中就会用福格行为模型了，真的了不起啊，所以学习开始之前，先规划一下自己要做哪些事情这样才能提示我做学习回顾的事情啊。</p><p>第二个，这个简单来说就是wlb，work life balance，人性就是这样，喜欢快节奏和只看结果。这是人性的缺点，这种东西你可以接收别人不克服，但是总不能也放纵自己吧，毕竟我们是有血有肉的人啊。并且根据《福格行为模型》，提示我不缺，因为每天我都会来实验室学习，并且想想自己的梦想，我就能动起来，可是工作狂在工作的过程中，动机和学习的难度都是呈现指数级上升的，明智的做法是控制好自己学习的时间，做到用学习效率最高性价比，效率不高的时候立刻去放松奖励自己，我经常也是不知道怎么奖励自己，看我喜欢什么？给自己买吃的，玩的，通过这个时候我是不想接触电子产品的，所以可以运动，可以去找人聊天，实在不行，就算是去一个人的旅行也可以啊……平时还是<strong>多记录记录自己喜欢什么</strong>吧，毕竟自己才是最重要的！！！永远别忘记了，没有自己，哪来的世界。</p><p><img src="https://s2.loli.net/2024/09/30/OYA29T63yiGawgs.png" alt="code"></p><p>第三个，第三个和第一个相似，区别在于第一个没有做日后回顾的内容，第三个没有做到系统的学习，没有成体系让自己可以复述自己学习的内容。提示自己做成体系的学习，这个刺激源更难找了，下意识我想到了用记录的形式监督自己成体系的学习，就像b站up主一样，可是我的环境不允许啊，我在学校，寝室、不允许我做这种vlog的事情，那就先从plog开始做起吧，人家一天一更新，你就一周一更新呗，慢慢养成习惯，熟练之后也可以一周一更新了！把这个作为自己的副业不是很好嘛。</p><h2 id="结论">结论</h2><ul><li><strong>定期总结与回顾</strong>：通过开始学习之前贴纸条方式提醒自己做复习</li><li><strong>平衡工作与生活</strong>：控制学习时间，记录奖励自己的方式，保持生活质量。</li><li><strong>成体系学习</strong>：通过记录监督自己，逐步形成系统性学习习惯。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;学习习惯反思&lt;/h1&gt;
&lt;p&gt;今天探讨一下自己学习习惯上的错误，并进行思考和批判，最后得出结论。&lt;/p&gt;
&lt;h2 id=&quot;学习习惯上的错误&quot;&gt;学习习惯上的错误&lt;/h2&gt;
&lt;p&gt;第一，我学习速度很快，但是急于求成，经常导致学过的知识日后就忘记了，并且想要重新捡起来的时候不知</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>immich独立备份相册工具</title>
    <link href="https://qzl.luoxiaohei.asia/posts/33a51782.html"/>
    <id>https://qzl.luoxiaohei.asia/posts/33a51782.html</id>
    <published>2024-09-26T20:17:53.000Z</published>
    <updated>2024-09-30T13:21:44.465Z</updated>
    
    <content type="html"><![CDATA[<h1>immich独立备份相册工具</h1><p>今天看到holiis的开源项目分享，我是一个怀旧的人，所以备份我的旧照片一直是我头疼的问题，这个基于</p><p>redis和js的服务器后端解决了我备份查看功能的所有痛点。</p><p><strong>安装使用步骤：</strong></p><p>github下载</p><p>直接启动docker</p><p>打开http://localhost:2283/</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;immich独立备份相册工具&lt;/h1&gt;
&lt;p&gt;今天看到holiis的开源项目分享，我是一个怀旧的人，所以备份我的旧照片一直是我头疼的问题，这个基于&lt;/p&gt;
&lt;p&gt;redis和js的服务器后端解决了我备份查看功能的所有痛点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安装使用步骤：&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>秋招之设计模式</title>
    <link href="https://qzl.luoxiaohei.asia/posts/7b0386da.html"/>
    <id>https://qzl.luoxiaohei.asia/posts/7b0386da.html</id>
    <published>2024-09-25T14:07:37.000Z</published>
    <updated>2024-09-25T07:32:43.337Z</updated>
    
    <content type="html"><![CDATA[<aside># 设计模式<p>本文介绍面试中经常性问道的有关设计模式的面试题及解答。</p><p>本文分为基础知识和面试题</p></aside><h2 id="基础知识">基础知识</h2><h3 id="设计模式的种类">设计模式的种类</h3><p>设计模式分为下面三种：</p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/63e64ec8-79e0-46cd-ac4d-4589e17b3246/f05851d7-4c6f-4262-b61a-ca45db17c684/image.png" alt="image.png"></p><p>**创建型模式：**用来描述 “如何创建对象”，它的主要特点是 “将对象的创建和使用分离”。常见的有单例模式、工厂方法；</p><p>**结构型模式：**用来描述如何将类或对象按照某种布局组成更大的结构。常见的有适配器模式、桥接、享元；</p><p>**行为型模式：**用来识别对象之间的常用交流模式以及如何分配职责。常见的有模板方法、策略、观察者；</p><h3 id="设计模式的设计原则">设计模式的设计原则</h3><p>遵循这些原则可以帮助开发者设计高质量、可维护、可扩展的软件系统。常见的有</p><p><strong>单一职责</strong>原则</p><p><strong>开放封闭</strong>原则（不修改现有代码的情况下，通过扩展（如继承或实现接口）来实现新的功能）</p><p><a href="https://baike.baidu.com/item/%E9%87%8C%E6%B0%8F%E4%BB%A3%E6%8D%A2%E5%8E%9F%E5%88%99/3104388"><strong>里氏代换</strong></a>原则（子类应该可以替换其父类，并且能够正常使用，而不会导致程序错误）</p><p><strong>依赖倒置</strong>原则 （高层实例不应该依赖于低层实例，二者都应该依赖于抽象。简单来说就是高层模块不能依赖底层模块，而需要倒置一下）</p><p><strong>接口隔离</strong>原则（应该使用多个专门的接口，而不是一个通用的接口。）</p><h3 id="常见设计模式">常见设计模式</h3><p><strong>单例</strong></p><p>单例模式用于保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><p>分为饥汉、饿汉、双重检查锁三种实现方式</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="comment">// 在类加载时就创建实例</span></span><br><span class="line">    private <span class="keyword">static</span> final <span class="title class_">Singleton</span> instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造函数，防止外部实例化</span></span><br><span class="line">    private <span class="title class_">Singleton</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供全局访问点</span></span><br><span class="line">    public <span class="keyword">static</span> <span class="title class_">Singleton</span> <span class="title function_">getInstance</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="comment">// 声明实例但不初始化</span></span><br><span class="line">    private <span class="keyword">static</span> <span class="title class_">Singleton</span> instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造函数，防止外部实例化</span></span><br><span class="line">    private <span class="title class_">Singleton</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供全局访问点</span></span><br><span class="line">    public <span class="keyword">static</span> <span class="title class_">Singleton</span> <span class="title function_">getInstance</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="comment">// 声明实例并使用 volatile 关键字保证可见性和防止指令重排序</span></span><br><span class="line">    private <span class="keyword">static</span> volatile <span class="title class_">Singleton</span> instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造函数，防止外部实例化</span></span><br><span class="line">    private <span class="title class_">Singleton</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供全局访问点</span></span><br><span class="line">    public <span class="keyword">static</span> <span class="title class_">Singleton</span> <span class="title function_">getInstance</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123; <span class="comment">// 第一次检查</span></span><br><span class="line">            synchronized (<span class="title class_">Singleton</span>.<span class="property">class</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123; <span class="comment">// 第二次检查</span></span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>工厂方法</strong></p><p>工厂模式是用来生产对象的，常见的工厂模式有：</p><p><strong>简单工厂模式、工厂方法模式和抽象工厂模式</strong>。</p><ul><li><strong>简单工厂模式</strong>：通过一个工厂类集中管理对象的创建，适用于产品种类较少且不经常变化的场景。</li><li><strong>工厂方法模式</strong>：每个产品对应一个具体工厂，适用于产品种类较多且需要扩展的场景。</li><li><strong>抽象工厂模式</strong>：创建一组相关的产品，适用于需要创建多个产品家族的场景。</li></ul><p><strong>结构型设计模式—适配器模式</strong></p><p><strong>适配器模式的作用是解决两个软件实体间的接口不兼容的问题。</strong></p><p>适配器模式的核心思想是通过一个适配器类，将一个类的接口转换成另一个接口，从而使得原本不兼容的类可以一起工作。</p><p><strong>适配器模式的结构</strong></p><ol><li><strong>目标接口（Target）</strong>：客户端期望的接口。适配器类需要实现这个接口。</li><li><strong>适配器类（Adapter）</strong>：适配器类实现了目标接口，并持有一个被适配者的实例。适配器类通过调用被适配者的方法来实现目标接口。</li><li><strong>被适配者（Adaptee）</strong>：被适配者是现有类或系统，其接口与目标接口不匹配。</li></ol><p><strong>适配器模式的实现</strong></p><p>适配器模式有两种常见的实现方式：<strong>类适配器</strong>和<strong>对象适配器</strong>。</p><p>这里先只写类适配器</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标接口</span></span><br><span class="line">interface <span class="title class_">Target</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">request</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被适配者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Adaptee</span> &#123;</span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">specificRequest</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;Adaptee&#x27;s specific request&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 适配器类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Adapter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Adaptee</span> implements <span class="title class_">Target</span> &#123;</span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">request</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">specificRequest</span>(); <span class="comment">// 调用被适配者的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">        <span class="title class_">Target</span> target = <span class="keyword">new</span> <span class="title class_">Adapter</span>();</span><br><span class="line">        target.<span class="title function_">request</span>(); <span class="comment">// 调用目标接口的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结构性设计模式—桥接模式</strong></p><p>桥接模式的核心思想是将抽象部分（Abstraction）与实现部分（Implementation）分离，使它们可以独立变化。</p><p><strong>结构性设计模式—享元</strong></p><p>享元模式是一种通过尽可能多地共享数据来最小化内存使用和对象数量，从而提高性能的设计模式</p><p>字符串池：在Java中，String对象使用了享元模式，通过字符串池的方式共享相同的字符串对象，避免了重复创建。</p><p><strong>行为型设计模式—模板方法</strong></p><p>模板方法模式是一种行为设计模式，他的主要作用就是复用代码，我们的代码中可能会有一些公共的部分并且还有一些定制的部分，那么公共这部分就可以定义在一个父类中，然后将定制的部分实现在子类中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractClass</span> &#123;</span><br><span class="line">    <span class="comment">// 模板方法，定义算法的骨架</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">templateMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        step1();</span><br><span class="line">        step2();</span><br><span class="line">        step3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽象方法，由子类实现</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">step1</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 钩子方法，子类可以选择实现</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">step2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Default implementation of step2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽象方法，由子类实现</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">step3</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体子类A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteClassA</span> <span class="keyword">extends</span> <span class="title class_">AbstractClass</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">step1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ConcreteClassA: step1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">step3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ConcreteClassA: step3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体子类B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteClassB</span> <span class="keyword">extends</span> <span class="title class_">AbstractClass</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">step1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ConcreteClassB: step1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">step2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ConcreteClassB: step2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">step3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ConcreteClassB: step3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AbstractClass</span> <span class="variable">classA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteClassA</span>();</span><br><span class="line">        classA.templateMethod();</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="type">AbstractClass</span> <span class="variable">classB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteClassB</span>();</span><br><span class="line">        classB.templateMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>行为型设计模式—策略</strong></p><ol><li><p><strong>定义策略接口</strong>：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentStrategy</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">int</span> amount)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>实现具体策略类</strong>：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreditCardPayment</span> <span class="keyword">implements</span> <span class="title class_">PaymentStrategy</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Paid &quot;</span> + amount + <span class="string">&quot; using Credit Card&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AlipayPayment</span> <span class="keyword">implements</span> <span class="title class_">PaymentStrategy</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Paid &quot;</span> + amount + <span class="string">&quot; using Alipay&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>创建上下文类</strong>：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> PaymentStrategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPaymentStrategy</span><span class="params">(PaymentStrategy strategy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processPayment</span><span class="params">(<span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        strategy.pay(amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>客户端使用上下文类</strong>：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">PaymentContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PaymentContext</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用信用卡支付</span></span><br><span class="line">        context.setPaymentStrategy(<span class="keyword">new</span> <span class="title class_">CreditCardPayment</span>());</span><br><span class="line">        context.processPayment(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用支付宝支付</span></span><br><span class="line">        context.setPaymentStrategy(<span class="keyword">new</span> <span class="title class_">AlipayPayment</span>());</span><br><span class="line">        context.processPayment(<span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>在这个示例中，<code>PaymentContext</code> 类负责选择和使用不同的支付策略，而客户端代码只需要与 <code>PaymentContext</code> 交互，而不需要关心具体的支付方式。</p><p><strong>行为型设计模式—观察者模式</strong></p><p>假设我们有一个天气预报系统，天气数据（如温度、湿度等）会定期更新，并且有多个显示设备（如手机、电脑、电视）需要实时显示这些数据。我们可以使用观察者模式来实现这个系统。</p><ol><li><p><strong>定义观察者接口</strong>：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">float</span> temperature, <span class="type">float</span> humidity, <span class="type">float</span> pressure)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">registerObserver</span><span class="params">(Observer o)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">removeObserver</span><span class="params">(Observer o)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">notifyObservers</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>创建主题类</strong>：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeatherData</span> <span class="keyword">implements</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> pressure;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WeatherData</span><span class="params">()</span> &#123;</span><br><span class="line">        observers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerObserver</span><span class="params">(Observer o)</span> &#123;</span><br><span class="line">        observers.add(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeObserver</span><span class="params">(Observer o)</span> &#123;</span><br><span class="line">        observers.remove(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyObservers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer : observers) &#123;</span><br><span class="line">            observer.update(temperature, humidity, pressure);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">measurementsChanged</span><span class="params">()</span> &#123;</span><br><span class="line">        notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMeasurements</span><span class="params">(<span class="type">float</span> temperature, <span class="type">float</span> humidity, <span class="type">float</span> pressure)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.temperature = temperature;</span><br><span class="line">        <span class="built_in">this</span>.humidity = humidity;</span><br><span class="line">        <span class="built_in">this</span>.pressure = pressure;</span><br><span class="line">        measurementsChanged();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>实现具体观察者类</strong>：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CurrentConditionsDisplay</span> <span class="keyword">implements</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> humidity;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">float</span> temperature, <span class="type">float</span> humidity, <span class="type">float</span> pressure)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.temperature = temperature;</span><br><span class="line">        <span class="built_in">this</span>.humidity = humidity;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Current conditions: &quot;</span> + temperature</span><br><span class="line">                           + <span class="string">&quot;F degrees and &quot;</span> + humidity + <span class="string">&quot;% humidity&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>客户端使用主题和观察者</strong>：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">WeatherData</span> <span class="variable">weatherData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WeatherData</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">CurrentConditionsDisplay</span> <span class="variable">currentDisplay</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CurrentConditionsDisplay</span>();</span><br><span class="line">        weatherData.registerObserver(currentDisplay);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟天气数据变化</span></span><br><span class="line">        weatherData.setMeasurements(<span class="number">80</span>, <span class="number">65</span>, <span class="number">30.4f</span>);</span><br><span class="line">        weatherData.setMeasurements(<span class="number">82</span>, <span class="number">70</span>, <span class="number">29.2f</span>);</span><br><span class="line">        weatherData.setMeasurements(<span class="number">78</span>, <span class="number">90</span>, <span class="number">29.2f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="面试题">面试题</h2><h2 id="什么是设计模式？有什么好处？"><strong>什么是设计模式？有什么好处？</strong></h2><p>设计模式是一些原则，这些原则<strong>可以帮助我们大大提升代码的可重用性、可维护性和可扩展性等。</strong></p><p>设计模式其实也是一种**通用语言。**他使得团队成员之间交流更加的顺畅。当我们提到单例、模板、策略、责任链，大家都知道是怎么回事儿。</p><h2 id="设计模式的7大基本原则有哪些？"><strong>设计模式的7大基本原则有哪些？</strong></h2><p>单一职责原则、开放封闭（开闭）原则（不修改现有代码的情况下，通过扩展（如继承或实现接口）来实现新的功能）、<a href="https://baike.baidu.com/item/%E9%87%8C%E6%B0%8F%E4%BB%A3%E6%8D%A2%E5%8E%9F%E5%88%99/3104388"><strong>里氏代换</strong></a>原则（子类应该可以替换其父类，并且能够正常使用，而不会导致程序错误）、依赖倒置原则 （高层实例不应该依赖于低层实例，二者都应该依赖于抽象。）和 接口隔离原则（应该使用多个专门的接口，而不是一个通用的接口。）<strong>迪米特法则（Law of Demeter，LoD）</strong>：一个对象应该对其他对象有最少的了解。<strong>聚合复用原则（Composition/Aggregation Reuse Principle，CARP）</strong>：优先使用聚合，而不是继承来实现代码复用。</p><h2 id="使用哪种设计模式可以提高代码可维护性？"><strong>使用哪种设计模式可以提高代码可维护性？</strong></h2><p>有很多设计模式可以提高代码可维护性，以下列举几种常见的：</p><ol><li><strong>MVC模式（Model-View-Controller）</strong>：将应用程序分为三个部分，分别是模型（Model）、视图（View）和控制器（Controller），它们之间通过定义清晰的接口进行交互。这种模式可以将业务逻辑与用户界面分离，使得应用程序更容易维护和修改。</li><li><strong>观察者模式（Observer）</strong>：将对象之间的一对多的依赖关系封装起来，当一个对象发生改变时，它的所有依赖者都会得到通知并自动更新。这种模式可以减少对象之间的耦合度，使得系统更加灵活和易于维护。</li><li><strong>装饰器模式（Decorator）</strong>：动态地给一个对象添加一些额外的职责，而不需要修改这个对象的代码。这种模式可以使得对象的功能扩展变得更加灵活和可控。</li><li><strong>工厂模式（Factory）</strong>：将对象的创建和使用分离，通过一个工厂类来负责创建对象。这种模式可以使得系统更加灵活和易于维护，也方便对对象的管理和测试。</li><li><strong>单例模式（Singleton）</strong>：确保一个类只有一个实例，并提供一个全局访问点。这种模式可以保证对象的唯一性，并方便对象的管理和控制。</li></ol><h2 id="使用哪种设计模式可以提高代码的复用性"><strong>使用哪种设计模式可以提高代码的复用性</strong></h2><ol><li><strong>工厂模式（Factory）</strong>：通过一个工厂类来负责创建对象，将对象的创建和使用分离，可以避免在代码中重复写对象创建的代码。</li><li><strong>模板方法模式（Template Method）</strong>：通过模板方法，将一些通用的逻辑抽象出来放到父类中，各个子类继承父类并复用这些公共的方法。</li><li><strong>装饰器模式（Decorator）</strong>：动态地给一个对象添加一些额外的职责，可以避免在代码中重复编写相似的功能。</li><li><strong>享元模式（Flyweight）</strong>：将一个对象的状态分成内部状态和外部状态，多个具有相同内部状态的对象可以共享外部状态，可以避免在代码中重复创建具有相同内部状态的对象。</li><li><strong>适配器模式（Adapter）</strong>：将一个类的接口转换成客户端希望的另一个接口，可以使得原本不兼容的类可以协同工作。</li><li><strong>单例模式（Singleton）</strong>：确保一个类只有一个实例，并提供一个全局访问点。这种模式可以保证对象的唯一性，并方便对象的管理和控制以及复用。</li></ol><h2 id="你在工作中是如何使用设计模式的？"><strong>你在工作中是如何使用设计模式的？</strong></h2><p><strong>工作中常用的设计模式有很多，如单例、工厂、策略、模板等。一般在工作中，是可以把策略、工厂和模板一起结合着来使用的。</strong></p><p><strong>比如我在开发支付模块的时候，有微信支付和支付宝支付两种渠道，所以，把支付的公共内容比如校验支付订单的合法性等抽象出来放在模板方法中，再把这两种渠道继承模板定义为两个策略，最后就是什么时候选择什么样的策略了，这个就是用工厂模式来管理的了。工厂模式中，使用ConcurrentHashMap存放对应的策略，在程序需要用的时候，直接返回使用就可以了。</strong></p><h2 id="请简述MVC模式的思想"><strong>请简述MVC模式的思想</strong></h2><p><strong>MVC模式的核心思想是将应用程序的表示和处理分离开</strong>来，从而使得应用程序更加灵活、易于维护和扩展。这种模式<strong>可以提高代码的可读性和可维护性</strong>，同时<strong>也可以促进代码的复用和分工</strong>，使得多人协作开发变得更加容易。</p><h2 id="单例模式的多种写法"><strong>单例模式的多种写法</strong></h2><p><strong>双重校验锁</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;  </span><br><span class="line">    private volatile static Singleton singleton;  </span><br><span class="line">    private Singleton ()&#123;&#125;  </span><br><span class="line">    public static Singleton getSingleton() &#123;  </span><br><span class="line">    if (singleton == null) &#123;  </span><br><span class="line">        synchronized (Singleton.class) &#123;  </span><br><span class="line">        if (singleton == null) &#123;  </span><br><span class="line">            singleton = new Singleton(); // 1、分配内存 2、初始化对象 3、返回对象地址</span><br><span class="line">        &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    return singleton;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="如何破坏单例模式？"><strong>如何破坏单例模式？</strong></h2><p>单例模式主要是通过把一个类的构造方法私有化，来避免重复创建多个对象的。那么，想要破坏单例，只要想办法能够执行到这个私有的构造方法就行了。</p><p>一般来说做法有使用反射及使用反序列化都可以破坏单例。</p><h2 id="为什么说枚举是实现单例最好的方式？"><strong>为什么说枚举是实现单例最好的方式？</strong></h2><p>究其原因，主要有以下三个好处：<br>1、枚举实现的单例写法简单<br>2、枚举实现的单例天然是线程安全的，final static修饰的<br>3、枚举实现的单例可避免被反序列化破坏</p><p><strong>反序列化过程中会通过Java 的 Unsafe 机制来创建对象的，枚举的反序列化并不是通过Unsafe，也不是通过反射实现的。</strong></p><p>Unsafe类提供了硬件级别的原子操作，主要提供了以下功能：<br>1、通过Unsafe类可以分配内存，可以释放内存；需要手动释放<br>2、可以定位对象某字段的内存位置，也可以修改对象的字段值，即使它是私有的；<br>3、将线程进行挂起与恢复<br>4、CAS操作</p><h2 id="三种工厂模式的区别和特点"><strong>三种工厂模式的区别和特点</strong></h2><p><strong>简单工厂 ：一个工厂创建所有具体产品。对于增加新的产品，主要是新增产品，就要修改工厂类</strong>。符合单一职责原则。不符合开放-封闭原则</p><p><strong>工厂方法 ：一个工厂方法只创建一个具体产品。支持增加任意产品，新增产品时不需要更改已有的工厂，需要增加该产品对应的工厂</strong>。符合单一职责原则、符合开放-封闭原则。但是引入了<strong>复杂性</strong></p><p><strong>抽象工厂</strong> ：<strong>一个工厂方法只创建一类具体产品</strong>。**增加新产品时，需要修改工厂，增加产品族时，需要增加工厂,是简单工厂和工厂方法的折中。**符合单一职责原则，部分符合开放-封闭原则，降低了复杂性</p><h2 id="什么是不可变模式，有哪些应用？"><strong>什么是不可变模式，有哪些应用？</strong></h2><p>不可变模式可以解决并发问题，对于共享变量，读读是没有线程安全的，当写写或者读写发生时，就会存在线程安全问题，<strong>处理并发问题最简单的方法就是让共享变量只有读操作，没有写操作，这就是不可变模式。</strong></p><h2 id="什么是享元模式，有哪些具体应用？"><strong>什么是享元模式，有哪些具体应用？</strong></h2><p><strong>享元模式是一种通过尽可能多地共享数据来最小化内存使用和对象数量，从而提高性能的设计模式</strong>。</p><p>在享元模式中，如果需要相同数据的多个对象，则共享这些对象而不是创建新的对象，从而提高系统的效率。</p><p>字符串池：在Java中，String对象使用了享元模式，通过字符串池的方式共享相同的字符串对象，避免了重复创建。</p><p>其实，很多池化技术，如数据库连接池、线程池等，背后都是采用了享元模式来共享对象的。</p><h2 id="String的设计，用到了哪些设计模式？"><strong>String的设计，用到了哪些设计模式？</strong></h2><p>String的设计，用到了不可变模式和享元模式。</p><p>在Java中，String对象使用了<strong>享元模式</strong>，即在内存中共享相同的字符串常量。当创建一个新的字符串对象时，会先在字符串池中查找是否已经存在相同的字符串常量，如果存在，则直接返回该常量的引用；如果不存在，则创建一个新的字符串常量，并将其加入到字符串池中，以便以后的重复使用。</p><p>这种共享字符串常量的机制可以大大减少内存的使用，因为同一个字符串常量在内存中只会存在一份拷贝，而不同的字符串对象可以共享同一个字符串常量，避免重复创建相同的字符串对象。</p><p>String对象还使用了<strong>不可变模式</strong>，即一旦创建了一个字符串对象，就不能再修改其内容。这是通过将String类中的字符数组定义为private final的方式实现的，即该字符数组一旦被初始化，就不能再修改其内容，保证了字符串对象的不可变性。</p><p>这种不可变模式带来了一些好处，如线程安全、安全性、可靠性等。因为不可变的对象在多线程环境下是线程安全的，可以被多个线程共享，不需要进行额外的同步操作。同时，不可变的对象在安全性和可靠性方面也有优势，因为一旦对象创建完成，就不会再被修改，避免了意外修改导致的问题。</p><h2 id="策略模式和if-else相比有什么好处？"><strong>策略模式和if-else相比有什么好处？</strong></h2><p>类似于switch-case：</p><ol><li>易于扩展：使用策略模式，可以方便地增加、删除或更换算法，而不需要修改原有的代码，只需要添加新的策略类即可。</li><li>更好的可读性：策略模式可以将复杂的条件语句分散到不同的策略类中，使得代码更加清晰、易于理解和维护。</li><li>避免大量的条件判断：在if-else语句中，可能需要写很多的条件判断，当条件越来越多时，代码变得复杂、难以维护。而使用策略模式，可以将条件判断分散到不同的策略类中，每个策略类只需要关注自己的逻辑，使得代码更加简洁。</li><li>提高代码复用性：策略模式可以将一些常用的算法封装在策略类中，可以被多个客户端共享使用，从而提高代码的复用性。</li></ol><p>般在实际应用中，策略模式会结合工厂模式、模板方法模式一起使用。</p><h2 id="什么是观察者模式，有哪些应用？"><strong>什么是观察者模式，有哪些应用？</strong></h2><p>它定义了对象之间的一对多依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都会得到通知并自动更新。</p><p>以下是观察者模式常见的应用场景：</p><ol><li>发布-订阅系统：观察者模式是发布-订阅模式的核心。当发布者发布新消息或事件时，所有订阅者都会收到通知并执行相应的操作。</li></ol><p>2 事件处理机制：<strong>观察者模式用于处理事件驱动的编程。</strong></p><h2 id="什么是代理模式，有哪些应用？"><strong>什么是代理模式，有哪些应用？</strong></h2><p>代理模式的主要目的是通过引入代理对象，为原始对象提供一层间接访问的方式，以实现对原始对象的控制、保护或增强。他的常用场景有以下几个：</p><p>动态代理：动态代理允许在运行时动态地创建代理对象，并动态地将方法调用分派到不同的处理器。它通过Java的反射机制实现，可以用于实现通用的代理逻辑，而无需为每个被代理的类单独创建代理。如Spring的AOP，就用到了动态代理。</p><h2 id="什么是模板方法模式，有哪些应用？"><strong>什么是模板方法模式，有哪些应用？</strong></h2><p>他的主要作用就是复用代码。在很多时候，我们的代码中可能会有一些公共的部分并且还有一些定制的部分，那么公共这部分就可以定义在一个父类中，然后将定制的部分实现在子类中。这样子类可以根据需要扩展或重写父类的方法，而不需要改变算法的结构。</p><p>我们通常会把模板方法模式和策略模式一起使用，因为当我们使用策略模式的时候，会把具体的策略实现在策略服务里面，但是还剩下一些通用的逻辑，就可以通过模板方法模式进行复用。</p>]]></content>
    
    
    <summary type="html">本文介绍面试中经常性问道的有关设计模式的面试题及解答。本文分为基础知识和面试题</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>tips</title>
    <link href="https://qzl.luoxiaohei.asia/posts/642c4108.html"/>
    <id>https://qzl.luoxiaohei.asia/posts/642c4108.html</id>
    <published>2024-09-23T19:43:10.000Z</published>
    <updated>2024-09-23T11:47:07.745Z</updated>
    
    <content type="html"><![CDATA[<h1>以后的职业规划</h1><p>有时候看的太远，也会迷失脚下的路<br>路是靠自己走出来的，所以不能只顾着未来，但是要清楚自己要到达的路！</p>]]></content>
    
    
    <summary type="html">工作</summary>
    
    
    
    
    <category term="随口说 - null" scheme="https://qzl.luoxiaohei.asia/tags/%E9%9A%8F%E5%8F%A3%E8%AF%B4-null/"/>
    
  </entry>
  
  <entry>
    <title>WIN11如何使用Outlook管理邮箱</title>
    <link href="https://qzl.luoxiaohei.asia/posts/352556f9.html"/>
    <id>https://qzl.luoxiaohei.asia/posts/352556f9.html</id>
    <published>2024-07-10T18:30:19.000Z</published>
    <updated>2024-09-23T11:28:37.473Z</updated>
    
    <content type="html"><![CDATA[<h1>WIN11如何使用Outlook管理邮箱</h1><blockquote><p>平时接收邮箱都是在网页端登录，这样不方便且没有提示。</p><p>之后我看到可以使用windows mail管理，但是也没有提示，所以我转向使用outlook了，先说优点：有提示音。</p><p>缺点：最小化托管功能局限。</p></blockquote><h2 id="1、添加账户">1、添加账户</h2><table><thead><tr><th><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230710093018665.png" alt="image-20230710093018665"></th></tr></thead></table><h2 id="2、输入账号并手动设置">2、输入账号并手动设置</h2><table><thead><tr><th><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230710093109447.png" alt=""></th></tr></thead></table><p>3、选择IMAP协议</p><table><thead><tr><th><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230710093316697.png" alt="image-20230710093316697"></th></tr></thead></table><p>4、输入密码，==注意是IMAP的密钥==，不是邮件的密码</p><table><thead><tr><th><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230710093356546.png" alt="image-20230710093356546"></th></tr></thead></table><p>5、获取密钥在你的邮件设置中可以找到</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;WIN11如何使用Outlook管理邮箱&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;平时接收邮箱都是在网页端登录，这样不方便且没有提示。&lt;/p&gt;
&lt;p&gt;之后我看到可以使用windows mail管理，但是也没有提示，所以我转向使用outlook了，先说优点：有提示音。&lt;/</summary>
      
    
    
    
    <category term="outlook" scheme="https://qzl.luoxiaohei.asia/categories/outlook/"/>
    
    
    <category term="outlook" scheme="https://qzl.luoxiaohei.asia/tags/outlook/"/>
    
  </entry>
  
  <entry>
    <title>6级备考</title>
    <link href="https://qzl.luoxiaohei.asia/posts/4669a788.html"/>
    <id>https://qzl.luoxiaohei.asia/posts/4669a788.html</id>
    <published>2023-08-24T20:52:55.000Z</published>
    <updated>2023-08-24T03:50:13.411Z</updated>
    
    <content type="html"><![CDATA[<h1>终于有人能把6级讲清楚了！！！</h1><h2 id="Part1-六级扫盲">Part1 六级扫盲</h2><p><strong>（已经知道的小伙伴，以及需要资料的小伙伴，可以直接跳到最后）</strong></p><p><img src="https://pic1.zhimg.com/v2-3749ec95d5dd1181a152249e0cbf5aa8_r.jpg" alt="img"></p><p>敲黑板！！！</p><p>敲黑板！！！</p><p>看出重点了吗？？知道要把主要精力花到哪个题目上去吗?</p><p>为了更加直观一点，我们来看看一个题型的性价比公式：</p><p>性价比=题目分值S/做题时间T</p><p>所以，</p><blockquote><p>写作性价比=710<em>15%/30=3.55<br><strong>听力性价比=710*35%/30=8.28</strong><br><strong>阅读性价比=710*35%/40=6.21</strong><br>翻译性价比=710</em>15%/30=3.55</p></blockquote><p>看到了吗！！听力的重要性暴打所有题型！！</p><p>平时练得最少的<a href="https://www.zhihu.com/search?q=%E5%90%AC%E5%8A%9B&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2247039778%7D">听力</a>，反而是6级里性价比最高的题型！！</p><p>有的小伙伴觉得自己翻译太烂了，作文也写不好，然后花了大量时间去练习，反而一想起来听力就觉得麻烦，根本就不想练，直接战术放弃了。</p><h2 id="Part2-四六级难度对比">Part2 四六级难度对比</h2><p><strong>2.1 词汇量</strong></p><p>六级词汇多出来的1500个单词，可能都是你没见过的~</p><p>好多基础还不错的同学，过四级只靠吃高中的老本就够了，单词没怎么背也能顺利飘过。</p><p>但备战六级如果还是不背单词，只能说重在参与了~~</p><p>多出来的那1500多个单词，没见过就是没见过，不认识就是不认识。</p><p>不过，背6级单词肯定也有优先级，依然优先背诵绝对高频的单词。</p><p>整理好的【<strong>6级高频单词表】</strong>，以及背单词的具体方法，都在文章的Part3。</p><p><strong>2.2 听力难度骤增</strong></p><p>所有题型中，6级听力的难度提升是最大的。</p><ul><li>语速明显变快</li><li>文章不再那么直白，经常绕弯，至少需要听懂一部分文章内容才能做题</li><li>四级听力中“视听一致”的做题原则不再适用</li></ul><p>如果四级考查的是技巧，那么六级就已经涉及到内功了。</p><p>不过，六级听力中技巧同样很重要，内功和技巧结合才能出高分。</p><p><strong>2.3 阅读难度提升不大</strong></p><ul><li>SectionA 选词填空，主要提升了词汇难度，但策略和四级一致，具体见下文Part5。</li><li>SectionB 段落匹配，改变的地方，同义替换现象依然是绝对考点，但六级中需要理解段落大概意思，需要的词汇量变大。</li><li>SectionC 仔细阅读，题型没变化，并且虽然多了一些高级词汇，但几乎不影响做题，因为SectionC的做题依然遵循KLA原则，具体见下文Part5。</li></ul><p><strong>2.4 作文&amp;翻译</strong></p><p>作文和翻译依然是性价比最低的题型，四六级差别不大，因为短期提分都很难。</p><p>想平稳通过，依然技巧为王。</p><h2 id="Part3-词汇">Part3 词汇</h2><p>好多老铁，四级过了之后，六级怎么考都过不去了，词汇就是硬伤。</p><p>上面也讲啦，六级词汇比四级提升的难度不是一点半点，多出来的那1500多个单词，没见过就是没见过，不认识就是不认识。</p><p>如果你的时间紧张，**一定扔掉6000多个单词的单词书，先背高频词，**这是见效最快最快的。</p><p>如果你时间充足，那就选一个自己喜欢的单词APP，把六级单词刷完。</p><p>这里，我主要讲一下高频词，不管你时间是否充足，高频词都一定要记牢。</p><h2 id="Part4-听力">Part4 听力</h2><p>六级过不了，如果是300分左右，那估计是阅读太差了，但如果卡在了400分，极大概率是被听力卡了脖子。</p><p>4级听力中的很多题目，就是直愣愣的选，是直线思维，一步找到正确答案，而6级听力中，这种送分题的密度大大降低，出现了更多需要听懂，甚至分析的题目。</p><p>尤其是听力的最后一部分，讲座，每道题14.2分，原文的意思一点听不懂的话会很难选。</p><p>但是，并不是说六级听力全靠实力，没有技巧可言了。</p><p>下面的文字，4.1是技巧，4.2是内功，技巧必须会，至于内功要不要修炼，看你时间。</p><p><strong>4.1 听力技巧</strong></p><p>①顺序原则：这一点和4级相同，题目答案顺序与听力原文顺序一致。</p><p>②**开头原则不再适用：**不同于4级，6级听力的前几句可能会包括答案，所以前几句也不能错过。</p><p>③播音讲废话的时候，一定快速浏览选项，画出关键词，比如时间、地点、名字、特定名称、数字数据。</p><p>④敲黑板！！注意啦！！</p><p>如果你仔细对照过听力原文和选项，就会发现<strong>很多题都在考察同义替换现象，这种同义替换主要包括3种：</strong></p><ul><li>名词的同义替换，即名词1→名词2</li></ul><blockquote><p>如tuition（学费）→ educational expenses</p></blockquote><ul><li>动词的同义替换，即动词1→动词2</li></ul><blockquote><p>如improve（提升）→ enhance</p></blockquote><ul><li>名词和动词的相互转换，名词1→动词1；动词2→名词2</li></ul><blockquote><p>如unemployment（失业）→lay off；rebound（复苏）→recovery</p></blockquote><p>至于形容词副词就不用纠结了，这没办法设置考点，设置了也是送分题，比如一个句子的所有信息不变，把“beautiful”换成“attractive”……</p><p>知道了同义替换的重要性，哪怕你整句话都没听懂，就听到某个词，然后在选项里还出现了这个词的同义替换，不要犹豫，选它！</p><p><strong>我总结了一堆听力题型中，常见的同义替换</strong>，把这些替换过几遍，脑子里留下印象，做题的时候会很快的反应出来。</p><p><img src="https://pic3.zhimg.com/80/v2-1c23fe723b0567b1e5a2d68fbc679256_720w.webp" alt="img"></p><p>⑤but、however转折之后的句子绝对是考点，最高级（-est）和序数词（first、second、third等）也常设考点。</p><p>⑥如果两个选项有相近/相反的答案，正确答案必在这两项之中。</p><p><strong>4.2 听力内功</strong></p><p>4级听力只靠技巧也能过关，但6级听力真的需要点真东西了~</p><p>在我准备四六级、雅思（听力7.5/9）以及全国大学生英语竞赛（一等奖）的过程中，夯实听力用的都是这个方法：</p><p>泛听→精听→复听。</p><p>而且你会发现，知乎上绝大部分的四六级高赞回答，关于听力的修炼方法都少不了精听。</p><p>【泛听→精听→复听】这3步的具体方法，我在之前的四级回答里写得非常全面，一定要去看！</p><p><strong>pps.救救孩子吧！不要只收藏好吧！点个赞，就当是给自己过6级行善啦！！ 点赞的都给我过！！！</strong></p><h2 id="Part5-阅读">Part5 阅读</h2><p>到了6级这里，有的小伙伴开始纠结语法问题了，自己要不要先去弄本语法书啃一啃？</p><ul><li>长期备考求高分的话，有必要修炼语法，对写作和翻译也都有帮助。</li><li>短期备考的话，如果语法实在太差，就找一本语法书，主要看看虚拟语气、各种时态、倒装，更复杂的就不用看了，所以一个下午应该差不多够了。至于其他时候，把语法书当工具书，随查随用，千万别一页一页的看。</li></ul><p>阅读部分的3种题型，有一个万年不变的铁律：</p><p>题目顺序是SectionA选词填空→ SectionB匹配题→SectionC阅读单选，但按照题目难度排序，却刚好反过来，SectionC部分的分值最高（20%），题目最简单，在试卷里却被放在了阅读的最后面。</p><p><strong>所以，不管是考场还是平时练习，都一定按照CBA的顺序去做题！</strong></p><h2 id="Part6-作文">Part6 作文</h2><p>虽然应试很没意思，但你考过4级肯定知道，作文考察的根本不是思辨能力，而是模仿能力，说白了就是套用/修改牛逼句子和作文模板的能力。</p><p>如果你有精神洁癖，不愿意写这种没营养的东西，愿意自己花两三个月每天写五六篇练习，但其实啊，最后写出来的东西还是烂得一批。</p><p>写作这件事，没有好的输入，就没有好的输出，这是永恒的定理。</p><p>一篇四六级作文，普遍是9~12句话就写完了，所以6级作文这里，我还是帮大家搜集了一大堆万能句子/模板（和之前4级的不同），这不只是技巧，其实也是内功。</p><p>有了这些弹药之后，具体的练习方法可以去看这个回答里的6.1和6.2，写得很详细。</p><p>总结起来就是两句话：</p><ol><li><strong>背句子，不要背文章</strong></li><li><strong>写结构，不用写全文</strong></li></ol><h2 id="Part7-翻译">Part7 翻译</h2><p>翻译题是四六级中性价比最低的题目，分值少+用时长+难度大。</p><p>虽然短时间的训练很难保证在翻译中拿到高分，但是通过下面的小技巧，拿个中上水平的分数还是没问题。</p><p>因为，翻译虽然难，但是给分标准很低：</p><p><img src="https://pic1.zhimg.com/80/v2-4e0b8f48cb3600a56cd671e5a44528ac_720w.webp" alt="img"></p><p>你看，哪怕有很多语言错误，其中一部分甚至是严重的错误，<strong>但只要“勉强表达”了原文意思，就是7~9分，这已经是拿了一大半的分数了~</strong></p><p>所以，你其实只要明白这几点就够啦：</p><p>①翻译是人工阅卷，阅卷老师根本不可能看你全文的，得多少分，重点是有没有写对踩分点的单词，以及语法错误多不多；</p><p>②一定要选择基础的单词和简单句式，越基础越好，不犯错就是得分；</p><p>③踩分，翻译是有关键踩分点的，通常这个题目主题下的相关词汇，比如<strong>历史，文化、经济、社会类等，这个需要单独记一下。</strong></p><blockquote><p>ps.我也按照不同的主题，分类整理了翻译常考的词汇表，<strong>获取方式在文章第2张图里~</strong>。</p></blockquote><p>④评分标准里说了，“勉强表达”了原文意思就ok，所以碰见不知道怎么表达的句子，想方设法把原文“意译”，而不是“直译”，总之千万不要空着~</p><h2 id="最后">最后</h2><p>大家可以私信我领取资料~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;终于有人能把6级讲清楚了！！！&lt;/h1&gt;
&lt;h2 id=&quot;Part1-六级扫盲&quot;&gt;Part1 六级扫盲&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;（已经知道的小伙伴，以及需要资料的小伙伴，可以直接跳到最后）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic</summary>
      
    
    
    
    <category term="英语" scheme="https://qzl.luoxiaohei.asia/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
    <category term="英语" scheme="https://qzl.luoxiaohei.asia/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>小红书账号创作计划</title>
    <link href="https://qzl.luoxiaohei.asia/posts/2cd64afe.html"/>
    <id>https://qzl.luoxiaohei.asia/posts/2cd64afe.html</id>
    <published>2023-08-24T03:47:07.357Z</published>
    <updated>2024-09-23T11:44:56.608Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试!" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a5027af5a67de5fe8e79fafd69aec90b853a47021b3509e0117c13cdd433a8fa">2f36f3754ac39f008e9ddc38ce41105c6498b6ea646e6887d87825363697bccd18fc8851c34fc6bb5340bb3d93ba274c98deacbdb87b24f8fd368c49503c1ca00db177bd3acd61b1112d5a36bf0e06c54bdff3e2706f8ae9a6b543c68df354010b44941e24f618c33978faeaa430e4aaf216a5ea95ecb5cb2dce89d2069d11dcfcb771fd72ba6e57d7e7b06fc66fe579e112f11a1cb20c9dde7b98513825bf54b4eae7d5ddc0c907e2e197c39de8bb5bdb685ff6af685af32eaf18faa4ddc7727e36f1710e86ef6ec004f9284347a165319f10049d7684634a99b9dfcc258b958d586af433737d6d63b71e667b5f75fc35eb8864eb2037755f442ed77b733653e878a89ec8eccdc0c68cf5184546bd21cd6409fb3790dd70206d203d43bd5dcf88d0b520efbbcbe9bd5fec7125610694ef9149c5551d8690caf04f4c02c283cd4802b495b3432ccf2e2c4b978ae4067814742372e8fa61751a5548998aedac13e5aa3417e1b79e1756b806d9a377cc7773abe9360df7fa3bc16e5d4a8e43a2b78d261213493a806c3f293f3b98e69620f6d32d5aa95528aec008ec1e66f88a58</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">比较隐私的东西，需要密码才能进入!</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">想看联系站长哟!</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>唠叨</title>
    <link href="https://qzl.luoxiaohei.asia/posts/317894.html"/>
    <id>https://qzl.luoxiaohei.asia/posts/317894.html</id>
    <published>2023-08-20T01:27:22.000Z</published>
    <updated>2024-09-23T08:40:16.058Z</updated>
    
    <content type="html"><![CDATA[<h1>和任何人的比较、都是在内耗自己、让自己迷失在找不到希望的迷宫里。</h1><p>今天我妈拿出了20w的存款给我看，告诉我家里有钱，当时我还是觉得有点少，因为我对家里的钱并没有很确切的概念，在我印象中，钱的多少对我影响没有很大，但是我知道，以后没有爸妈保护下，钱的多少是很重要的事情，所以我需要尽快养成对钱的敏感度，合理安排钱和钱生钱。</p><p>我妈拿出钱是因为害怕我担心家里没钱娶老婆，其实我不担心，只是对于婚姻来说，我认为不是儿戏，对我，对所有人都是一个冒险，我怕我不能承担这样的风险。我认为以后的生活是一步一步在精明的计划中实现的，我需要更加有洞穿未来的眼光。</p><p>我妈跟我说我哥花了多少钱我就有多少钱，我哥买房200多w，装修60w，彩礼、结婚这些加起来，在我哥身上花了300w。所以爸妈打算给我在省内买一个100多w的房子，中大城的房子给我。这样房子装修差不多，再给我买一辆车。这样就弄的差不多。</p><p>我知道，这些都是大人们的事情，不需要担心和怀疑，我最重要的还是管好自己的事情，让自己有潜力，有能力。所以，不要想太多，专心发展自己才是王道。</p><p>男人到了中年，要有的“城府”：<br>1、不和亲戚一起去旅游。</p><p>2、经常把手机扣在桌子上。</p><p>3、不往烟灰缸里面倒水。</p><p>4、聊天，一问一答式的对话，要懂得早点离开。</p><p>5、帮子女带孩子，3缺1，谁打电话也不去。</p><p>6、看到邻居脸色不好，不要问怎么了，打声招呼，就匆匆离开。</p><p>7、亲戚请帮忙办事，不要表现出很容易，反而要装作不好办。</p><p>8、理发不说剪短点。</p><p>9、生病了，或者身体不好，不串门。</p><p>10、别让子女和朋友一起去考驾照，就怕先拿到驾照。</p><p>11、经常对别人说谢谢，很重要。</p><p>12、别人请客，晚5分钟再去。</p><p>13、被别人夸赞的时候，适当的暴露自己的不足。</p><p>14、不和年轻人混在一起，那是找难受。</p><p>15、帮不上忙的事，不要问别人的事情进展。</p><p>16、远离少妇，远离离了婚的女人。</p><p>17、在医院，护士对你不客气，但你要对护士客气。</p><p>18、别拿扫把打人，哪怕是开玩笑的也不行。</p><p>19、组局，快要买单的时候不要去上厕所。</p><p>20、别人送自己的鞋子，哪怕九成新，最好也别要。</p><p>21、领导总是当众夸你，你一定要小心，捧杀才是最可怕的。</p><p>22、不和子女说自己这一辈子的恩怨，没必要延续下去。</p><p>23、父母年纪大了，烦心的事，不能和他们说。</p><p>24、两个人睡觉，真的没必要放三个枕头。</p><p>25、尽量不住在别人家里，没人愿意被打扰。</p><p>26、遇到搭顺风车的，一次是人情，连续第2次，就要远离。</p><p>27、朋友的离去，不问，不内耗，这是价值考量的结果。</p><p>28、在别人的车上，不乱说话，行车记录仪很可怕。</p><p>29、问了两次都没回答，对方已经给了答案。</p><p>30、凡事留一手，以备不时之需。</p><p>31、千人千面，对待不同的人，需要不同的态度。</p><p>32、只要有一个客人没放大筷子，主人就不能说吃好了。</p><p>33、少发朋友圈，总有一些人在研究你。</p><p>34、一定要会说客气话，虽然很虚，但是人人爱听。</p><p>35、别人发的红包或者转账，等几分钟再送。</p><p>36、朋友接电话的时候，要和他保持一定的距离，电话总会涉及到一些个人隐私。</p><p>37、别想着躺平，趁着有限的时间，赶紧多挣钱。</p><p>38、场面话一定要会说，酒桌上没有几句场面话，很难合群。</p><p>39、在外面要说谎，在家里也要说谎，善意的谎言，家庭才能够更和谐。</p><p>40、老家的房子不要丢，哪怕你很有钱。</p><p>41、控制好自己的情绪，这样才能不被别人利用。</p><p>42、不舒服的事情，就要拒绝，别做老好人。</p><p>43、赚钱的事情，要懂得闷声发大财。</p><p>44、人到中年，心里一定要能装事，别口无遮拦。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;和任何人的比较、都是在内耗自己、让自己迷失在找不到希望的迷宫里。&lt;/h1&gt;
&lt;p&gt;今天我妈拿出了20w的存款给我看，告诉我家里有钱，当时我还是觉得有点少，因为我对家里的钱并没有很确切的概念，在我印象中，钱的多少对我影响没有很大，但是我知道，以后没有爸妈保护下，钱的多少是很</summary>
      
    
    
    
    
    <category term="随口说" scheme="https://qzl.luoxiaohei.asia/tags/%E9%9A%8F%E5%8F%A3%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>JAVA面经</title>
    <link href="https://qzl.luoxiaohei.asia/posts/2cd64afe.html"/>
    <id>https://qzl.luoxiaohei.asia/posts/2cd64afe.html</id>
    <published>2023-08-08T07:40:36.450Z</published>
    <updated>2023-08-24T04:20:12.401Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试!" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d806d52a54acd5c3a0a00c1f3c732a17eb45c593b60afb8fbea1ff49d500991b"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">比较隐私的东西，需要密码才能进入!</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">想看联系站长哟!</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>软考-软件设计师中级备考计划</title>
    <link href="https://qzl.luoxiaohei.asia/posts/e3c70671.html"/>
    <id>https://qzl.luoxiaohei.asia/posts/e3c70671.html</id>
    <published>2023-08-03T12:58:55.752Z</published>
    <updated>2023-08-30T13:55:43.965Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试!" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ee5bdfc3007eea827c08790d2837f2d2ab75b0cb014cee1dd00242df75db33f5">2f36f3754ac39f008e9ddc38ce41105ca0b755c1e9017c9117753aafb52201699bd6d81a383523e9896df2d66e00107c5efaca6971a349224a158f93d2b54c703f191f1001d79bc2c07199af485c86bcd690aa22e41ceb533ba3b30f1302c3d366a53bf0141f0dd03b8ed76aff718394a15b3990eb38b9331e892c8bc0b990a875bf14bd0722fbe685d5da218caecccfb5ca3a093a03e6d39119b18a85c1d98d3aedc7997751f518485ac2d043975e8725c5171b0ec4bf50d90d66c948af8b6a285c9ab66f321b82fb944ccafbb842efabdf7cf929d2a26de783c4a423af327684df09b19cc4fb6d39cf78e1b541a4b58f0e7fc5fa9cfa7ba309362dc414f9df41078b19753b9d43024841265cb8bd2f3b8b6f4b1bba16419aa76c2f679254263e0e2d8c24c8b476c8bfecaf358124bca9c14f103107e2684c88e59f72a33573758d8ee5c4ecc0b5d21d9ce914c2730726153005bf16b8d159fe620b12b6e526d54ee852f12c4a97d7c2db4c6e2414381e10d89e4db547cfdf99bdd6f50915cf7653bf5974025134f01eeff9ced3cf71ec71d1793e597ee30ac866ae814462511f6ce7fbe0ccda9057b69f43e2bf32db1e7d205ff9b58f4c5f0de9f5914a5cd526fcb4645afa44447b41f986e7f225a26915bdec2424f978c0390cce37eba636220b5ee632e85dc4fd6e94a4107760b62b2a0cd824c68a1349bc072b73d754f0d4d5f8afcb4a4e3c42a6f729a37b99a29ade5a73e36f32666bddad1fd56512a4f51160edeac6bec1480c173ba702c86b321f7d61e0735258be7d4e3e684859b43a706c1b16ac79560c273dd3f9b27a98683fb22ef980b37240a1b38c993475ec53e5a6a51007c15b783c6589472c7bf56ed269199235241a1ff5c9189a09fc847cc991f37eb18b2f7b53d0a8b08ff2d4c16f4382ab64cb39ebbd94e9d2ae41e3e0f628f6ef712e9df981f74fc0fa153b42f170035fa027eafc453e787535f39e43d3ec1032c28a17082d7ceb9616bb5443d09837bfb9e9b535bb1713ef103bcfde4c641d7288859d375c0d9f9f110597d3eec52d1ce70eb832f254fd26da5f59973b7f5619ea89896cc05fe99aed850eb236fd8c6f56d7f36d5d2814b09608ae730840eadec455f05cdb00e2ae192074949835dbff2b52518e6393da83548aeb7d5776436d3d1fb8ea619dae780ee4a0f14a3a62cbd89ed8df68c193888a631e6e59fa5c4442e4572fc08fce5015dcfd36a22a20ecb297ec892c7c5afc0fd2b9946a2a716b5e4ba581fc7299c98908e7eb566f9656fae73f3498396e8b6051cd103c97958f1d40fd768e1e5c13d2048d2eb28fe95c8912004ee491c9c7d311ff50b1e88dd70f9c4bbe4c937d9d70fef86f0aefed0be71b1aa07f300af2a45f6092ef0a96985a280dce7b93de8cf8381ab058dc76724ddc18ffd9c45aea97d7234a80e8c3725ae349826a6841e55a30cefced35e45e98c60d9f91751171489c36b1d37c585727315afe568e0d368248f6f0eae63204dd5665434617b8c1c3d347aea4b601488813ec67011cc0e7ab10d2</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">比较隐私的东西，需要密码才能进入!</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">想看联系站长哟!</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>对未来的看法</title>
    <link href="https://qzl.luoxiaohei.asia/posts/8157703f.html"/>
    <id>https://qzl.luoxiaohei.asia/posts/8157703f.html</id>
    <published>2023-07-26T16:10:50.218Z</published>
    <updated>2023-09-04T14:59:05.487Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试!" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="5f96f04791342d456d7c6d66572568cdb81dc2b30c542ffba5e83662aaa2ee3c">2f36f3754ac39f008e9ddc38ce41105c26508b0086648f73a53e08254e361ba15f0f927b3a8da1432a0f5d44afdf8638bb21f0486ea12cff70ec14091d2a7f54c52a488dc92966b67a67b6c93c6cd761381afe602303fcbdb3d6dff23857eb9d6e011b4b76d5ab8e0cdeff795c4e308e800b3c836c312c5a239f9d288870cf3a4a223b7da55fd466699229943125de7189a2573156d39911b76cdb2bc677e0b44a0e127fc288159e4f9c6b49e684c017235d488f731608a0f5fb2337b54abadf894c1187b35d8690dba196c20d2e5e3d097182f79795ec35781a7d4cfcefc79ed310de2548e63cdb8b274067b70c49abb46151c1c2645630be3cd4da2d76444b674b3ef69eb8c5771d11895d14ec5d8c8234a8480ec5e317d482905dba0986cf23a8b629a97c4a2973fa8532bd797d874d3d7d9c92254c9be211d2b3015a48e97913298c1c2193925888802ab9135b0154a0f9ca03ef6fc206bf5914f56a016fb0e8e34991db36d301bd3edf62e21448d0bbeac82cccedde41542435310ea772c7b86d4a27da8001bbb8c7092cef79f8231ced6a41729e9ff446bb0d67964984c0484b37ba0debb9495d54eacc5323a5f24c26c53b635cac059896650f859afd</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">比较隐私的东西，需要密码才能进入!</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">想看联系站长哟!</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>男人娶老婆就是有人陪，女人嫁老公就是有人养</title>
    <link href="https://qzl.luoxiaohei.asia/posts/3b6f423b.html"/>
    <id>https://qzl.luoxiaohei.asia/posts/3b6f423b.html</id>
    <published>2023-07-24T02:51:53.509Z</published>
    <updated>2023-08-04T03:23:59.598Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试!" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="577dfeea2e9c0a31c96a628ae9cb112972e8562d9194a0e00b9b644f2c0bfdd7">2f36f3754ac39f008e9ddc38ce41105c26508b0086648f73a53e08254e361ba15f15cabae6252a58d9fe48fd5cf6cba8928c5d50a1cbe8036b1e8c66ab2e756c4e3dc7a4aab13fae488d49684398541d1abc55c42a943761e1d8548e6ed65698a7ed544ce94ab3b15f43e0de99429ddefc1f6c14429c9433cb8091283dcca0ad90f9ef2ac360199507945efbe80eb62988de705dcc6058f5356f65a80d97fa23922583d035c5497376bae8f804f5b21250cbd4e774cfffe70b32069cffa8b6fbdd3a6977269684338882a12a9661b267659f680f33fb3701a2383d66277f12a43e6b4fa574bdb7733a6cabb2a6b7ece6a2263eff79d66a0ee69fc1af2ebee9ea17de9726a4740caaa4007239990768c05a4800522fad2dbde548de02cf8fe48b9bee29ff36b1e4212334ae5392b802ea5bd90cb6df96384bb8beb668341f143f1107703e79c6e32a5387cefcdc0859d148fb4dc5ebcb00f71e083ac99c1cbba33c3c0e1e9be4afb97d61030a3aa804aec5aabd7b5b67ea432dfb8654b80cffe62e547d4fafe2ddb465c35478a11597051657e3d8f4d585055f9d9edf41f5d03ddea4505d00735dffd12d1e83f58256d20d98ff4555038bd7b3e3593317affc80cd7bebb73735ca43badcbe7d260130ad5ba02c8e4594c44666bea8d06432630c62b579c4615bc4d793dc801cb3a3244113e804a3bfafb8a28264757c3ecd110deb38f555be303eb611ae3e0909235177bee94905c872ef093f5b8476b36507d4be80742351ee23bc758f54042303b0da1be7ba318442445c6eb3286f60ceaedeb9df7d33ab27ba93c5f2b0274205e5212da725debc87e52cebc2468f73261dee2c0f492c33cb56e0fa2ad048dc69ac38bcf76ed9ad5e3108ae4276a6770b85ba</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">比较隐私的东西，需要密码才能进入!</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">想看联系站长哟!</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>风雨里像个大人，阳光下像个孩子</title>
    <link href="https://qzl.luoxiaohei.asia/posts/495faf5a.html"/>
    <id>https://qzl.luoxiaohei.asia/posts/495faf5a.html</id>
    <published>2023-07-22T16:04:12.838Z</published>
    <updated>2023-07-22T16:05:09.402Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试!" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="471d2b822bee17970cbd496c0373341e4b076cf42c468e64ff43950361ae9076">2f36f3754ac39f008e9ddc38ce41105c96841aea760758a86a203a650af567a71e143303ad3ce4771cc2c12c1b3361bd363d9bd984f1a0d8278c10618f4eaca5a6d281034768d15fcdbdfdc63929da4932de09f602e0297ad59692b97b54f0c33df11db863f87def2a1dfb996a6e0055b95695d5961727be82d09797204b32cdbf34868fec4db1a7ca2764b0c773e3d7b3d2a33931aec3e5c0ec45b7230cf3837d45be9f3c290736ca9823958058e1a008b87103f417d60c96945f4fb858553d691d6d28d58025e4f05ab24d839de48f476f902456bc549424dedb61d042c374da1f64b09d33caef560a77d83d89684c37975d78c60a86810632b8d56415e5d06be2862e2cd1ce9d99b46e7e4587bc5f84b12ae3e5ff79cd8528d782ea759fb899a19e23b425865582f0dc6798052c1790ca2033f253f1cb56a8edb8e1cc423ddab53701a3a0e0348a347e2a7374a26b6ee665f846a4f4001d47b8900e612998131eb56546c8662ef42a3dba98d73f781a1eaa69941834e9167389f622351a755c7f1d26623ddbe6aedb707075046fd8ffa55f91725ba488651ee110e1dc3b67cf3d692268944c5e1b79add54ad466bf1b6d696cec1e841e5907be13c8dcce9eea318217f6fc0ee17643b522d8c0962d898d2f54bf8fb2193a494683e57fcbe155b03122f7693af6db22a7f48f44f28b0140831b3a3108a8a5d718b32c668d6160f1925372c1f314877b0a279de3dc9ef6448a1229e7ae84a054c9c044c9adc018b2be7e58c8a909d733bf802ce4d7502b5d8f0e19d84e7a8c41a98ed700c1396157dbc1e234b0d96b6c4b4707f00b4003c04425c433a626e3e4dd1d457cb964c99887fb9f631a8255deb30a8b57ce38b517d7e0daf4108f214ac16a14d38267b46333e669cc58bab8f1445532642ef4c2ebdfe12e6be357389c98c295f375db257818498a08b3ea7d3d4d7b3637b49bfb8f902f972acb4938241a4df010a693f9ba840f7469781c91127cfdea3e717582ad6df478f5fc953b1ddec10713e2423223745acc68da441a8db27c01ae5ea6</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">比较隐私的东西，需要密码才能进入!</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">想看联系站长哟!</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>生活是属于每个人自己的感受，不属于任何别人的看法。</title>
    <link href="https://qzl.luoxiaohei.asia/posts/2898578e.html"/>
    <id>https://qzl.luoxiaohei.asia/posts/2898578e.html</id>
    <published>2023-07-20T15:38:38.864Z</published>
    <updated>2023-08-04T03:41:25.862Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试!" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ac299ce4cb20cce3cb1375afea96095a89e0013e2d812ae08be996bdb7179008">2f36f3754ac39f008e9ddc38ce41105cf8aef13d9f5d088e91de737227c1750a0e19d1c3b1e438d6d39785c88160cc1fdf47a9337ed986c40464fe1d3b9642289903e94c9f7237e4b2b95ba62d469b0b8b3f47f72eb2551fbde1c38b0d7f15e4ec07998e0c7a6e7a47260d0588550fb1f9a6e082c9037328540fa5bef1980c1bc2bbd198cc1f3904046118d40468ca992770096e5c4dfed91b27040d84fd7cdc376a75be6ad73cd2a171baf641900d66f7d443cabd874c00ff8e8e298636ee1b8f19e203be1f9217161c1883d68bf7c0fe9db5064058faa26c1ea0c4cc92410a630ca507aedf90f889a3b62df42975ff43942301c22dcbde6c0c5f7e8ce50a238c4ddfe2d4a2a7442e74fcca006b4efff8df19d216603b74cc7035b2d23f11de894a40d7ed0c35ad72e993dc8e40442571ee9635df16e45918189a08d62a4f1dcd5de948287ee01ac0247288ac3efee0d09d66f8a8f07282b2e42408cecc80150cf3fc1084b49187d08cb66384564b176881ddc7a13b576fa80a2a6e884dca8b0ce62d5a38b26887e865a5f68d4ac09f63bb6beb9bb90c0f32021a53ffc806c04bc51b5232b2ca87bc0d5415c85d56e59e281e1ecb090d4a199bfb2fd089eafd587b5bdc2aba826d15032a816b76bcb788962ae033680d54383aff1f8f5eba33592ce46c67d99e6e03e2cec57b88b5dc566e754f4f2a2dbd79b18e6df68be427743c730ec91279f949594d14999321068ee9c271abf5cc615325374d1f86d1207781cbbfabe9e6311915511ce34f60af44030991d9ede489be32a5e1a3999dcbbcbf9c8609e71a1d1f7190a8961abd4b8c86bbaba8a38eddecb0d5091db84071f6f4761ffff6ac23be0e3b0fe4303861ea0be6c1fab94919563027979933cc2920e240b247949fccc995b0104b26719f</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">比较隐私的东西，需要密码才能进入!</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">想看联系站长哟!</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>GIT教程笔记</title>
    <link href="https://qzl.luoxiaohei.asia/posts/efed5855.html"/>
    <id>https://qzl.luoxiaohei.asia/posts/efed5855.html</id>
    <published>2023-07-19T16:40:50.000Z</published>
    <updated>2023-07-22T15:17:18.316Z</updated>
    
    <content type="html"><![CDATA[<h1>GIT教程笔记</h1><hr><p><a href="https://www.bilibili.com/video/BV13a411q753?p=112&amp;vd_source=1aea9871e1065286efe559677df1eedf">配套视频教程</a>，教程偏向于日常常用的场景。</p><hr><h2 id="工作区、暂存区、版本库-概念">工作区、暂存区、版本库 概念</h2><img src="C:\Users\luo\AppData\Roaming\Typora\typora-user-images\image-20230718170924337.png" alt="image-20230718170924337" style="zoom:150%;" /><h2 id="获取GIT状态">获取GIT状态</h2><p><strong>git status</strong></p><p>工作区的两种状态：</p><p><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718171535039.png" alt="image-20230718171535039"></p><table><thead><tr><th style="text-align:center">tracked状态</th><th style="text-align:center">Untracked状态</th></tr></thead><tbody><tr><td style="text-align:center"><strong>stage状态</strong></td><td style="text-align:center"><strong>Untracked状态</strong></td></tr><tr><td style="text-align:center"><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718171425153.png" alt=""></td><td style="text-align:center"><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718171313380.png" alt="image-20230718171313380"></td></tr><tr><td style="text-align:center"><strong>红色modified状态</strong>：修改文件后未放入暂存区</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718172657501.png" alt="image-20230718172657501"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">**绿色modified状态：**修改文件后放入暂存区</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718172748719.png" alt="image-20230718172748719"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">如果你问Unmodified状态呢？那我只能告诉你，默认是Unmoified状态</td><td style="text-align:center"></td></tr></tbody></table><h2 id="本地仓库操作">本地仓库操作</h2><p><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718171730669.png" alt="image-20230718171730669"></p><p><strong>git reset</strong></p><table><thead><tr><th style="text-align:center">取消暂存</th><th style="text-align:center">切换到指定版本</th></tr></thead><tbody><tr><td style="text-align:center"><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718171941530.png" alt="image-20230718171941530"></td><td style="text-align:center"><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718172036450.png" alt=""></td></tr></tbody></table><p><strong>git commit</strong></p><p><strong>git log</strong></p><h2 id="远程仓库常用命令">远程仓库常用命令</h2><table><thead><tr><th><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718173902423.png" alt="image-20230718173902423"></th></tr></thead></table><p><strong>git remote</strong></p><table><thead><tr><th style="text-align:center">查看远程仓库</th><th style="text-align:center">设置远程仓库</th></tr></thead><tbody><tr><td style="text-align:center"><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718173943391.png" alt="image-20230718173943391"></td><td style="text-align:center"><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718174008055.png" alt=""></td></tr></tbody></table><p><strong>git pull</strong></p><blockquote><p>使用场景：多人合作</p></blockquote><table><thead><tr><th><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718174548392.png" alt="image-20230718174548392"></th><th></th></tr></thead><tbody><tr><td><img src="C:\Users\luo\AppData\Roaming\Typora\typora-user-images\image-20230718174556954.png" alt="image-20230718174556954" style="zoom:150%;" /></td><td><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718175331713.png" alt="image-20230718175331713"></td></tr><tr><td><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718175125263.png" alt="image-20230718175125263"></td><td><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718175425107.png" alt="image-20230718175425107"></td></tr></tbody></table><h2 id="分支操作">分支操作</h2><table><thead><tr><th><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718175506381.png" alt="image-20230718175506381"></th></tr></thead></table><p><strong>git branch</strong></p><table><thead><tr><th><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718224836158.png" alt="image-20230718224836158"></th></tr></thead></table><p><strong>git merge</strong> <strong>[name]</strong></p><p>将其他分支合并到==当前分支==</p><h3 id="合并时冲突解决">合并时冲突解决</h3><p>当两个文件不相同时，合并版本出现的问题：冲突</p><table><thead><tr><th><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718225640471.png" alt="image-20230718225640471"></th></tr></thead></table><p>以下是解决Git合并冲突的基本步骤：</p><ol><li><p><strong>定位冲突</strong>：Git会将冲突的部分标记出来，你可以通过运行 <code>git status</code> 来查看哪些文件包含冲突。</p></li><li><p><strong>解析冲突</strong>：在你的编辑器中打开这些文件，你会看到以下形式的冲突标记：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Copy code&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line"><span class="section">(你当前分支的更改)</span></span><br><span class="line"><span class="section">=======</span></span><br><span class="line">(你试图合并的分支的更改)</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; (你试图合并的分支的名字)</span><br></pre></td></tr></table></figure><p>你需要手动决定保留哪些更改，或者可能需要结合两个分支的更改。解决冲突后，你需要删除 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>， <code>=======</code> 和 <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> 这些标记。</p></li><li><p><strong>提交解决后的冲突</strong>：一旦你解决了所有冲突，你可以像平常那样添加和提交这些文件：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span> .</span><br><span class="line">git <span class="keyword">commit</span> -m &quot;手动解决冲突并合并分支&quot;</span><br></pre></td></tr></table></figure></li></ol><p>注意，尽管你可以直接在终端编辑器中解决冲突，但一些IDE和文本编辑器（如Visual Studio Code，IntelliJ IDEA等）提供了更用户友好的方式来解决冲突，例如图形化的合并冲突解决工具，它可以帮助你更清晰、更容易地理解和解决冲突。</p><p>遇到的问题</p><p>遇到错误：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal：cannot <span class="built_in">do</span> <span class="keyword">a</span> partial commit during <span class="keyword">a</span> <span class="built_in">merge</span></span><br></pre></td></tr></table></figure><p>解决办法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在命令后加上 -<span class="selector-tag">i</span>参数，比如：</span><br><span class="line">git commit -m &quot;手动解决冲突并合并分支&quot; b1<span class="selector-class">.txt</span> -<span class="selector-tag">i</span></span><br></pre></td></tr></table></figure><h2 id="标签">标签</h2><blockquote><p>标签是静态的，分支是动态的。</p></blockquote><table><thead><tr><th><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718231728145.png" alt="image-20230718231728145"></th></tr></thead></table><p><strong>检出标签</strong></p><p>检出标签后，会自动跳转到新创建分支中。</p><table><thead><tr><th><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718232115769.png" alt="image-20230718232115769"></th></tr></thead></table><h2 id="在IDEA中使用GIT">在IDEA中使用GIT</h2><h3 id="获取Git仓库">获取Git仓库</h3><table><thead><tr><th><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718233255564.png" alt="image-20230718233255564"></th></tr></thead></table><h3 id="本地仓库操作-2">本地仓库操作</h3><table><thead><tr><th><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718234012088.png" alt=""></th></tr></thead><tbody><tr><td><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718234117075.png" alt="image-20230718234117075"></td></tr></tbody></table><h3 id="远程处理操作">远程处理操作</h3><table><thead><tr><th><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718234200211.png" alt="image-20230718234200211"></th></tr></thead></table><table><thead><tr><th>查看仓库<img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718234720851.png" alt="image-20230718234720851"></th><th>推送仓库<img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718234750474.png" alt="image-20230718234750474"></th><th>代码<img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718234829913.png" alt="image-20230718234829913"></th></tr></thead></table><h3 id="分支操作-2">分支操作</h3><table><thead><tr><th><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718234934641.png" alt="image-20230718234934641"></th><th><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718235432336.png" alt="image-20230718235432336"></th></tr></thead></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;GIT教程笔记&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV13a411q753?p=112&amp;amp;vd_source=1aea9871e1065286efe559677df1eedf&quot;&gt;配套视频教程&lt;/</summary>
      
    
    
    
    
    <category term="Git" scheme="https://qzl.luoxiaohei.asia/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>人类的节制比放纵更接近自由、自由是有所为而有所不为、自由不是想做什么就做什么，而是不想做什么就可以不做、自由是带着枷锁舞蹈</title>
    <link href="https://qzl.luoxiaohei.asia/posts/1c047702.html"/>
    <id>https://qzl.luoxiaohei.asia/posts/1c047702.html</id>
    <published>2023-07-19T09:33:36.479Z</published>
    <updated>2023-07-22T15:17:18.319Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试!" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="5f6ce16665b0c3424f7a9d6f54f3d25001c1c087f9d266987a674df47c08f888">2f36f3754ac39f008e9ddc38ce41105c0cbf4729569a4d3c9ae97253cdb47ea375da580a8a35a86a5488af827d13c5d0e8f713a7b32668e35d0c45750d94ddf0c51f9ad2b8bb75c41c2cddde51f291b9c55db2fe96f08882d007dac622bf33b829f39ba840af8d6250e297a0d9f4334660bdc2d589b0b7db118acb64064344297fa817f93602df7a58f96422aa6c44c2f586a52eac2bc31ab5d5f5e601c9568670e62fce8dca165482b3f0bb0323288b2ab958762763c5c8afa1c0cd31f228d5b5fc78849017f044c7af99c8a02b214ec961ad6cf56505d89003ea630be78625d5884f045b5dd758b3b642b8f72a8882a23df4e0ccda6be13f5b26feac59bba4b5e3588e2085e046b76255e88b4dd23ce5cff13f374e34a256c3781ab4608622b1d51cf260ef2404713ddfac196174e29ea6938996fcbaca09c0eca28f97d9b70778afa5a9da9c74c0e791f1a7d5e7d7f3e44a4cd6f66cf39a622b7c7c9f3cae</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">比较隐私的东西，需要密码才能进入!</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">想看联系站长哟!</summary>
    
    
    
    
  </entry>
  
</feed>
