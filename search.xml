<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>6级备考</title>
      <link href="/posts/4669a788.html"/>
      <url>/posts/4669a788.html</url>
      
        <content type="html"><![CDATA[<h1>终于有人能把6级讲清楚了！！！</h1><h2 id="Part1-六级扫盲">Part1 六级扫盲</h2><p><strong>（已经知道的小伙伴，以及需要资料的小伙伴，可以直接跳到最后）</strong></p><p><img src="https://pic1.zhimg.com/v2-3749ec95d5dd1181a152249e0cbf5aa8_r.jpg" alt="img"></p><p>敲黑板！！！</p><p>敲黑板！！！</p><p>看出重点了吗？？知道要把主要精力花到哪个题目上去吗?</p><p>为了更加直观一点，我们来看看一个题型的性价比公式：</p><p>性价比=题目分值S/做题时间T</p><p>所以，</p><blockquote><p>写作性价比=710<em>15%/30=3.55<br><strong>听力性价比=710*35%/30=8.28</strong><br><strong>阅读性价比=710*35%/40=6.21</strong><br>翻译性价比=710</em>15%/30=3.55</p></blockquote><p>看到了吗！！听力的重要性暴打所有题型！！</p><p>平时练得最少的<a href="https://www.zhihu.com/search?q=%E5%90%AC%E5%8A%9B&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2247039778%7D">听力</a>，反而是6级里性价比最高的题型！！</p><p>有的小伙伴觉得自己翻译太烂了，作文也写不好，然后花了大量时间去练习，反而一想起来听力就觉得麻烦，根本就不想练，直接战术放弃了。</p><h2 id="Part2-四六级难度对比">Part2 四六级难度对比</h2><p><strong>2.1 词汇量</strong></p><p>六级词汇多出来的1500个单词，可能都是你没见过的~</p><p>好多基础还不错的同学，过四级只靠吃高中的老本就够了，单词没怎么背也能顺利飘过。</p><p>但备战六级如果还是不背单词，只能说重在参与了~~</p><p>多出来的那1500多个单词，没见过就是没见过，不认识就是不认识。</p><p>不过，背6级单词肯定也有优先级，依然优先背诵绝对高频的单词。</p><p>整理好的【<strong>6级高频单词表】</strong>，以及背单词的具体方法，都在文章的Part3。</p><p><strong>2.2 听力难度骤增</strong></p><p>所有题型中，6级听力的难度提升是最大的。</p><ul><li>语速明显变快</li><li>文章不再那么直白，经常绕弯，至少需要听懂一部分文章内容才能做题</li><li>四级听力中“视听一致”的做题原则不再适用</li></ul><p>如果四级考查的是技巧，那么六级就已经涉及到内功了。</p><p>不过，六级听力中技巧同样很重要，内功和技巧结合才能出高分。</p><p><strong>2.3 阅读难度提升不大</strong></p><ul><li>SectionA 选词填空，主要提升了词汇难度，但策略和四级一致，具体见下文Part5。</li><li>SectionB 段落匹配，改变的地方，同义替换现象依然是绝对考点，但六级中需要理解段落大概意思，需要的词汇量变大。</li><li>SectionC 仔细阅读，题型没变化，并且虽然多了一些高级词汇，但几乎不影响做题，因为SectionC的做题依然遵循KLA原则，具体见下文Part5。</li></ul><p><strong>2.4 作文&amp;翻译</strong></p><p>作文和翻译依然是性价比最低的题型，四六级差别不大，因为短期提分都很难。</p><p>想平稳通过，依然技巧为王。</p><h2 id="Part3-词汇">Part3 词汇</h2><p>好多老铁，四级过了之后，六级怎么考都过不去了，词汇就是硬伤。</p><p>上面也讲啦，六级词汇比四级提升的难度不是一点半点，多出来的那1500多个单词，没见过就是没见过，不认识就是不认识。</p><p>如果你的时间紧张，**一定扔掉6000多个单词的单词书，先背高频词，**这是见效最快最快的。</p><p>如果你时间充足，那就选一个自己喜欢的单词APP，把六级单词刷完。</p><p>这里，我主要讲一下高频词，不管你时间是否充足，高频词都一定要记牢。</p><h2 id="Part4-听力">Part4 听力</h2><p>六级过不了，如果是300分左右，那估计是阅读太差了，但如果卡在了400分，极大概率是被听力卡了脖子。</p><p>4级听力中的很多题目，就是直愣愣的选，是直线思维，一步找到正确答案，而6级听力中，这种送分题的密度大大降低，出现了更多需要听懂，甚至分析的题目。</p><p>尤其是听力的最后一部分，讲座，每道题14.2分，原文的意思一点听不懂的话会很难选。</p><p>但是，并不是说六级听力全靠实力，没有技巧可言了。</p><p>下面的文字，4.1是技巧，4.2是内功，技巧必须会，至于内功要不要修炼，看你时间。</p><p><strong>4.1 听力技巧</strong></p><p>①顺序原则：这一点和4级相同，题目答案顺序与听力原文顺序一致。</p><p>②**开头原则不再适用：**不同于4级，6级听力的前几句可能会包括答案，所以前几句也不能错过。</p><p>③播音讲废话的时候，一定快速浏览选项，画出关键词，比如时间、地点、名字、特定名称、数字数据。</p><p>④敲黑板！！注意啦！！</p><p>如果你仔细对照过听力原文和选项，就会发现<strong>很多题都在考察同义替换现象，这种同义替换主要包括3种：</strong></p><ul><li>名词的同义替换，即名词1→名词2</li></ul><blockquote><p>如tuition（学费）→ educational expenses</p></blockquote><ul><li>动词的同义替换，即动词1→动词2</li></ul><blockquote><p>如improve（提升）→ enhance</p></blockquote><ul><li>名词和动词的相互转换，名词1→动词1；动词2→名词2</li></ul><blockquote><p>如unemployment（失业）→lay off；rebound（复苏）→recovery</p></blockquote><p>至于形容词副词就不用纠结了，这没办法设置考点，设置了也是送分题，比如一个句子的所有信息不变，把“beautiful”换成“attractive”……</p><p>知道了同义替换的重要性，哪怕你整句话都没听懂，就听到某个词，然后在选项里还出现了这个词的同义替换，不要犹豫，选它！</p><p><strong>我总结了一堆听力题型中，常见的同义替换</strong>，把这些替换过几遍，脑子里留下印象，做题的时候会很快的反应出来。</p><p><img src="https://pic3.zhimg.com/80/v2-1c23fe723b0567b1e5a2d68fbc679256_720w.webp" alt="img"></p><p>⑤but、however转折之后的句子绝对是考点，最高级（-est）和序数词（first、second、third等）也常设考点。</p><p>⑥如果两个选项有相近/相反的答案，正确答案必在这两项之中。</p><p><strong>4.2 听力内功</strong></p><p>4级听力只靠技巧也能过关，但6级听力真的需要点真东西了~</p><p>在我准备四六级、雅思（听力7.5/9）以及全国大学生英语竞赛（一等奖）的过程中，夯实听力用的都是这个方法：</p><p>泛听→精听→复听。</p><p>而且你会发现，知乎上绝大部分的四六级高赞回答，关于听力的修炼方法都少不了精听。</p><p>【泛听→精听→复听】这3步的具体方法，我在之前的四级回答里写得非常全面，一定要去看！</p><p><strong>pps.救救孩子吧！不要只收藏好吧！点个赞，就当是给自己过6级行善啦！！ 点赞的都给我过！！！</strong></p><h2 id="Part5-阅读">Part5 阅读</h2><p>到了6级这里，有的小伙伴开始纠结语法问题了，自己要不要先去弄本语法书啃一啃？</p><ul><li>长期备考求高分的话，有必要修炼语法，对写作和翻译也都有帮助。</li><li>短期备考的话，如果语法实在太差，就找一本语法书，主要看看虚拟语气、各种时态、倒装，更复杂的就不用看了，所以一个下午应该差不多够了。至于其他时候，把语法书当工具书，随查随用，千万别一页一页的看。</li></ul><p>阅读部分的3种题型，有一个万年不变的铁律：</p><p>题目顺序是SectionA选词填空→ SectionB匹配题→SectionC阅读单选，但按照题目难度排序，却刚好反过来，SectionC部分的分值最高（20%），题目最简单，在试卷里却被放在了阅读的最后面。</p><p><strong>所以，不管是考场还是平时练习，都一定按照CBA的顺序去做题！</strong></p><h2 id="Part6-作文">Part6 作文</h2><p>虽然应试很没意思，但你考过4级肯定知道，作文考察的根本不是思辨能力，而是模仿能力，说白了就是套用/修改牛逼句子和作文模板的能力。</p><p>如果你有精神洁癖，不愿意写这种没营养的东西，愿意自己花两三个月每天写五六篇练习，但其实啊，最后写出来的东西还是烂得一批。</p><p>写作这件事，没有好的输入，就没有好的输出，这是永恒的定理。</p><p>一篇四六级作文，普遍是9~12句话就写完了，所以6级作文这里，我还是帮大家搜集了一大堆万能句子/模板（和之前4级的不同），这不只是技巧，其实也是内功。</p><p>有了这些弹药之后，具体的练习方法可以去看这个回答里的6.1和6.2，写得很详细。</p><p>总结起来就是两句话：</p><ol><li><strong>背句子，不要背文章</strong></li><li><strong>写结构，不用写全文</strong></li></ol><h2 id="Part7-翻译">Part7 翻译</h2><p>翻译题是四六级中性价比最低的题目，分值少+用时长+难度大。</p><p>虽然短时间的训练很难保证在翻译中拿到高分，但是通过下面的小技巧，拿个中上水平的分数还是没问题。</p><p>因为，翻译虽然难，但是给分标准很低：</p><p><img src="https://pic1.zhimg.com/80/v2-4e0b8f48cb3600a56cd671e5a44528ac_720w.webp" alt="img"></p><p>你看，哪怕有很多语言错误，其中一部分甚至是严重的错误，<strong>但只要“勉强表达”了原文意思，就是7~9分，这已经是拿了一大半的分数了~</strong></p><p>所以，你其实只要明白这几点就够啦：</p><p>①翻译是人工阅卷，阅卷老师根本不可能看你全文的，得多少分，重点是有没有写对踩分点的单词，以及语法错误多不多；</p><p>②一定要选择基础的单词和简单句式，越基础越好，不犯错就是得分；</p><p>③踩分，翻译是有关键踩分点的，通常这个题目主题下的相关词汇，比如<strong>历史，文化、经济、社会类等，这个需要单独记一下。</strong></p><blockquote><p>ps.我也按照不同的主题，分类整理了翻译常考的词汇表，<strong>获取方式在文章第2张图里~</strong>。</p></blockquote><p>④评分标准里说了，“勉强表达”了原文意思就ok，所以碰见不知道怎么表达的句子，想方设法把原文“意译”，而不是“直译”，总之千万不要空着~</p><h2 id="最后">最后</h2><p>大家可以私信我领取资料~</p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小红书账号创作计划</title>
      <link href="/posts/2cd64afe.html"/>
      <url>/posts/2cd64afe.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试!" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="5dfbad63e1fa84da01a8935e25314772c41762ebf3e763086bdb089c91963a6a">2f36f3754ac39f008e9ddc38ce41105c6498b6ea646e6887d87825363697bccd18fc8851c34fc6bb5340bb3d93ba274c98deacbdb87b24f8fd368c49503c1ca00db177bd3acd61b1112d5a36bf0e06c54bdff3e2706f8ae9a6b543c68df354010b44941e24f618c33978faeaa430e4aaf216a5ea95ecb5cb2dce89d2069d11dcfcb771fd72ba6e57d7e7b06fc66fe579e112f11a1cb20c9dde7b98513825bf54b4eae7d5ddc0c907e2e197c39de8bb5bdb685ff6af685af32eaf18faa4ddc7727e36f1710e86ef6ec004f9284347a165319f10049d7684634a99b9dfcc258b958d586af433737d6d63b71e667b5f75fc35eb8864eb2037755f442ed77b733653e878a89ec8eccdc0c68cf5184546bd21cd6409fb3790dd70206d203d43bd5dcf88d0b520efbbcbe9bd5fec71256106947d9e7dd974e9ae9bbebbe30a64df8412</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">比较隐私的东西，需要密码才能进入!</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<h1>和任何人的比较、都是在内耗自己、让自己迷失在找不到希望的迷宫里。</h1><p>今天我妈拿出了20w的存款给我看，告诉我家里有钱，当时我还是觉得有点少，因为我对家里的钱并没有很确切的概念，在我印象中，钱的多少对我影响没有很大，但是我知道，以后没有爸妈保护下，钱的多少是很重要的事情，所以我需要尽快养成对钱的敏感度，合理安排钱和钱生钱。</p><p>我妈拿出钱是因为害怕我担心家里没钱娶老婆，其实我不担心，只是对于婚姻来说，我认为不是儿戏，对我，对所有人都是一个冒险，我怕我不能承担这样的风险。我认为以后的生活是一步一步在精明的计划中实现的，我需要更加有洞穿未来的眼光。</p><p>我妈跟我说我哥花了多少钱我就有多少钱，我哥买房200多w，装修60w，彩礼、结婚这些加起来，在我哥身上花了300w。所以爸妈打算给我在省内买一个100多w的房子，中大城的房子给我。这样房子装修差不多，再给我买一辆车。这样就弄的差不多。</p><p>我知道，这些都是大人们的事情，不需要担心和怀疑，我最重要的还是管好自己的事情，让自己有潜力，有能力。所以，不要想太多，专心发展自己才是王道。</p><p>男人到了中年，要有的“城府”：<br>1、不和亲戚一起去旅游。</p><p>2、经常把手机扣在桌子上。</p><p>3、不往烟灰缸里面倒水。</p><p>4、聊天，一问一答式的对话，要懂得早点离开。</p><p>5、帮子女带孩子，3缺1，谁打电话也不去。</p><p>6、看到邻居脸色不好，不要问怎么了，打声招呼，就匆匆离开。</p><p>7、亲戚请帮忙办事，不要表现出很容易，反而要装作不好办。</p><p>8、理发不说剪短点。</p><p>9、生病了，或者身体不好，不串门。</p><p>10、别让子女和朋友一起去考驾照，就怕先拿到驾照。</p><p>11、经常对别人说谢谢，很重要。</p><p>12、别人请客，晚5分钟再去。</p><p>13、被别人夸赞的时候，适当的暴露自己的不足。</p><p>14、不和年轻人混在一起，那是找难受。</p><p>15、帮不上忙的事，不要问别人的事情进展。</p><p>16、远离少妇，远离离了婚的女人。</p><p>17、在医院，护士对你不客气，但你要对护士客气。</p><p>18、别拿扫把打人，哪怕是开玩笑的也不行。</p><p>19、组局，快要买单的时候不要去上厕所。</p><p>20、别人送自己的鞋子，哪怕九成新，最好也别要。</p><p>21、领导总是当众夸你，你一定要小心，捧杀才是最可怕的。</p><p>22、不和子女说自己这一辈子的恩怨，没必要延续下去。</p><p>23、父母年纪大了，烦心的事，不能和他们说。</p><p>24、两个人睡觉，真的没必要放三个枕头。</p><p>25、尽量不住在别人家里，没人愿意被打扰。</p><p>26、遇到搭顺风车的，一次是人情，连续第2次，就要远离。</p><p>27、朋友的离去，不问，不内耗，这是价值考量的结果。</p><p>28、在别人的车上，不乱说话，行车记录仪很可怕。</p><p>29、问了两次都没回答，对方已经给了答案。</p><p>30、凡事留一手，以备不时之需。</p><p>31、千人千面，对待不同的人，需要不同的态度。</p><p>32、只要有一个客人没放大筷子，主人就不能说吃好了。</p><p>33、少发朋友圈，总有一些人在研究你。</p><p>34、一定要会说客气话，虽然很虚，但是人人爱听。</p><p>35、别人发的红包或者转账，等几分钟再送。</p><p>36、朋友接电话的时候，要和他保持一定的距离，电话总会涉及到一些个人隐私。</p><p>37、别想着躺平，趁着有限的时间，赶紧多挣钱。</p><p>38、场面话一定要会说，酒桌上没有几句场面话，很难合群。</p><p>39、在外面要说谎，在家里也要说谎，善意的谎言，家庭才能够更和谐。</p><p>40、老家的房子不要丢，哪怕你很有钱。</p><p>41、控制好自己的情绪，这样才能不被别人利用。</p><p>42、不舒服的事情，就要拒绝，别做老好人。</p><p>43、赚钱的事情，要懂得闷声发大财。</p><p>44、人到中年，心里一定要能装事，别口无遮拦。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<h1>JAVA面经</h1><h3 id="Java值传递">Java值传递</h3><ul><li><strong>值传递</strong>：方法接收的是实参值的拷贝，会创建副本。</li><li><strong>引用传递</strong>：方法接收的直接是实参所引用的对象在堆中的地址，不会创建副本，对形参的修改将影响到实参。</li></ul><p>Java 中将实参传递给方法（或函数）的方式是 <strong>值传递</strong>：</p><ul><li>如果参数是基本类型的话，很简单，传递的就是基本类型的==字面量值的==拷贝，会创建副本。</li><li>如果参数是引用类型，传递的就是实参所引用的对象在堆中==地址值==的拷贝，同样也会创建副本。</li></ul><h3 id="Java序列化">Java序列化</h3><ul><li><strong>序列化</strong>：将数据结构或对象转换成二进制字节流的过程</li><li><strong>反序列化</strong>：将在序列化过程中所生成的二进制字节流转换成数据结构或者对象的过程</li></ul><p><strong>序列化的主要目的是通过网络传输对象或者说是将对象存储到文件系统、数据库、内存中。</strong></p><p><img src="https://oss.javaguide.cn/github/javaguide/a478c74d-2c48-40ae-9374-87aacf05188c.png" alt=""></p><p>序列化和反序列化处于网络体系结构中的==应用层==</p><p><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/tcp-ip-4-model.png" alt=""></p><p>上面ISO【International Standardization Organization】网络体系结构</p><p>网络体系中应用层用于序列化的协议有Hessian、Kryo、Protobuf、ProtoStuff，其中Kryo 是专门针对 Java 语言序列化方式并且性能非常好。</p><p>因为序列化效率低并且存在安全问题吗，JDK 自带的序列化方式一般不会用。</p><h3 id="泛型-通配符详解">泛型&amp;通配符详解</h3><p>通过使用泛型&lt;<code>T</code>&gt;，你可以定义<code>类、接口和方法</code>，使它们可以与任何类型一起工作，而不会丢失类型信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Box</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> T content;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T content)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.content = content;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> T <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> content;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Java中，你可以使用问号<code>?</code>作为通配符。通配符通常用于定义灵活的<code>参数</code>，允许你以更加通用的方式操作泛型集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printContent</span><span class="params">(List&lt;?&gt; list)</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (Object item : list) &#123;</span><br><span class="line">    System.out.println(item);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>泛型和通配符与类型系统有关，允许程序员编写更加<code>灵活、安全和可重用</code>的代码。</p><h3 id="Java反射机制">Java反射机制</h3><p>反射之所以被称为框架的灵魂，主要是因为它赋予了我们在运行时分析类以及执行类中方法的能力。</p><p>通过反射你可以获取任意一个类的所有属性和方法，你还可以调用这些方法和属性。</p><p>另外，像 Java 中的一大利器 <strong>注解</strong> 的实现也用到了反射。</p><p>为什么你使用 Spring 的时候 ，一个<code>@Component</code>注解就声明了一个类为 Spring Bean 呢？为什么你通过一个 <code>@Value</code>注解就读取到配置文件中的值呢？究竟是怎么起作用的呢？答：通过注解获取类、实例对象和变量值。</p><p><a href="https://javaguide.cn/java/basis/reflection.html#%E5%8F%8D%E5%B0%84%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E4%BA%86%E8%A7%A3%E4%B9%88">反射实战</a></p><h3 id="Java代理模式">Java代理模式</h3><p><strong>代理模式的主要作用是扩展目标对象的功能，比如说在目标对象的某个方法执行前后你可以增加一些自定义的操作。</strong></p><p>因为静态代理不够灵活，接口一旦新加方法，代理对象就要进行修改，所以几乎不用静态代理。从JVM层面上讲：在编译时就生成class文件。</p><p><strong>动态代理在我们日常开发中使用的相对较少，但是在框架中的几乎是必用的一门技术。学会了动态代理之后，对于我们理解和学习各种框架的原理也非常有帮助。</strong></p><h4 id="动态代理实现方式">动态代理实现方式</h4><p><strong>JDK 动态代理有一个最致命的问题是其只能代理实现了接口的类。</strong></p><p><strong>为了解决这个问题，我们可以用 CGLIB 动态代理机制来避免。</strong></p><p><strong>JDK 动态代理只能代理实现了接口的类或者直接代理接口，而 CGLIB 可以代理未实现任何接口的类。</strong> 另外， CGLIB 动态代理是通过生成一个被代理类的子类来拦截被代理类的方法调用，因此不能代理声明为 final 类型的类和方法。</p><h4 id="静态代理和动态代理的对比">静态代理和动态代理的对比</h4><ol><li><strong>灵活性</strong>：动态代理更加灵活，不需要必须实现接口，可以直接代理实现类，并且可以不需要针对每个目标类都创建一个代理类。另外，静态代理中，接口一旦新增加方法，目标对象和代理对象都要进行修改，这是非常麻烦的！</li><li><strong>JVM 层面</strong>：静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。而动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。</li></ol><h2 id="BigDecimal">BigDecimal</h2><p>浮点数为什么会出现精度损失呢？</p><p>答：因为在计算机中，采用二进制存储数据，一个数据的存储长度有限，那么在浮点数中，用二进制表示会出现循环小数的情况，因为数据存储长度有限，计算机会截断，所以导致了精度损失。</p><p>为什么使用BigDceimal？</p><p>答：<code>BigDecimal</code> 可以实现对浮点数的运算，不会造成精度丢失。</p><p><a href="https://javaguide.cn/java/basis/bigdecimal.html#bigdecimal-%E4%BB%8B%E7%BB%8D">BigDcimal使用方法</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>软考-软件设计师中级备考计划</title>
      <link href="/posts/e3c70671.html"/>
      <url>/posts/e3c70671.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试!" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="2ad9c9181cf29ec88084341c6efb38743528d4396151d57fbd69ca90986f2d14">2f36f3754ac39f008e9ddc38ce41105ca0b755c1e9017c9117753aafb52201699bd6d81a383523e9896df2d66e00107c5efaca6971a349224a158f93d2b54c703f191f1001d79bc2c07199af485c86bcd690aa22e41ceb533ba3b30f1302c3d366a53bf0141f0dd03b8ed76aff718394a15b3990eb38b9331e892c8bc0b990a875bf14bd0722fbe685d5da218caecccfb5ca3a093a03e6d39119b18a85c1d98d3aedc7997751f518485ac2d043975e8725c5171b0ec4bf50d90d66c948af8b6a285c9ab66f321b82fb944ccafbb842ef50e9a9949c285075909a7f56450faeb7811425d73945742c17c6da49455c575cff71f7dbdbe6748b7112d7b1c03cf4efd3c70e0bf17be056dff8207675284fed383f2c66e5749c563bd3d707e88fbafc9a9fda2aed982d3c852bca0b922f33d7444d1fa4a58f3cee11921507f50610f16ae1ff78a367302f1480db089f9161b2590adf0afc2e944ce7e4b736f4c7938749138fa8f80d2c5a7e895e0f107fbd046355c7739bf22e47e602706d4e29dc4c98238f6f945d4ab16db0affe1ea9bcf420fb3f960873954ea7846c9141a9e400f40586d9dfa5110ef98cd149263e3da9d5bae6187cfe3ed5b1726f08de9a418b6232d3174789db1d565f62ff6736386b1beb4ab0a8cc79c4ef45d80e4af5ba330d5aded33fdf64ace03fbc85a6acd43e279579606b1acb6e1e88ea18082136bcedc63397ddf0d1c9f9539707940e6e6dc1897e78752ccf0392e42f37058b548e752ee2b1ffeb7be2c763a59b75f0d21a181ce86eee7b43430b4483df1462d785860d8404cdd3f0300220ecaa6c5176c15f7073b7088196e65dfceecf99566b8006733ca63fd80ae2ef34edcae99c104b4a33a7e91b5795a293160aa7135a1a6e3580cef327cf9f2bfa054bf64c12a3d509483e8b7f6f03efb047014088fc42066dbc1cb82d683c3dbfc29e55682ed99adcd64ac2ffd04ba2caa4e35b71ebf217177aab8717ab94cce4bf9da2fded17ab511b55a3a817f5275d1ec0299e20d78f6f3468e18c50712e24aaaaea217ea7994cebf690d4839d99e7345fc4f8ca2118314bc0fef74afe1a21197d59df1f9e52745f326c370a6159d82765624df2f6150f611a79d69f23311fdcc40e93595e6d7846532274935779d0290f6a67bfd7c5597c79ce61ea8945bd6a74b3e18c2738cced4e59e8acd491071c901fb790e921e835a69e401cfe02e7f826edd30f294fc7e6391714cfc451cb39f34dd24484315a767e502140f10618f27ad1d13c69d3abb4b0816d88a0e320aeb4ca470c3a196a7c1693874953e380a6ca0dcff83ba3a65476d94450b7adee938aaa1cb50bdc51b01b26b7de70a573841bc1f8a6b614c55f7bae9e3a2170938fd540ee127dc487fddf112707822181169a30410856acde2171af27c1605525415e74807ca995</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">比较隐私的东西，需要密码才能进入!</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>对未来的看法</title>
      <link href="/posts/8157703f.html"/>
      <url>/posts/8157703f.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试!" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="5f96f04791342d456d7c6d66572568cdb81dc2b30c542ffba5e83662aaa2ee3c">2f36f3754ac39f008e9ddc38ce41105c26508b0086648f73a53e08254e361ba15f0f927b3a8da1432a0f5d44afdf8638bb21f0486ea12cff70ec14091d2a7f54c52a488dc92966b67a67b6c93c6cd761381afe602303fcbdb3d6dff23857eb9d6e011b4b76d5ab8e0cdeff795c4e308e800b3c836c312c5a239f9d288870cf3a4a223b7da55fd466699229943125de7189a2573156d39911b76cdb2bc677e0b44a0e127fc288159e4f9c6b49e684c017235d488f731608a0f5fb2337b54abadf894c1187b35d8690dba196c20d2e5e3d097182f79795ec35781a7d4cfcefc79ed310de2548e63cdb8b274067b70c49abb46151c1c2645630be3cd4da2d76444b674b3ef69eb8c5771d11895d14ec5d8c8234a8480ec5e317d482905dba0986cf23a8b629a97c4a2973fa8532bd797d874d3d7d9c92254c9be211d2b3015a48e97913298c1c2193925888802ab9135b0154a0f9ca03ef6fc206bf5914f56a016fb0e8e34991db36d301bd3edf62e21448d0bbeac82cccedde41542435310ea772c7b86d4a27da8001bbb8c7092cef79f8231ced6a41729e9ff446bb0d67964984c0484b37ba0debb9495d54eacc5323a5f24c26c53b635cac059896650f859afd</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">比较隐私的东西，需要密码才能进入!</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>男人娶老婆就是有人陪，女人嫁老公就是有人养</title>
      <link href="/posts/3b6f423b.html"/>
      <url>/posts/3b6f423b.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试!" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="577dfeea2e9c0a31c96a628ae9cb112972e8562d9194a0e00b9b644f2c0bfdd7">2f36f3754ac39f008e9ddc38ce41105c26508b0086648f73a53e08254e361ba15f15cabae6252a58d9fe48fd5cf6cba8928c5d50a1cbe8036b1e8c66ab2e756c4e3dc7a4aab13fae488d49684398541d1abc55c42a943761e1d8548e6ed65698a7ed544ce94ab3b15f43e0de99429ddefc1f6c14429c9433cb8091283dcca0ad90f9ef2ac360199507945efbe80eb62988de705dcc6058f5356f65a80d97fa23922583d035c5497376bae8f804f5b21250cbd4e774cfffe70b32069cffa8b6fbdd3a6977269684338882a12a9661b267659f680f33fb3701a2383d66277f12a43e6b4fa574bdb7733a6cabb2a6b7ece6a2263eff79d66a0ee69fc1af2ebee9ea17de9726a4740caaa4007239990768c05a4800522fad2dbde548de02cf8fe48b9bee29ff36b1e4212334ae5392b802ea5bd90cb6df96384bb8beb668341f143f1107703e79c6e32a5387cefcdc0859d148fb4dc5ebcb00f71e083ac99c1cbba33c3c0e1e9be4afb97d61030a3aa804aec5aabd7b5b67ea432dfb8654b80cffe62e547d4fafe2ddb465c35478a11597051657e3d8f4d585055f9d9edf41f5d03ddea4505d00735dffd12d1e83f58256d20d98ff4555038bd7b3e3593317affc80cd7bebb73735ca43badcbe7d260130ad5ba02c8e4594c44666bea8d06432630c62b579c4615bc4d793dc801cb3a3244113e804a3bfafb8a28264757c3ecd110deb38f555be303eb611ae3e0909235177bee94905c872ef093f5b8476b36507d4be80742351ee23bc758f54042303b0da1be7ba318442445c6eb3286f60ceaedeb9df7d33ab27ba93c5f2b0274205e5212da725debc87e52cebc2468f73261dee2c0f492c33cb56e0fa2ad048dc69ac38bcf76ed9ad5e3108ae4276a6770b85ba</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">比较隐私的东西，需要密码才能进入!</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>风雨里像个大人，阳光下像个孩子</title>
      <link href="/posts/495faf5a.html"/>
      <url>/posts/495faf5a.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试!" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="471d2b822bee17970cbd496c0373341e4b076cf42c468e64ff43950361ae9076">2f36f3754ac39f008e9ddc38ce41105c96841aea760758a86a203a650af567a71e143303ad3ce4771cc2c12c1b3361bd363d9bd984f1a0d8278c10618f4eaca5a6d281034768d15fcdbdfdc63929da4932de09f602e0297ad59692b97b54f0c33df11db863f87def2a1dfb996a6e0055b95695d5961727be82d09797204b32cdbf34868fec4db1a7ca2764b0c773e3d7b3d2a33931aec3e5c0ec45b7230cf3837d45be9f3c290736ca9823958058e1a008b87103f417d60c96945f4fb858553d691d6d28d58025e4f05ab24d839de48f476f902456bc549424dedb61d042c374da1f64b09d33caef560a77d83d89684c37975d78c60a86810632b8d56415e5d06be2862e2cd1ce9d99b46e7e4587bc5f84b12ae3e5ff79cd8528d782ea759fb899a19e23b425865582f0dc6798052c1790ca2033f253f1cb56a8edb8e1cc423ddab53701a3a0e0348a347e2a7374a26b6ee665f846a4f4001d47b8900e612998131eb56546c8662ef42a3dba98d73f781a1eaa69941834e9167389f622351a755c7f1d26623ddbe6aedb707075046fd8ffa55f91725ba488651ee110e1dc3b67cf3d692268944c5e1b79add54ad466bf1b6d696cec1e841e5907be13c8dcce9eea318217f6fc0ee17643b522d8c0962d898d2f54bf8fb2193a494683e57fcbe155b03122f7693af6db22a7f48f44f28b0140831b3a3108a8a5d718b32c668d6160f1925372c1f314877b0a279de3dc9ef6448a1229e7ae84a054c9c044c9adc018b2be7e58c8a909d733bf802ce4d7502b5d8f0e19d84e7a8c41a98ed700c1396157dbc1e234b0d96b6c4b4707f00b4003c04425c433a626e3e4dd1d457cb964c99887fb9f631a8255deb30a8b57ce38b517d7e0daf4108f214ac16a14d38267b46333e669cc58bab8f1445532642ef4c2ebdfe12e6be357389c98c295f375db257818498a08b3ea7d3d4d7b3637b49bfb8f902f972acb4938241a4df010a693f9ba840f7469781c91127cfdea3e717582ad6df478f5fc953b1ddec10713e2423223745acc68da441a8db27c01ae5ea6</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">比较隐私的东西，需要密码才能进入!</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>生活是属于每个人自己的感受，不属于任何别人的看法。</title>
      <link href="/posts/2898578e.html"/>
      <url>/posts/2898578e.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试!" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ac299ce4cb20cce3cb1375afea96095a89e0013e2d812ae08be996bdb7179008">2f36f3754ac39f008e9ddc38ce41105cf8aef13d9f5d088e91de737227c1750a0e19d1c3b1e438d6d39785c88160cc1fdf47a9337ed986c40464fe1d3b9642289903e94c9f7237e4b2b95ba62d469b0b8b3f47f72eb2551fbde1c38b0d7f15e4ec07998e0c7a6e7a47260d0588550fb1f9a6e082c9037328540fa5bef1980c1bc2bbd198cc1f3904046118d40468ca992770096e5c4dfed91b27040d84fd7cdc376a75be6ad73cd2a171baf641900d66f7d443cabd874c00ff8e8e298636ee1b8f19e203be1f9217161c1883d68bf7c0fe9db5064058faa26c1ea0c4cc92410a630ca507aedf90f889a3b62df42975ff43942301c22dcbde6c0c5f7e8ce50a238c4ddfe2d4a2a7442e74fcca006b4efff8df19d216603b74cc7035b2d23f11de894a40d7ed0c35ad72e993dc8e40442571ee9635df16e45918189a08d62a4f1dcd5de948287ee01ac0247288ac3efee0d09d66f8a8f07282b2e42408cecc80150cf3fc1084b49187d08cb66384564b176881ddc7a13b576fa80a2a6e884dca8b0ce62d5a38b26887e865a5f68d4ac09f63bb6beb9bb90c0f32021a53ffc806c04bc51b5232b2ca87bc0d5415c85d56e59e281e1ecb090d4a199bfb2fd089eafd587b5bdc2aba826d15032a816b76bcb788962ae033680d54383aff1f8f5eba33592ce46c67d99e6e03e2cec57b88b5dc566e754f4f2a2dbd79b18e6df68be427743c730ec91279f949594d14999321068ee9c271abf5cc615325374d1f86d1207781cbbfabe9e6311915511ce34f60af44030991d9ede489be32a5e1a3999dcbbcbf9c8609e71a1d1f7190a8961abd4b8c86bbaba8a38eddecb0d5091db84071f6f4761ffff6ac23be0e3b0fe4303861ea0be6c1fab94919563027979933cc2920e240b247949fccc995b0104b26719f</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">比较隐私的东西，需要密码才能进入!</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人类的节制比放纵更接近自由、自由是有所为而有所不为、自由不是想做什么就做什么，而是不想做什么就可以不做、自由是带着枷锁舞蹈</title>
      <link href="/posts/1c047702.html"/>
      <url>/posts/1c047702.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试!" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="5f6ce16665b0c3424f7a9d6f54f3d25001c1c087f9d266987a674df47c08f888">2f36f3754ac39f008e9ddc38ce41105c0cbf4729569a4d3c9ae97253cdb47ea375da580a8a35a86a5488af827d13c5d0e8f713a7b32668e35d0c45750d94ddf0c51f9ad2b8bb75c41c2cddde51f291b9c55db2fe96f08882d007dac622bf33b829f39ba840af8d6250e297a0d9f4334660bdc2d589b0b7db118acb64064344297fa817f93602df7a58f96422aa6c44c2f586a52eac2bc31ab5d5f5e601c9568670e62fce8dca165482b3f0bb0323288b2ab958762763c5c8afa1c0cd31f228d5b5fc78849017f044c7af99c8a02b214ec961ad6cf56505d89003ea630be78625d5884f045b5dd758b3b642b8f72a8882a23df4e0ccda6be13f5b26feac59bba4b5e3588e2085e046b76255e88b4dd23ce5cff13f374e34a256c3781ab4608622b1d51cf260ef2404713ddfac196174e29ea6938996fcbaca09c0eca28f97d9b70778afa5a9da9c74c0e791f1a7d5e7d7f3e44a4cd6f66cf39a622b7c7c9f3cae</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">比较隐私的东西，需要密码才能进入!</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu下安装开发环境</title>
      <link href="/posts/eb4360ff.html"/>
      <url>/posts/eb4360ff.html</url>
      
        <content type="html"><![CDATA[<h1>Ubuntu下安装开发环境</h1><p><a href="https://www.bilibili.com/video/BV13a411q753?p=135&amp;vd_source=1aea9871e1065286efe559677df1eedf">教程地址</a></p><blockquote><p>虚拟机上密码：</p><p>su 切换root权限：luohao123</p><p>mysql：1234</p><p>开机锁屏：luohao123…</p></blockquote><h2 id="1、安装jdk">1、安装jdk</h2><p>首先安装linux上的文件传输工具lrzsz</p><table><thead><tr><th><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230719105730406.png" alt="image-20230719105730406"></th></tr></thead></table><h2 id="2、安装tomcat">2、安装tomcat</h2><table><thead><tr><th><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230719105801759.png" alt="image-20230719105801759" style="zoom:150%;" /></th></tr></thead></table><h3 id="验证tomcat是否启动">验证tomcat是否启动</h3><table><thead><tr><th><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230719112501303.png" alt="image-20230719112501303"></th></tr></thead></table><h3 id="防火墙设置">防火墙设置</h3><table><thead><tr><th style="text-align:center">centos</th><th style="text-align:center">UBUNTU</th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230719113215942.png" alt="image-20230719113215942"></td><td style="text-align:center"><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230719115654545.png" alt="image-20230719115654545"></td></tr></tbody></table><h2 id="安装mysql">安装mysql</h2><table><thead><tr><th>- centos下</th><th>Ubuntu下</th></tr></thead><tbody><tr><td><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230719113731178.png" alt="image-20230719113731178"></td><td><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230719130706497.png" alt="image-20230719130706497"></td></tr><tr><td><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230719113840410.png" alt="image-20230719113840410"></td><td></td></tr></tbody></table><h3 id="启动mysql">启动mysql</h3><table><thead><tr><th><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230719114430372.png" alt="image-20230719114430372"></th><th><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230719132356644.png" alt=""></th></tr></thead><tbody><tr><td><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230729221220759.png" alt="image-20230729221220759"></td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230729221208908.png" alt="image-20230729221208908"></td><td></td></tr></tbody></table><h2 id="Ubuntu系统下修改密码-修改权限">Ubuntu系统下修改密码&amp;修改权限</h2><h3 id="mysql8修改密码">mysql8修改密码</h3><h4 id="1-查看密码策略">1.查看密码策略</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">--MySQL</span>登录后使用这个命令查看密码策略</span><br><span class="line">show variables like <span class="string">&#x27;validate%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>查询结果就是这个样子<br><img src="https://img-blog.csdnimg.cn/c4403978e9c345df99f90e54f5aa2373.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5ZCR5b6A5ZGo5YWo,size_16,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="2-修改策略">2.修改策略</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">--</span>可以使用以下命令进行修改</span><br><span class="line"><span class="literal">--</span>密码验证策略低要求(<span class="number">0</span>或LOW代表低级)</span><br><span class="line"><span class="built_in">set</span> global validate_password.policy=MEDIUM;</span><br><span class="line"></span><br><span class="line"><span class="literal">--</span>密码至少要包含的小写字母个数和大写字母个数</span><br><span class="line"><span class="built_in">set</span> global validate_password.mixed_case_count=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="literal">--</span>密码至少要包含的数字个数。</span><br><span class="line"><span class="built_in">set</span> global validate_password.number_count=<span class="number">1</span>; </span><br><span class="line"></span><br><span class="line"><span class="literal">--</span>密码至少要包含的特殊字符数</span><br><span class="line"><span class="built_in">set</span> global validate_password.special_char_count=<span class="number">1</span>; </span><br><span class="line"></span><br><span class="line"><span class="literal">--</span> 密码长度</span><br><span class="line"><span class="built_in">set</span> global validate_password.length=<span class="number">8</span>;  </span><br></pre></td></tr></table></figure><h4 id="3-改完密码策略，就可以根据自己修改的策略，更改匹配策略的MySQL登录密码了">3.改完密码策略，就可以根据自己修改的策略，更改匹配策略的MySQL登录密码了</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">--</span>修改密码</span><br><span class="line">alter user <span class="string">&#x27;root&#x27;</span><span class="string">@&#x27;localhost&#x27; identified by &#x27;满足策略的密码&#x27;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">--按mysql_native_password加密方式修改密码</span></span><br><span class="line"><span class="string">alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified with mysql_native_password by &#x27;满足策略的密码&#x27;;</span></span><br></pre></td></tr></table></figure><h4 id="mysql8开启远程连接权限">mysql8开启远程连接权限</h4><p>1.查看当前系统的账户</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br><span class="line"><span class="section">mysql&gt; select host, user from user;</span></span><br><span class="line"><span class="section">+-----------+------------------+</span></span><br><span class="line"><span class="section">| host      | user             |</span></span><br><span class="line"><span class="section">+-----------+------------------+</span></span><br><span class="line">| localhost | debian-sys-maint |</span><br><span class="line">| localhost | mysql.infoschema |</span><br><span class="line">| localhost | mysql.session    |</span><br><span class="line">| localhost | mysql.sys        |</span><br><span class="line"><span class="section">| localhost | root             |</span></span><br><span class="line"><span class="section">+-----------+------------------+</span></span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>2.修改root账户可以远程访问</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> host=<span class="string">&#x27;%&#x27;</span> <span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="keyword">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">mysql&gt; flush <span class="keyword">privileges</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; flush <span class="keyword">privileges</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>3.查询是否修改成功</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">mysql&gt; select user,host from mysql.user;</span></span><br><span class="line"><span class="section">+------------------+-----------+</span></span><br><span class="line"><span class="section">| user             | host      |</span></span><br><span class="line"><span class="section">+------------------+-----------+</span></span><br><span class="line">| root             | %         |</span><br><span class="line">| debian-sys-maint | localhost |</span><br><span class="line">| mysql.infoschema | localhost |</span><br><span class="line">| mysql.session    | localhost |</span><br><span class="line"><span class="section">| mysql.sys        | localhost |</span></span><br><span class="line"><span class="section">+------------------+-----------+</span></span><br><span class="line">5 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>注意：root用户只能是唯一，否则会影响结果直至报错信息一直存在</p><h4 id="验证权限是否开启成功">验证权限是否开启成功</h4><table><thead><tr><th><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230719150936169.png" alt="image-20230719150936169"></th><th><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230719151001593.png" alt="image-20230719151001593"></th></tr></thead></table><h4 id="错误解决办法">错误解决办法</h4><p>在服务器中使用命令 <strong>vim /etc/mysql/mysql.conf.d/mysqld.cnf</strong> 打开mysqld.cnf文件。</p><p>输入 i 进入编辑模式，然后修改bind - address的值。<br>默认情况下， bind - address 的值为 127.0.0.1 ，现在给他改成0.0.0.0，允许所有IP访问。也可以输入指定ip。</p><table><thead><tr><th><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230719151113468.png" alt="image-20230719151113468"></th></tr></thead></table><p>这里重启一下mysql服务再尝试连接<br>使用命令 <strong>service mysql restart</strong></p><p>如果是云服务器记得打开安全组</p><h2 id="安装redis">安装redis</h2><table><thead><tr><th><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230729225936850.png" alt="image-20230729225936850"></th></tr></thead><tbody><tr><td>在redis.conf中搜索dae，将no修改为yes即可改为后台运行。</td></tr><tr><td>修改密码：在conf文件下修改require pass 123456；重启连接：<br /><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230729231211506.png" alt="image-20230729231211506"></td></tr><tr><td>默认不允许远程连接：<br />注释conf文件下的bind 127.0.0.1；重启redis。windows连接云服务器redis：<br /><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230729234019719.png" alt="image-20230729234019719"></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GIT教程笔记</title>
      <link href="/posts/efed5855.html"/>
      <url>/posts/efed5855.html</url>
      
        <content type="html"><![CDATA[<h1>GIT教程笔记</h1><hr><p><a href="https://www.bilibili.com/video/BV13a411q753?p=112&amp;vd_source=1aea9871e1065286efe559677df1eedf">配套视频教程</a>，教程偏向于日常常用的场景。</p><hr><h2 id="工作区、暂存区、版本库-概念">工作区、暂存区、版本库 概念</h2><img src="C:\Users\luo\AppData\Roaming\Typora\typora-user-images\image-20230718170924337.png" alt="image-20230718170924337" style="zoom:150%;" /><h2 id="获取GIT状态">获取GIT状态</h2><p><strong>git status</strong></p><p>工作区的两种状态：</p><p><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718171535039.png" alt="image-20230718171535039"></p><table><thead><tr><th style="text-align:center">tracked状态</th><th style="text-align:center">Untracked状态</th></tr></thead><tbody><tr><td style="text-align:center"><strong>stage状态</strong></td><td style="text-align:center"><strong>Untracked状态</strong></td></tr><tr><td style="text-align:center"><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718171425153.png" alt=""></td><td style="text-align:center"><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718171313380.png" alt="image-20230718171313380"></td></tr><tr><td style="text-align:center"><strong>红色modified状态</strong>：修改文件后未放入暂存区</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718172657501.png" alt="image-20230718172657501"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">**绿色modified状态：**修改文件后放入暂存区</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718172748719.png" alt="image-20230718172748719"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">如果你问Unmodified状态呢？那我只能告诉你，默认是Unmoified状态</td><td style="text-align:center"></td></tr></tbody></table><h2 id="本地仓库操作">本地仓库操作</h2><p><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718171730669.png" alt="image-20230718171730669"></p><p><strong>git reset</strong></p><table><thead><tr><th style="text-align:center">取消暂存</th><th style="text-align:center">切换到指定版本</th></tr></thead><tbody><tr><td style="text-align:center"><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718171941530.png" alt="image-20230718171941530"></td><td style="text-align:center"><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718172036450.png" alt=""></td></tr></tbody></table><p><strong>git commit</strong></p><p><strong>git log</strong></p><h2 id="远程仓库常用命令">远程仓库常用命令</h2><table><thead><tr><th><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718173902423.png" alt="image-20230718173902423"></th></tr></thead></table><p><strong>git remote</strong></p><table><thead><tr><th style="text-align:center">查看远程仓库</th><th style="text-align:center">设置远程仓库</th></tr></thead><tbody><tr><td style="text-align:center"><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718173943391.png" alt="image-20230718173943391"></td><td style="text-align:center"><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718174008055.png" alt=""></td></tr></tbody></table><p><strong>git pull</strong></p><blockquote><p>使用场景：多人合作</p></blockquote><table><thead><tr><th><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718174548392.png" alt="image-20230718174548392"></th><th></th></tr></thead><tbody><tr><td><img src="C:\Users\luo\AppData\Roaming\Typora\typora-user-images\image-20230718174556954.png" alt="image-20230718174556954" style="zoom:150%;" /></td><td><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718175331713.png" alt="image-20230718175331713"></td></tr><tr><td><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718175125263.png" alt="image-20230718175125263"></td><td><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718175425107.png" alt="image-20230718175425107"></td></tr></tbody></table><h2 id="分支操作">分支操作</h2><table><thead><tr><th><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718175506381.png" alt="image-20230718175506381"></th></tr></thead></table><p><strong>git branch</strong></p><table><thead><tr><th><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718224836158.png" alt="image-20230718224836158"></th></tr></thead></table><p><strong>git merge</strong> <strong>[name]</strong></p><p>将其他分支合并到==当前分支==</p><h3 id="合并时冲突解决">合并时冲突解决</h3><p>当两个文件不相同时，合并版本出现的问题：冲突</p><table><thead><tr><th><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718225640471.png" alt="image-20230718225640471"></th></tr></thead></table><p>以下是解决Git合并冲突的基本步骤：</p><ol><li><p><strong>定位冲突</strong>：Git会将冲突的部分标记出来，你可以通过运行 <code>git status</code> 来查看哪些文件包含冲突。</p></li><li><p><strong>解析冲突</strong>：在你的编辑器中打开这些文件，你会看到以下形式的冲突标记：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Copy code&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line"><span class="section">(你当前分支的更改)</span></span><br><span class="line"><span class="section">=======</span></span><br><span class="line">(你试图合并的分支的更改)</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; (你试图合并的分支的名字)</span><br></pre></td></tr></table></figure><p>你需要手动决定保留哪些更改，或者可能需要结合两个分支的更改。解决冲突后，你需要删除 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>， <code>=======</code> 和 <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> 这些标记。</p></li><li><p><strong>提交解决后的冲突</strong>：一旦你解决了所有冲突，你可以像平常那样添加和提交这些文件：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span> .</span><br><span class="line">git <span class="keyword">commit</span> -m &quot;手动解决冲突并合并分支&quot;</span><br></pre></td></tr></table></figure></li></ol><p>注意，尽管你可以直接在终端编辑器中解决冲突，但一些IDE和文本编辑器（如Visual Studio Code，IntelliJ IDEA等）提供了更用户友好的方式来解决冲突，例如图形化的合并冲突解决工具，它可以帮助你更清晰、更容易地理解和解决冲突。</p><p>遇到的问题</p><p>遇到错误：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal：cannot <span class="built_in">do</span> <span class="keyword">a</span> partial commit during <span class="keyword">a</span> <span class="built_in">merge</span></span><br></pre></td></tr></table></figure><p>解决办法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在命令后加上 -<span class="selector-tag">i</span>参数，比如：</span><br><span class="line">git commit -m &quot;手动解决冲突并合并分支&quot; b1<span class="selector-class">.txt</span> -<span class="selector-tag">i</span></span><br></pre></td></tr></table></figure><h2 id="标签">标签</h2><blockquote><p>标签是静态的，分支是动态的。</p></blockquote><table><thead><tr><th><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718231728145.png" alt="image-20230718231728145"></th></tr></thead></table><p><strong>检出标签</strong></p><p>检出标签后，会自动跳转到新创建分支中。</p><table><thead><tr><th><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718232115769.png" alt="image-20230718232115769"></th></tr></thead></table><h2 id="在IDEA中使用GIT">在IDEA中使用GIT</h2><h3 id="获取Git仓库">获取Git仓库</h3><table><thead><tr><th><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718233255564.png" alt="image-20230718233255564"></th></tr></thead></table><h3 id="本地仓库操作-2">本地仓库操作</h3><table><thead><tr><th><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718234012088.png" alt=""></th></tr></thead><tbody><tr><td><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718234117075.png" alt="image-20230718234117075"></td></tr></tbody></table><h3 id="远程处理操作">远程处理操作</h3><table><thead><tr><th><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718234200211.png" alt="image-20230718234200211"></th></tr></thead></table><table><thead><tr><th>查看仓库<img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718234720851.png" alt="image-20230718234720851"></th><th>推送仓库<img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718234750474.png" alt="image-20230718234750474"></th><th>代码<img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718234829913.png" alt="image-20230718234829913"></th></tr></thead></table><h3 id="分支操作-2">分支操作</h3><table><thead><tr><th><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718234934641.png" alt="image-20230718234934641"></th><th><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230718235432336.png" alt="image-20230718235432336"></th></tr></thead></table>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>世界上只有一种真正的英雄主义，那就是在看清生活的真相后依然热爱生活</title>
      <link href="/posts/61a1b694.html"/>
      <url>/posts/61a1b694.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试!" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="8ee311d49aa35637229a5bd3e2e678d8eb98a4f620c0253b4485167988a0123e">2f36f3754ac39f008e9ddc38ce41105c5ca2a91ea8abb415fd42c284bd4da71d49112e1b39032be4904b3d3299fa80cc37c2aaf774edff31592ac16a8ede23298903f118f9038a7d2c9e6439bdad119dd0be48cbd3092f8a98d392370bb99eb33a90943a73a15acc2dc2b56b4d8528badbec6d086e7ed9774971e592f58669e6471318595866fed911ae5f7044b21b1d57219bbc21a39092ac492fb8b8f72f9948b039a29100ad5998d85331b4c57e37e71fd223bb8135f1ebccdd8aeb115171e0a8df4a2d7b8a793d7590c4c2226499293f81143d60975f829d7c91ef3b54121513f6bea57c71755ddfcbe820e717892595442ab1161618b72e01a81c6294498f158e4d034b1380ce5529a9e538f2aac87fdcd81ec122abb4d145616b9efb91531591731c73c4deb5f2ba93b36003488bb927ba024e960a1685abe90830263f32bd4b624cccf42f26721121eb3ffa161b23b0175fbe771eefc28e9287d6d55470f59a1640aa15cfa8c98e5c6023003666251aa981826c87e78d369779abdcaa16de3608844eaaa8c550804ec4a2fb3c1c9490853b5ed2d84fea1138bb9e1a9df3efb1818d17b740c2d0b7af20a7063ef453e3a91f3915fac77d1c3f5b896228a219f33e0fdce7f4d5adbaa83e43a470e3871bb8d721b5161c11d3522b49e9ab15d8850e1e6e934fa1860cdf317455016512c17925d9c6e9b2f2565bc0ada1587d05fec27ad807632f9739fe5072ac0d0c390a4ccc8edc33aabde433b477ec463ddfda95440411c9c2cd090b4dd04a927fb425b1c9526108341f77b114ff5f5199f522186af133f2167dfbf8b20f21d2d7b2850dd2e7110a8b830c6913a73c479e9a014a6b32b3bcd15f4e526397d1bb2f667a6c2343b6e24307260fad7d1a6436a44328d6fc98112af3300b6d9e7e1a46521699e716f07c00fd4600291c762b0586f5dc23fcfa7f891f9fcd73a03e312f2635f13e16e52f9af92e7951267f1845da456c9ee79b7fe1faa970af4d6c9586ef7d2e5906f7726f1f2d0e79748fcee2bfe052c1a9a487b70d8de87a5eafb3e2d63fc4f9f85dcecbe526898c3810ba047a173391396ccdf09741ba6d4eb903f6857688c2ec205c5fbcfe0cd8047e34cc0f05a53a8c9b14449ce8b1f0cace17526a0c6a2231279bd6b361c7498484a3c627253aac29433c5692c69828784ada87afd9bfee5ebb26fd073c38b98fd09eda12fb6b4545cc65f3bc749769f7eb619d606f2d3f6a6ae6d53ac6df1d6c5628b8e1e6ee0c793a5a57402026d93a52062e9ea60ce03553b0bd140ca2a8ba8f4e4a27f1648df2c1705842baf17f2fb5a75c4f03581470686df0a93d1be23e26045e05ee1d77f7ed5d3c6efad62df67a74447aca72c29b96398497e22dd1666a2165f5ef1b5ad57215e092b675cbfbc4310afef34ca1de3f2be4dc50ac5bdc2268a5a7fa7f2266529804afe8e2869fb303dc1e8725049fcb8be5038a59c1cd602b50a4244412cfd3f3da02d37cfb1a9505354d91cf7d9bf3b64aea86026c724577c8b0c1eee14748dad4479ea629d8b65dfd30b1fdac74fcd66b88f48f91513fb4393bcc415c1350bf430ecd1bc3a5022a231f3b5e5affe754c86d53925a0bc72c730202696576dee7855bf889a231bed76c11ede5ebb4447ef10bda210b1ee3f5671ef638693c0ec975fbfd0df2f930d3a7d36160f8aa544d6862cda6b7b9414d6b724c8f4e454c1f3e41407882d32a5262a768cc71d3f357932aa64e963c947f294292308ae495eb77bbba8565ed299a8756cdecf16a8b75676ddd6a4998218c9d18c3101e44f6ebf28949f8a34644648bfa29aacef78524c4e4d485d6a6503f148c633e4d7c02a8d013ae0a0e2b8d84413209bdb1450f41fb63f3c573454f16f75b2d2ea13d7b83bdf8a961d312c1073b174faf392898b1fc519f1331f127ac1267621855836b19bd78ff1fbe794d3ab23e16a6454715e062d92fc92c4124f7ab123ab0c39f2b07eeed9f88d6fab589ed3f916c2fa6416b8be24ce7e0bbea8bf83317c40ee5e58305ea0ad283464fefff77583e350410a0345b3a935bded60de125f7c7db58f87ccd343728ce2b5ecbd4e439e89dde74e49fd1ef8e1b4d8a0118f79e6325b25ad46a799b511dd4c02634bb84e644283a9988744c8c9d75fb099fc903864a1b5ef2ab027281d16e768c806c5f356d593b8deb5018bd79a91f504c33866019be1ece31bc8aa16c80372ff7599d58a8752f8a1459ff244a302be768633335bbf8fd9260c457154fea7e19c18c03609d54e0287bd87a3cb441b0eae5a8c9b8b82c7acf3cd8928bf3c4578631250c11e2e43db5f21754550edec8b5f70c4736b6a06f9258955351d10f0990</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">比较隐私的东西，需要密码才能进入!</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>想多了全是问题，做多了全是答案</title>
      <link href="/posts/61a1b694.html"/>
      <url>/posts/61a1b694.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试!" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="99ea8e3fc3d9a257818e504c502f46e04f05283fdd9db9a3d50db493faa58b57">2f36f3754ac39f008e9ddc38ce41105c9f47668749d2089c18905d3b5fef706b6710ebc104c05341e15d6a808b77d63823640ae36c9fbbe837a3f643fab8623844bb01a9885b55ac534fcc72888a65fc9b12eb3eb76f42dce705b80be467ddff9ed4cf47655813faa50471693dc085cd7690bcd16bec6ea8bc9ace2e13fc02f7789edfd9f9981892ce6d9693c42843c36f70957cf4f4524f3a6b2c81a44b8049ec9a5dc830c82c37a991b4cdccada0b863e5d9cb25b74f40de2dab2ab15fc3025ea90c35fa7640986440dea68db740973b18584b9989649e077724406589654228b7d1d2fb981e8388dda84f07c61a03ca1df0562fde4f760fe5bbf6201421758279f062870172ddf18b0eacd704da281d4f0ea63ed7b42c77c25a20370ebac5568dbf28648624aa0637e58fe590ac013c60ded0402b0dad05fd580267d018175d97dd18a5f50bbb650525764baf0a834bc305b47de1b22f16038034d39760fc9dfd7c8b94053b213828c05edaeaafbbc5f827dba441b6fe20dc06a0252bfce89d68b7162913af7fb80caa2a52142fc22a7bc6053ce800c7d67cb642b942adf0408086b4128a92b349eb59085bb55d4be14d87c761e5e131274ce54ba3b48ade43141e7fc3b4ac341f83d26fcc6de76d6b1b94aef7f124ae157135a02c11e7692f1d4ddde94245d133b51fb2f68f2cfe6031af21decd3a73716e7c40a4e52f1f3042ed29dda529f016c584c4f18eb42a9a8b3d2886ce11bd5c6a220adde9578ad9199e2f152a5b931a144ae1f067cf8214788509d7ea0ed550a0a5427216d6a7c95e796b38a64e863189e27fc76f926e6870c675616920f53e586dfbec38ddf22a2b3094bfeb74988cec9f4bce5a0ab08ebaf5aa138ceac41dd9d929b66099acba2659fd8d7c821d68a817d98d1d7413f0ae4441f00fdfe238e2506a442ff68bd06cebe853ae964091e96e151439191564a2575a6fb52b94ac6afcd14d9abb425ec91f6879968d85feb438d274c659c548ab1e00ad2c62a6c2bd2fc2dd9775e03885a8b938faf6fb6cf1d1de0dfae92c3981b803e84ece922aee81ec202f9550c2cd16d8f7605cbaa37a17c4a022a4761723b8a4f3913587ee8a6d68ed94c37a91af9868570f14a340d417f71ee22fc83aa6ef558dc45427ae03ad0c2991af7575d0cf042e66780572df04146a719e442f1b81016907eb77f3b4797ffea6e83f3bcb75b062dc2cc08d79a52bd13f736e584b598d0b7ffaa2b978c56c0fb01c7454e74c2b66a9ff15b6698469dd59122a00c4b2047d507f1e6414d13e861feb770520923d7ba0f5669df406a7f8264c6ae9eeea26bf3c1e1bb6dde84768c7bb8e8e4339c0ff74febe4715f9f0c7fb63477d40e9ff6510b603c62ce9258620c0ed3e0f42b5a21247835c80afe241149220c06539cdc6454e3db63b2af4e3d0060bc07bbe70e7510cce88325d220c15bba3aa91bf4f35adcab7074b45b019682f716045b45e78c8e71173c12d9a2ce0884c1f4893ada4432cd5ef43bf0cdd987817017d96f30d44f619594f219d0e5c743ea43219795c5bb8a340ba2a7dad916d2e7ec4bd0bd0b9beaae58fa08c5b3ec76bcbabb4c986f63bb238026f7ba9013aa3ef3f47047241e84fcfdb7980cc5addc12544a3a1ac0b6ef5acea570b7f409b0c6aab6582293fa1d4c7c53ef9591f4b6f4cbfd06344994cdd0c047b846b1605a88c81591b2c5e9a79a1a56ca5d163020dd839b4400e3f28a80496d053a73d5fdc5790ef212faa0a6904d860ea86e20b51e7c5f48b04e634b7db3f57b48589effaaf9d37bfd1333ead6ae01276e46aea00735e8d38de3ef98a4fe116d6f5e105b0ec6a6b2652e129cd92f7a47121d1a4a726d709dd84fd7c74c25430959d82bfc6cb74153bb7b4c507c132b9ab64a5954ab741eabb7701d220438ef8cc90fcdab1c6d7c771b021fd07113a820e74fc77e14bf03cf81291d3af0d8370ad25221aeba1558e6ef2ac8df207da899f63edd488efb0f0db77943887fb558bb87ef3b3d39a6cc8eeb8d0bef9f0d07ab5de7035518a540e90d1d83d262518d10db6bc10fe150e093c37525a809ffa60053287dbdf3cb102244c6ac830dfa197fe7bec2b10c605515be662f2a05edd948c4ef03a5a671b24a6c02843cd3678c473150f971af64d90aed77bd8b6d254eddd1ff83dadcd6b47c19e98ceddca9437d570cd0b48f60d075a21351163a8659bd0e89cc1255375a09ea587f779a7f87f9f17734b3e33d72a4cae9b7277a90455a56b681129aa8185ef514ee89565e7eddbbeee77a4521f1477b147f8e326b44d10ec540e4efccaeee9c15f8449d3fdecd245f8ce22daa405e6a36ee3556fa49bbb145c0db70f23d66bc1155c05b1e135a9868195a03abda9fad576318cb727397fbf4a6db5122f8457e8d059c1da605dc5bcb02483beda6ef9454758131f0b8ae70bbada3825d7cb9206533d2aaf4e1167884233715bb87dece103d6d052ad352afcd538cbf6c473fa47ce6a17144db97f075f176c6aeb871eddb03f5564fd817e434ab643cd0a6a799de9cb0b0081a1de03b2e7cb556f7f5ae82d9781cdc7e364119c492a4a3d4b3aa91eb096398585bf6f8c6d82b86eacabae6ce5fa0a95f5492d0dcff87d9316b887478e8475053f2afafd9be3917949707b6533a7d880682d779cf16e86cfdc66f721e526c9901f3f228664cba76b0523c1a156acfe0b959d83ed8dbde3404cc0cf78fc07390c161f0eb43326a9e85b5f28e35b2d308a592f439377e6928b6fb0db540ae5ab9d67c80e986340577444ce5f0dae127e55b1c0785e0eebdffa7c73902def54d4a5297d9841e6e611332b450492b7131d18630cba6e1f1fe2bb0af554ea75ed44a7d64ed4c84f84a9effe66260f5f2e4b22b25b22641f25e15503e6af1277002186b67358a6f8b778c8bc3ab64098701e272666c46eb827b43914de5fa8d2c960c04232de6d7ff3f756f00eded81a2e602b1772b2742c4aeb509edbb97bdafd420d43f4c88ff1e01fea24a17c58282ec766a1b94b5b6729e67837ff0b73ab66cdb3271ea2290ffc551a4e0e6d74620bef9cb5c0f834866ab22606559cab987debd6655e9da71eaf1102677c5ed39bc8263e0aecf9104c88f763bdd807b9f9bf68072eacfaf8a90cd3de0c7751c02a6eacec0b6f46d6a0b9e01cd32cf18db7b8a49f54fb7de741b92ed66f998506d1e9948e6e5003e182a4af9db52406d537c1b3d035478489117e506f0de22151940119b8c5370d48ada53e69edcf9467194cb22ab3397b30e3611d6d3744b69a320534d4a7e51f59a624cc9e0290f4f5373c12b47093cf519fc235d312346a64f8beca9aae8f9e39cc8063bd7c87d0cf320da3d99711886482e74f409dfc84f93a1f6cc9e9cab3565b696d1003171cee6839e1f97dfb05ae9db43ec90b38bab471cb5ef679b5f4e399028f2e551fdadc10c09878b3945f269e608f9b7ea3aea2b1d3aa4a817cba950123ddf1ef97fa15fe915b59f0cd175a65615574438265c1a85e21719e6a7ac77e58adbf2debaeb76b77ef61d443058ab882</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">比较隐私的东西，需要密码才能进入!</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WIN11如何使用Outlook管理邮箱</title>
      <link href="/posts/352556f9.html"/>
      <url>/posts/352556f9.html</url>
      
        <content type="html"><![CDATA[<h1>WIN11如何使用Outlook管理邮箱</h1><blockquote><p>平时接收邮箱都是在网页端登录，这样不方便且没有提示。</p><p>之后我看到可以使用windows mail管理，但是也没有提示，所以我转向使用outlook了，先说优点：有提示音。</p><p>缺点：最小化托管功能局限。</p></blockquote><h2 id="1、添加账户">1、添加账户</h2><table><thead><tr><th><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230710093018665.png" alt="image-20230710093018665"></th></tr></thead></table><h2 id="2、输入账号并手动设置">2、输入账号并手动设置</h2><table><thead><tr><th><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230710093109447.png" alt=""></th></tr></thead></table><p>3、选择IMAP协议</p><table><thead><tr><th><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230710093316697.png" alt="image-20230710093316697"></th></tr></thead></table><p>4、输入密码，==注意是IMAP的密钥==，不是邮件的密码</p><table><thead><tr><th><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230710093356546.png" alt="image-20230710093356546"></th></tr></thead></table><p>5、获取密钥在你的邮件设置中可以找到</p>]]></content>
      
      
      <categories>
          
          <category> outlook </category>
          
      </categories>
      
      
        <tags>
            
            <tag> outlook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.7 - 7.8 武功山旅行日记</title>
      <link href="/posts/79f8df14.html"/>
      <url>/posts/79f8df14.html</url>
      
        <content type="html"><![CDATA[<h1>7.7 - 7.8 武功山旅行日记</h1><blockquote><p>往返火车票</p><table><thead><tr><th><img src="https://s2.loli.net/2023/07/08/PY5zjfo8edZixhG.png" alt="IMG_4778.png"></th><th><img src="https://s2.loli.net/2023/07/08/wKYiHdM9mN1ynuA.png" alt="IMG_4779.png"></th></tr></thead></table><p>火车4点到萍乡，从萍乡坐的士大约一个小时到游客中心，这里的司机不得不说开的飞快，没有安全感，甚至违反交通，还有带我们去贵的超市买东西- _ -。到了游客中心，我们买了票，坐了免费的游客大巴到山脚下，山脚下的紫玲：</p><p><img src="https://s2.loli.net/2023/07/08/T5mtsLpjlE3UzN8.jpg" alt="IMG_4663.jpeg"></p><p>我们带了很多东西，负重前行，从山脚爬到一级索道用时3个小时（17：00 - 20：00），并看到了日落，两个人比了个耶：</p><p><img src="https://s2.loli.net/2023/07/08/yQwM9g2v4YWTSOj.jpg" alt="IMG_4675.jpeg"></p><iframe src="//player.bilibili.com/player.html?aid=615745337&bvid=BV16h4y1E7kG&cid=1189838338&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>到了一级索道，我们已经累趴下了，所以我们打算休整一下，等到凌晨2-3点再爬，这是我们的休整点：</p><p><img src="https://s2.loli.net/2023/07/08/IRzrAXo6KhDncTN.jpg" alt="IMG_4704.jpeg"></p><p>到了凌晨2：30，我们开始往上爬啦！</p><table><thead><tr><th><img src="https://s2.loli.net/2023/07/08/CK7PuZQtM9WwY5c.jpg" alt="IMG_4712.jpeg"></th><th><img src="https://s2.loli.net/2023/07/08/BDCJ8hbl5dsAKyQ.jpg" alt="IMG_4715.jpeg"></th></tr></thead></table><p>经过千辛万苦的两个半小时，我们终于到了金顶！找了一个位置坐着拍了日出：</p><table><thead><tr><th><img src="https://s2.loli.net/2023/07/08/ldQ3mivGMK51IhH.jpg" alt="20230708233746.jpg"></th><th><img src="https://s2.loli.net/2023/07/08/gtfNbS3CdrpB1TY.jpg" alt="20230708233735.jpg"></th></tr></thead></table><p>同时，我们也看到了云海！</p><table><thead><tr><th><img src="https://s2.loli.net/2023/07/08/gd5C4aS81FyQqwJ.jpg" alt="20230708233751.jpg"></th><th><img src="https://s2.loli.net/2023/07/08/zADCxWkmBh1O3Vn.jpg" alt="20230708233754.jpg"></th></tr></thead></table><p>我们真的是太幸运了，什么都看到了，也为我们在一起的第一次加上了浓厚的一笔！</p><p>结尾不得不吐槽一下，上山容易下山难，从山上抖到山下，下山比上山慢…</p><p>最终，我与紫玲达成协议，以后不爬这么高的山了，实在是太累了…</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 游玩日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游玩日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用visa开通chatgpt plus详细教程</title>
      <link href="/posts/19b87fe5.html"/>
      <url>/posts/19b87fe5.html</url>
      
        <content type="html"><![CDATA[<h1>使用visa开通chatgpt plus详细教程</h1><p>开通chatgpt plus 有很多种途径，国内使用visa虽然不是最省钱的方法，但是相较于其他方式（礼品卡、其他卡）较为方便。费用大概在20多刀（有开卡费1.5刀，会员费20刀），接下来就一起学习如何使用visa开通chatgpt plus吧，希望这篇教程帮助到您。</p><h2 id="1、首先你得开通chatgpt账号。">1、首先你得开通chatgpt账号。</h2><p>在我博客中有教程：  <a href="https://qzl.luoxiaohei.fun/posts/8b3c5d64.html">ChatGPT账号注册教程，详细版！</a></p><h2 id="2、注册visa卡">2、注册visa卡</h2><p><a href="https://www.limaopay.com/register/#/register?codes=TgFiUxs5">开通visa卡</a></p><p>输入自己的信息，注册成功后需要联系官方客服帮你审核，你只需要告诉她你开卡的途径就可以了，客服微信：Limaopay</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230704083527948.png" alt="image-20230704083527948"></p><h2 id="3、充值、买卡">3、充值、买卡</h2><p>第一步</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230704083819128.png" alt="image-20230704083819128"></p><p>第二步，充值</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230704084020232.png" alt="image-20230704084020232"></p><p>第三步</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230704084045204.png" alt="image-20230704084045204"></p><p>第四步，买卡</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230704084207422.png" alt="image-20230704084207422"></p><p>第五步</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230704084249225.png" alt="image-20230704084249225"></p><p>第六步</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230704084309018.png" alt="image-20230704084309018"></p><p>第七步，查看visa卡信息</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230704084443489.png" alt="image-20230704084443489"></p><h2 id="visa卡已经开通成功，接下来就是开通chatgpt-plus了。">visa卡已经开通成功，接下来就是开通chatgpt plus了。</h2><p>第一步，去<a href="https://chat.openai.com/">官网</a>，登录账号后点击升级。</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230704085232911.png" alt="image-20230704085232911"></p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230704085246156.png" alt="image-20230704085246156"></p><p>第二步，填写信息</p><p>地址：5 W 5th St Room 34027 ， 城市州：Los Angeles ， 邮编<strong>90013</strong></p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230704085625891.png" alt="image-20230704085625891"></p><p>第三步，点击订阅，到此您的plus就成功开通了。</p><hr><p>错误总汇</p><p>1、您的卡已被拒绝</p><p>​解决方案：</p><p>​1、检查你的卡号信息、安全码、截止日期，姓名，地址等信息。</p><p>​2、换vpn，开无痕模式</p><p>​通常上面方案即可解决，如果上面两种方案您都试了，但没用。最后一种百分比成功方案就是在苹果手机上下载chatgpt，在苹果手机chatgpt里面填写卡号信息并订阅，这需要您有苹果手机并且是境外appleID。</p><p>​如果您没有境外appleID或则没有苹果手机，可以找我帮忙开通，微信：lh18779121256</p>]]></content>
      
      
      <categories>
          
          <category> chatgpt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chatgpt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WINDOWS11 局域网服务器注意事项</title>
      <link href="/posts/7e96c274.html"/>
      <url>/posts/7e96c274.html</url>
      
        <content type="html"><![CDATA[<h1>WINDOWS11 局域网服务器注意事项</h1><p>1、WINDOWS防火墙终究还是太厉害了，如果是本地的服务器开启了防火墙，那么就算你服务器电脑在监听着这个端口，那么也会被防火墙阻止。</p><blockquote><p>所以，想要本地服务器能被访问，不止能ping通ip地址，还需要服务器监听指定端口，还需要防火墙不阻止端口。三者缺一不可。</p><p>如何查看服务器是非监听指定端口：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano | <span class="built_in">find</span> &quot;PortNumber&quot; | <span class="built_in">find</span> &quot;LISTENING&quot;</span><br></pre></td></tr></table></figure><p>如何查看防火墙是否住址端口：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh firewall show state</span><br></pre></td></tr></table></figure><p>打开一个被阻止的端口：</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230614195104679.png" alt="image-20230614195104679"></p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230614195209768.png" alt="image-20230614195209768"></p><p>==之后选择要打开的端口即可，像这样==</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230614195326061.png" alt="image-20230614195326061"></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 内网服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建动态博客Halo</title>
      <link href="/posts/270caacd.html"/>
      <url>/posts/270caacd.html</url>
      
        <content type="html"><![CDATA[<h1>搭建动态博客Halo</h1><h2 id="在线体验">在线体验</h2><ul><li>环境地址：<a href="https://demo.halo.run/">https://demo.halo.run</a></li><li>后台地址：<a href="https://demo.halo.run/console">https://demo.halo.run/console</a></li><li>用户名：<code>demo</code></li><li>密码：<code>P@ssw0rd123..</code></li></ul><h2 id="搭建环境">搭建环境</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>云服务器，Linux系统（Ubuntu、centOS）</span><br><span class="line"><span class="bullet">- </span>安装好 Docker、Docker-compose</span><br><span class="line"><span class="bullet">- </span>安装好mysql、Nginx等环境（面板安装）</span><br></pre></td></tr></table></figure><h2 id="搭建方式">搭建方式</h2><p>云服务器+docker+mysql</p><ul><li><p>1、购买云服务器之后，首先开启面板和halo默认端口</p></li><li><p>2、连接云服务器安装docker和docker-compose</p></li><li><p>3、创建安装目录，使用配置文件配置仓库</p></li><li><p>4、启动</p></li></ul><h2 id="搭建步骤">搭建步骤</h2><h3 id="1、购买服务器">1、购买服务器</h3><h3 id="2、安装docker和docker-compose">2、安装docker和docker-compose</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//docker</span><br><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br><span class="line"></span><br><span class="line">docker -v  <span class="comment">#查看 docker 版本</span></span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> docker  <span class="comment"># 设置开机自动启动</span></span><br><span class="line"></span><br><span class="line">//docker-compose</span><br><span class="line"></span><br><span class="line">apt  install docker-compose</span><br></pre></td></tr></table></figure><h3 id="3、创建安装目录，使用配置文件配置仓库">3、创建安装目录，使用配置文件配置仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /root/data/docker_data/halo</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root/data/docker_data/halo</span><br><span class="line"></span><br><span class="line">vi docker-compose.yml</span><br></pre></td></tr></table></figure><p>输入下面配置项</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">halo:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">halohub/halo:2.6.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">halo</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">on-failure:3</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="attr">halodb:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">service_healthy</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">halo_network:</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./:/root/.halo2</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8090:8090&quot;</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--spring.r2dbc.url=r2dbc:pool:mysql://halodb:3306/halo</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--spring.r2dbc.username=root</span></span><br><span class="line">      <span class="comment"># MySQL 的密码，请保证与下方 MYSQL_ROOT_PASSWORD 的变量值一致。</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--spring.r2dbc.password=o#DwN&amp;JSa56</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--spring.sql.init.platform=mysql</span></span><br><span class="line">      <span class="comment"># 外部访问地址，请根据实际需要修改</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--halo.external-url=http://localhost:8090/</span></span><br><span class="line">      <span class="comment"># 初始化的超级管理员用户名</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--halo.security.initializer.superadminusername=admin</span></span><br><span class="line">      <span class="comment"># 初始化的超级管理员密码</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--halo.security.initializer.superadminpassword=P@88w0rd</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">halodb:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.0.31</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">halodb</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">on-failure:3</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">halo_network:</span></span><br><span class="line">    <span class="attr">command:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">--default-authentication-plugin=mysql_native_password</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--character-set-server=utf8mb4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--collation-server=utf8mb4_general_ci</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--explicit_defaults_for_timestamp=true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mysql:/var/lib/mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mysqlBackup:/data/mysqlBackup</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306&quot;</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;mysqladmin&quot;</span>, <span class="string">&quot;ping&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;--silent&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">3s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">start_period:</span> <span class="string">30s</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment"># 请修改此密码，并对应修改上方 Halo 服务的 SPRING_R2DBC_PASSWORD 变量值</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=o#DwN&amp;JSa56</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=halo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">halo_network:</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4、启动</p><p>查看我们端口是否被占用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:8090</span><br></pre></td></tr></table></figure><p>启动项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/halo    <span class="comment"># 来到 dockercompose 文件所在的文件夹下</span></span><br><span class="line"></span><br><span class="line">docker-compose up -d </span><br></pre></td></tr></table></figure><p>现在我们就可以输入IP+8090 访问安装博客了</p><p>5、其他</p><p>后面的绑定域名、使用插件、跟换主题都可以使你的博客变得美观且易用。</p><p>比如安装一个模仿hexo中butterfly主题作为演示。</p><hr><p>删除docker-compose</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> pkg <span class="keyword">in</span> docker.io docker-doc docker-compose podman-docker containerd runc; <span class="keyword">do</span> sudo apt-<span class="built_in">get</span> <span class="built_in">remove</span> <span class="variable">$pkg</span>; done</span><br></pre></td></tr></table></figure><p>卸载dalo</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd <span class="regexp">/root/</span>data<span class="regexp">/docker_data/</span>halo</span><br><span class="line"></span><br><span class="line">docker-compose down</span><br><span class="line"></span><br><span class="line">cd ..</span><br><span class="line"></span><br><span class="line">rm -rf <span class="regexp">/root/</span>data<span class="regexp">/docker_data/</span>halo  <span class="comment"># 完全删除映射到本地的数据</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客、Halo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用局域网实现iphone和windows文件互传||不再使用qq微信传文件</title>
      <link href="/posts/a89916b1.html"/>
      <url>/posts/a89916b1.html</url>
      
        <content type="html"><![CDATA[<p>遇到的bug：</p><h1>内容不可用无法显示文件夹内容</h1><p>出错原因是啥不知道</p><p>解决办法：删除链接的服务器然后重新连接。</p><p>共享文件夹方法：</p><h6 id="1、在-Windows-电脑新建一个文件夹，右击「属性」，选择「共享」选项卡。">1、在 Windows 电脑新建一个文件夹，右击「属性」，选择「共享」选项卡。</h6><p><img src="https://pic4.zhimg.com/80/v2-712d2769bf193c7a3b92f5639ba6d2d7_720w.jpg" alt="img"></p><h6 id="2、点击「高级共享」，在弹出窗口中勾选「共享此文件夹」，点击「权限」">2、点击「高级共享」，在弹出窗口中勾选「共享此文件夹」，点击「权限」</h6><p><img src="https://pic1.zhimg.com/80/v2-669f23527c738dd93f23f6bb82967568_720w.jpg" alt="img"></p><p>3、在新打开的「权限」窗口中选中 「Everyone」，在「Everyone」下方勾选「完全控制」选项。</p><p><img src="https://pic4.zhimg.com/80/v2-131545f3e481709230b2b2d74fc8a2a7_720w.jpg" alt="img"></p><p>4、回到最开始的「属性」窗口，点击「共享」，在弹出的「网络访问」窗口，选择「Everyone」后，点击「添加」。</p><p><img src="https://pic4.zhimg.com/80/v2-2e4f68e3b5d0a93cd4923305520b2aef_720w.jpg" alt="img"></p><p>5、添加了 Everyone 用户后，将文件夹的权限改为「读取/写入」，点击右下角的「共享」。</p><p><img src="https://pic1.zhimg.com/80/v2-eadec0f44566d1b5490613e2661df6a8_720w.jpg" alt="img"></p><p>6、查看自己的ipv4地址。用手机文件app连接到该ip，输入用户名和密码，即可共享此文件。<img src="https://pic1.zhimg.com/80/v2-3909bf6dd6e6fece8e77c2ede991eba0_720w.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-707141eb32295cc607880e44095636f4_720w.jpg" alt="img"></p><p>注意：名称：29133密码：luohao123…</p>]]></content>
      
      
      <categories>
          
          <category> 电脑使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows使用技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<hr><p>title: 力扣hot100–002<br>date: 2022-5-19 18：02：23<br>tags: c++、算法<br>categories: 算法题<br>cover: ‘<a href="https://s2.loli.net/2023/06/05/3Xb2OHjnB7wTkds.jpg">https://s2.loli.net/2023/06/05/3Xb2OHjnB7wTkds.jpg</a>’<br>abbrlink: 3f31bd15<br>​—</p><h1><a href="https://leetcode.cn/problems/add-two-numbers/">2. 两数相加</a></h1><h1>题目描述</h1><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><mark class="hl-label red">eg：</mark> <figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = <span class="comment">[2,4,3]</span>, l2 = <span class="comment">[5,6,4]</span></span><br><span class="line">输出：<span class="comment">[7,0,8]</span></span><br><span class="line">解释：342 + 465 = 807.</span><br></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [<span class="number">9,9,9,9</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>], l2 = [<span class="number">9,9,9,9</span>]</span><br><span class="line">输出：[<span class="number">8,9,9,9</span>,<span class="number">0,0,0,1</span>]</span><br></pre></td></tr></table></figure><h1>解决思路</h1><p>将两个链表看成是相同长度的进行遍历，如果一个链表较短则在前面补 0，比如 <code>987 + 23 = 987 + 023 = 1010</code></p><p>小技巧：对于链表问题，返回结果为头结点时，通常需要先初始化一个<mark class="hl-label blue">预先指针pre</mark> ，该指针的下一个节点指向真正的头结点head。使用预先指针的目的在于链表初始化时无可用节点值，而且链表构造过程需要指针移动，进而会导致头指针丢失，无法返回结果。</p><p><strong>过程如图所示：</strong></p><mark class="hl-label pink">1、初始化</mark> <img src="https://s2.loli.net/2022/05/19/xaudLjwIZAX1DOU.png" style="zoom:50%;" /><mark class="hl-label pink">2、过程</mark> <img src="https://s2.loli.net/2022/05/19/SOIz7tjnEhuqxXg.png" style="zoom:50%;" /><mark class="hl-label pink">3、结果</mark> <img src="https://s2.loli.net/2022/05/19/28JXya1KdxwNUec.png" style="zoom:50%;" /><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode* pre = <span class="keyword">new</span> <span class="built_in">ListNode</span>(); <span class="comment">//初始化预先指针</span></span><br><span class="line">        ListNode* nex = pre; <span class="comment">//设置移动指针</span></span><br><span class="line">        <span class="type">int</span> tag = <span class="number">0</span>; <span class="comment">//进位标志位</span></span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="literal">nullptr</span> || l2 != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="type">int</span> x = l1 == <span class="literal">nullptr</span> ? <span class="number">0</span> : l1-&gt;val;</span><br><span class="line">            <span class="type">int</span> y = l2 == <span class="literal">nullptr</span> ? <span class="number">0</span> : l2-&gt;val;</span><br><span class="line">            <span class="type">int</span> sum = x + y + tag;</span><br><span class="line">            tag = sum / <span class="number">10</span>;</span><br><span class="line">            sum = sum % <span class="number">10</span>;</span><br><span class="line">            nex-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(sum);</span><br><span class="line">            nex = nex-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(l1 != <span class="literal">nullptr</span>)</span><br><span class="line">                l1 = l1-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(l2 != <span class="literal">nullptr</span>)</span><br><span class="line">                l2 = l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">             <span class="keyword">if</span>(tag == <span class="number">1</span>)&#123;  <span class="comment">// 考虑最后的进位1</span></span><br><span class="line">            nex-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(tag);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> pre-&gt;next;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="c-结构体">c++结构体</h2><p>相关操作及注意事项：</p><h5 id="定义结构体">定义结构体</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">My</span>&#123;</span><br><span class="line">    My *left;</span><br><span class="line">    My *right;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    <span class="built_in">My</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">My</span>(<span class="type">int</span> val):<span class="built_in">left</span>(<span class="literal">NULL</span>),<span class="built_in">right</span>(<span class="literal">NULL</span>),<span class="built_in">val</span>(val)&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="访问结构体元素">访问结构体元素</h5><p>结构体中的变量，可以直接通过<mark class="hl-label pink">点操作符</mark> 来访问。</p><p>而对于结构体指针而言：必须通过<mark class="hl-label pink">->符号</mark> 来访问指针所指结构体的变量。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    My m;</span><br><span class="line">    m.val = <span class="number">1</span>;</span><br><span class="line">    My *mm;</span><br><span class="line">    mm = &amp;m;</span><br><span class="line">    cout&lt;&lt;mm-&gt;val&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意事项">注意事项</h2><p>声明一个结构体指针记得初始化，一定要初始化，不初始化会出事（重要的事情说三遍）下面代码就会报错，没有初始化。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    My *m;</span><br><span class="line">    m-&gt;val = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用new申请了内存空间。问题即可解决。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    My *m;</span><br><span class="line">    m = <span class="keyword">new</span> <span class="built_in">My</span>(<span class="number">3</span>);</span><br><span class="line">    m-&gt;val = <span class="number">4</span>;</span><br><span class="line">    cout&lt;&lt;m-&gt;val&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>力扣hot100--031 下一个排列</title>
      <link href="/posts/82686913.html"/>
      <url>/posts/82686913.html</url>
      
        <content type="html"><![CDATA[<h2 id="31-下一个排列"><a href="https://leetcode.cn/problems/next-permutation/">31. 下一个排列</a></h2><h2 id="题目描述">题目描述</h2><p>整数数组的一个 排列  就是将其所有成员以序列或线性顺序排列。</p><p>例如，arr = [1,2,3] ，以下这些都可以视作 arr 的排列：[1,2,3]、[1,3,2]、[3,1,2]、[2,3,1] 。</p><p>给你一个整数数组 <code>nums</code> ，找出 <code>nums</code> 的下一个排列。</p><p>必须**<a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95"> 原地 </a>**修改，只允许使用额外常数空间。</p><h2 id="示例">示例</h2><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = <span class="comment">[1,2,3]</span></span><br><span class="line">输出：<span class="comment">[1,3,2]</span></span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = <span class="comment">[3,2,1]</span></span><br><span class="line">输出：<span class="comment">[1,2,3]</span></span><br></pre></td></tr></table></figure><h2 id="思路">思路</h2><h2 id="1-调用STL的函数">#1 调用STL的函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">nextPermutation</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">next_permutation</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>()); <span class="comment">// STL功能和题目描述一致</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="2-手动实现-时间复杂度O-n-空间复杂度O-1">#2 手动实现 时间复杂度O(n),空间复杂度O(1)</h2><ul><li>从后往前找到第一个【相邻升序对】，即A[i]&lt;A[i+1]。此时A[i+1,end)为降序。</li><li>在区间[i+1,end)中，从后往前找到第一个大于A[i]的元素A[j]</li><li>交换A[i]和A[j]，此时A[i+1,end)一定还是降序，因为A[j]是从右侧起第一个大于A[i]的值</li><li>反转A[i+1,end)，变成升序</li></ul><p>应用场景：可兼容处理含有重复元素的全排列问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">nextPermutation</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i=nums.<span class="built_in">size</span>()<span class="number">-2</span>; i &gt;= <span class="number">0</span>; -- i) &#123; <span class="comment">// 从后往前找到第一个相邻升序对</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt; nums[i+<span class="number">1</span>]) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">-1</span>) <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>()); <span class="comment">// 无相邻升序对，必定为非递减序列</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=nums.<span class="built_in">size</span>()<span class="number">-1</span>; j &gt;= i+<span class="number">1</span>; -- j) &#123; <span class="comment">// 从后往前[i+1,end)找第一个大于a[i+1]的值</span></span><br><span class="line">                <span class="keyword">if</span> (nums[i] &lt; nums[j]) &#123;</span><br><span class="line">                    <span class="built_in">swap</span>(nums[i],nums[j]); <span class="comment">// 交换二者</span></span><br><span class="line">                    <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>()+i+<span class="number">1</span>,nums.<span class="built_in">end</span>()); <span class="comment">// 反转[i+1,end)，变成升序</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++、算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣hot100--004</title>
      <link href="/posts/64d68daa.html"/>
      <url>/posts/64d68daa.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>📖每日更新一道力扣hot100</p></div><div class="note success flat"><p>📚更新于5.18</p></div><hr><h1>4.寻找两个有序数组的中位数</h1><h2 id="题目描述">题目描述</h2><p>给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 。</p><p>算法的时间复杂度应该为 O(log (m+n)) 。</p><h2 id="实例">实例</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = <span class="comment">[1,3]</span>, nums2 = <span class="comment">[2]</span></span><br><span class="line">输出：2.00000</span><br><span class="line">解释：合并数组 = <span class="comment">[1,2,3]</span> ，中位数 2</span><br></pre></td></tr></table></figure><h2 id="解题思路">解题思路</h2><p>我只能想到归并排序了，答案中的二分查找理解不了，所以总结一下归并排序吧。</p><h2 id="代码实现">代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> num1[<span class="number">2</span>]=&#123;&#125;;</span><br><span class="line">    <span class="type">int</span> num2[<span class="number">1</span>]=&#123;&#125;;</span><br><span class="line">    num1[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    num1[<span class="number">1</span>] = <span class="number">3</span>;</span><br><span class="line">    num2[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> num3[<span class="number">3</span>]=&#123;&#125;;</span><br><span class="line">    <span class="comment">// 归并排序</span></span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(count &lt; <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(j!=<span class="number">1</span>)&#123;</span><br><span class="line">            num3[count++]=num2[j++];</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(i!=<span class="number">2</span>)&#123;</span><br><span class="line">                num3[count++] = num1[i++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num1[i]&lt;num2[j])&#123;</span><br><span class="line">            num3[count++] = num1[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            num3[count++] = num2[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断中位数</span></span><br><span class="line">    <span class="keyword">if</span>(count%<span class="number">2</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">        cout&lt;&lt;num3[(count/<span class="number">2</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        cout&lt;&lt;num3[count/<span class="number">2</span>]+num3[(count/<span class="number">2</span>)<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>很多排序算法，比如快排，归并排序，二分查找算法，这些稍微复杂一点的算法都不能手撕代码。很是头疼。</p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++、算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣hot100--017--电话号码的字母组合</title>
      <link href="/posts/b33db4a9.html"/>
      <url>/posts/b33db4a9.html</url>
      
        <content type="html"><![CDATA[<h1>电话号码的字母组合</h1><h2 id="题目描述：">题目描述：</h2><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按 任意顺序 返回。</p><p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202209270900591.png" alt="img"></p><h2 id="实例：">实例：</h2><p><strong>示例 1：</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="keyword">digits</span> = <span class="string">&quot;23&quot;</span></span><br><span class="line">输出：[<span class="string">&quot;ad&quot;</span>,<span class="string">&quot;ae&quot;</span>,<span class="string">&quot;af&quot;</span>,<span class="string">&quot;bd&quot;</span>,<span class="string">&quot;be&quot;</span>,<span class="string">&quot;bf&quot;</span>,<span class="string">&quot;cd&quot;</span>,<span class="string">&quot;ce&quot;</span>,<span class="string">&quot;cf&quot;</span>]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：digits <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 哔哔 </summary>              <div class='content'>              <p>开始做这道题脑子里面想到的就是<p class='p red'>DFS</p>（深度优先遍历）奈何<p class='p red'>DFS</p>我只在树中学过，在这种一一映射的遍历中还是第一次见。题解说：<p class='p red'>回溯算法</p>用于寻找所有的可行解，如果发现一个解不可行，则会舍弃不可行的解。在这道题中，由于每个数字对应的每个字母都可能进入字母组合，因此不存在不可行的解，直接穷举所有的解即可。</p><p>可惜了，我回溯代码也不会写。回溯算法的文字描述如下（我还是看的一知半解）</p><hr><p>回溯过程中维护一个字符串，表示已有的字母排列（如果未遍历完电话号码的所有数字，则已有的字母排列是不完整的）。该字符串初始为空。每次取电话号码的一位数字，从哈希表中获得该数字对应的所有可能的字母，并将其中的一个字母插入到已有的字母排列后面，然后继续处理电话号码的后一位数字，直到处理完电话号码中的所有数字，即得到一个完整的字母排列。然后进行回退操作，遍历其余的字母排列。</p><hr><p>代码是我一边借鉴一边动脑写出来的，但是下次遇到相同的题目，我还是不会写吧！哎</p>              </div>            </details><h2 id="解题代码：">解题代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    vector&lt;string&gt; res; </span><br><span class="line">    map&lt;<span class="type">int</span>,string&gt; a = &#123;</span><br><span class="line">            &#123;<span class="number">2</span>,<span class="string">&quot;abc&quot;</span>&#125;,&#123;<span class="number">3</span>,<span class="string">&quot;def&quot;</span>&#125;,&#123;<span class="number">4</span>,<span class="string">&quot;ghi&quot;</span>&#125;,&#123;<span class="number">5</span>,<span class="string">&quot;jkl&quot;</span>&#125;,&#123;<span class="number">6</span>,<span class="string">&quot;mno&quot;</span>&#125;,&#123;<span class="number">7</span>,<span class="string">&quot;pqrs&quot;</span>&#125;,&#123;<span class="number">8</span>,<span class="string">&quot;tuv&quot;</span>&#125;,&#123;<span class="number">9</span>,<span class="string">&quot;wxyz&quot;</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    string temp;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">DFS</span><span class="params">(<span class="type">int</span> depth,string digits)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(depth == digits.<span class="built_in">size</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(temp);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> sum = digits[depth] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a[sum].<span class="built_in">size</span>(); i++)</span><br><span class="line">            &#123;</span><br><span class="line">                temp.<span class="built_in">push_back</span>(a[sum][i]);</span><br><span class="line">                <span class="built_in">DFS</span>(depth+<span class="number">1</span>,digits);</span><br><span class="line">                temp.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;string&gt; <span class="title">lettercombinations</span><span class="params">(string digits)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(digits.<span class="built_in">size</span>() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">DFS</span>(<span class="number">0</span>,digits);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Solution a;</span><br><span class="line">    string b =  <span class="string">&quot;23&quot;</span>;</span><br><span class="line">    vector&lt;string&gt; s;</span><br><span class="line">    s = a.<span class="built_in">lettercombinations</span>(b);</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;string&gt;::iterator  itr = s.<span class="built_in">begin</span>(); itr != s.<span class="built_in">end</span>(); itr++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;*itr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>回溯方法大有用处，应该好好吸收！</p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++、算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自然数与有理数的双射函数</title>
      <link href="/posts/5d401e2a.html"/>
      <url>/posts/5d401e2a.html</url>
      
        <content type="html"><![CDATA[<h2 id="算法题：自然数与有理数的双射函数">算法题：自然数与有理数的双射函数</h2><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202209231123258.png" alt="21d9a97ee2e018e313bc7947b0740658.png"></p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202209231124462.png" alt="e2b706093c148938a0762b0d415a8116.png"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">输入：多行，每行两个整数<span class="selector-tag">a</span>和<span class="selector-tag">b</span>，中间有一个空格，表示一个有理数<span class="selector-tag">a</span>/<span class="selector-tag">b</span></span><br><span class="line"></span><br><span class="line">输出：对应的多行，每行一个整数，有理数<span class="selector-tag">a</span>/<span class="selector-tag">b</span>的双射函数对应的自然数，结果&lt;<span class="number">500000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输入样例：</span><br><span class="line"></span><br><span class="line">-<span class="number">2</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">-<span class="number">4</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">-<span class="number">1</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出样例：</span><br><span class="line"></span><br><span class="line"><span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="number">19</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>思路：最开始的想法就是找规律了，</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">0</span> <span class="number">1</span> <span class="number">1</span>/<span class="number">2</span> -<span class="number">1</span>/<span class="number">2</span> -<span class="number">1</span> -<span class="number">2</span> -<span class="number">2</span>/<span class="number">3</span> -<span class="number">1</span>/<span class="number">3</span> <span class="number">1</span>/<span class="number">3</span> <span class="number">2</span>/<span class="number">3</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span>/<span class="number">2</span> <span class="number">3</span>/<span class="number">4</span> <span class="number">1</span>/<span class="number">4</span> -<span class="number">1</span>/<span class="number">4</span> -<span class="number">3</span>/<span class="number">4</span> -<span class="number">3</span>/<span class="number">2</span> -<span class="number">3</span> -<span class="number">4</span> -<span class="number">4</span>/<span class="number">3</span> -<span class="number">4</span>/<span class="number">5</span> -<span class="number">3</span>/<span class="number">5</span> -<span class="number">2</span>/<span class="number">5</span> -<span class="number">1</span>/<span class="number">5</span> <span class="number">1</span>/<span class="number">5</span> <span class="number">2</span>/<span class="number">5</span> <span class="number">3</span>/<span class="number">5</span> <span class="number">4</span>/<span class="number">5</span> <span class="number">4</span>/<span class="number">3</span></span><br></pre></td></tr></table></figure><p>发现规律并不明显，很难模拟它的拟合方程（就是没有公式，没有规律）。</p><p>没有数字规律那就从图像中找规律，我发现图像是一个个凹字的嵌套，如图：</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202209231128750.png" alt="image-20220923112831656"></p><p>我们只需要模拟出凹字的笔画就好啦（最小的凹字长宽分别为2：1。画完一个凹字之后接下来的凹字由图像可知长宽分别加4：2）</p><p>代码实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    map&lt;<span class="type">double</span>,<span class="type">int</span>&gt; p;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>,b = <span class="number">2</span>;</span><br><span class="line">    <span class="type">double</span> x = <span class="number">0</span>,y = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    p[x/y] = count++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">300</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x++;</span><br><span class="line">        map&lt;<span class="type">double</span>,<span class="type">int</span>&gt;::iterator it = p.<span class="built_in">find</span>(x/y);</span><br><span class="line">        <span class="keyword">if</span>(it==p.<span class="built_in">end</span>())</span><br><span class="line">            p[x/y] = count++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;a;j++)&#123;</span><br><span class="line">            y++;</span><br><span class="line">            it = p.<span class="built_in">find</span>(x/y);</span><br><span class="line">            <span class="keyword">if</span>(it==p.<span class="built_in">end</span>())</span><br><span class="line">            p[x/y] = count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; b; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            x--;</span><br><span class="line">            it = p.<span class="built_in">find</span>(x/y);</span><br><span class="line">            <span class="keyword">if</span>(it==p.<span class="built_in">end</span>())</span><br><span class="line">            p[x/y] = count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">0</span>; l &lt; a; l++)</span><br><span class="line">        &#123;</span><br><span class="line">            y--;</span><br><span class="line">            it = p.<span class="built_in">find</span>(x/y);</span><br><span class="line">            <span class="keyword">if</span>(it==p.<span class="built_in">end</span>())</span><br><span class="line">            p[x/y] = count++;</span><br><span class="line">        &#125;</span><br><span class="line">        x--;</span><br><span class="line">        it = p.<span class="built_in">find</span>(x/y);</span><br><span class="line">        <span class="keyword">if</span>(it==p.<span class="built_in">end</span>())</span><br><span class="line">            p[x/y] = count++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a+<span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            y++;</span><br><span class="line">            it = p.<span class="built_in">find</span>(x/y);</span><br><span class="line">            <span class="keyword">if</span>(it==p.<span class="built_in">end</span>())</span><br><span class="line">            p[x/y] = count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; b+<span class="number">2</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            x++;</span><br><span class="line">            it = p.<span class="built_in">find</span>(x/y);</span><br><span class="line">            <span class="keyword">if</span>(it==p.<span class="built_in">end</span>())</span><br><span class="line">            p[x/y] = count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a+<span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            y--;</span><br><span class="line">            it = p.<span class="built_in">find</span>(x/y);</span><br><span class="line">            <span class="keyword">if</span>(it==p.<span class="built_in">end</span>())</span><br><span class="line">            p[x/y] = count++;</span><br><span class="line">        &#125;</span><br><span class="line">        a+=<span class="number">2</span>;</span><br><span class="line">        b+=<span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">double</span> Q1,Q2;</span><br><span class="line"></span><br><span class="line"><span class="comment">//     for(auto it : p)&#123;</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; it.first &lt;&lt;&quot; &quot;&lt;&lt; it.second &lt;&lt;endl;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;Q1&gt;&gt;Q2)</span><br><span class="line">        cout&lt;&lt;p[Q1/Q2]&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：N 空间复杂度：N</p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++、算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣hot100--015</title>
      <link href="/posts/aca8c7d.html"/>
      <url>/posts/aca8c7d.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>📖每日更新一道力扣hot100</p></div><div class="note success flat"><p>📚更新于5.18</p></div><hr><h2 id="题目描述：">题目描述：</h2><p>给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k ，同时还满足 nums[i] + nums[j] + nums[k] == 0 。请</p><p>你返回所有和为 0 且不重复的三元组。</p><p>注意：答案中不可以包含重复的三元组。</p><h2 id="实例：">实例：</h2><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="string">-1</span>,0,1,2,<span class="string">-1</span>,<span class="string">-4</span>]</span><br><span class="line">输出：[[<span class="string">-1</span>,<span class="string">-1</span>,2],[<span class="string">-1</span>,0,1]]</span><br></pre></td></tr></table></figure><h2 id="解题思路：">解题思路：</h2><p>转换为二数之和问题，为了排除重复元素，开始想到的是用hash来去重，但是三元组的map不知道能不能去重复。我来试一下：实验表明，map只有key不能重复，value是可以重复的。</p><p>1、排序2、转化为二数之和问题3、注意重复问题</p><h2 id="实现代码：">实现代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums)&#123;</span><br><span class="line">     <span class="type">int</span> n  = nums.<span class="built_in">size</span>();</span><br><span class="line">     <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">     vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> first = <span class="number">0</span>; first &lt; n; first++)</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="comment">// 不能有重复出现的三元组，if语句完美规避了0处越界和first重复问题★</span></span><br><span class="line">        <span class="keyword">if</span>(first &gt; <span class="number">0</span>&amp;&amp;nums[first] == nums[first - <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> third = n <span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> target = -nums[first];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> second = first +<span class="number">1</span> ; second &lt; n; second++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 不能有重复出现的三元组，if语句完美从first下一个元素开始和second重复问题★</span></span><br><span class="line">            <span class="keyword">if</span>(second &gt; first+<span class="number">1</span> &amp;&amp; nums[second] == nums[second - <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(second &lt; third &amp;&amp; nums[second]+nums[third] &gt; target)&#123;</span><br><span class="line">            --third;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(second == third)</span><br><span class="line">           &#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(nums[second] + nums[third]  == target)&#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(&#123;nums[first],nums[second],nums[third]&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; a = &#123; <span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">-1</span>,<span class="number">-4</span>&#125;;</span><br><span class="line">    Solution n;</span><br><span class="line">    <span class="keyword">auto</span> b = n.<span class="built_in">threeSum</span>(a);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; b.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;b[i][<span class="number">0</span>]&lt;&lt;b[i][<span class="number">1</span>]&lt;&lt;b[i][<span class="number">2</span>]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// cout&lt;&lt;b.size();</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>多看看STL吧。。。。。</p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++、算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣hot100--011</title>
      <link href="/posts/da74864.html"/>
      <url>/posts/da74864.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>📖每日更新一道力扣hot100</p></div><div class="note success flat"><p>📚更新于5.18</p></div><h4 id="11-盛最多水的容器"><a href="https://leetcode.cn/problems/container-with-most-water/">11. 盛最多水的容器</a></h4><p>给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。</p><p>找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><p>返回容器可以储存的最大水量。</p><p>说明：你不能倾斜容器。</p><p>示例 1：</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202209091318849.jpeg" alt="img"></p><p>输入：[1,8,6,2,5,4,8,3,7]<br>输出：49<br>解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。<br>示例 2：</p><p>输入：height = [1,1]<br>输出：1</p><h2 id="题解">题解</h2><p>1、暴力法</p><p>两个for循环遍历所有可能的解，比较最大值即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">MaxArea</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> maxArea = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; height.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i+<span class="number">1</span>; j &lt; height.<span class="built_in">size</span>(); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> len = j-i;</span><br><span class="line">                <span class="keyword">if</span>(len*<span class="built_in">min</span>(height[i],height[j])&gt;maxArea)</span><br><span class="line">                    maxArea = len*<span class="built_in">min</span>(height[i],height[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxArea;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; a=&#123;<span class="number">1</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">7</span>&#125;;</span><br><span class="line">    Solution b;</span><br><span class="line">    cout&lt;&lt;b.<span class="built_in">MaxArea</span>(a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、双指针法</p><p>两个边界的问题，用双指针法最为合适，每次舍去两边界中最小的边，因为容量=最小边界*宽度。如果这个容量不是最大值，那么移动最大边界不可能再有最大值出现了，所以只能移动最小边界。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">MaxArea</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;height)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> maxArea = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> begin = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> end = height.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (begin != end)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((end - begin) * <span class="built_in">min</span>(height[begin], height[end]) &gt; maxArea)</span><br><span class="line">                maxArea = (end - begin) * <span class="built_in">min</span>(height[begin], height[end]);</span><br><span class="line">            <span class="keyword">if</span> (height[begin] &gt; height[end])</span><br><span class="line">                end--;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                begin++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> maxArea;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; a = &#123;<span class="number">1</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    Solution b;</span><br><span class="line">    cout &lt;&lt; b.<span class="built_in">MaxArea</span>(a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：vector真好用，比传统数组好用！</p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++、算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣hot100--005</title>
      <link href="/posts/13d1bd3c.html"/>
      <url>/posts/13d1bd3c.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>📖每日更新一道力扣hot100</p></div><div class="note success flat"><p>📚更新于5.18</p></div><h1>5、最长回文子串</h1><h2 id="题目描述">题目描述</h2><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p><h2 id="实例">实例</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s <span class="operator">=</span> <span class="string">&quot;babad&quot;</span></span><br><span class="line">输出：<span class="string">&quot;bab&quot;</span></span><br><span class="line">解释：<span class="string">&quot;aba&quot;</span> 同样是符合题意的答案。</span><br></pre></td></tr></table></figure><h2 id="思路">思路</h2><p>有两种方法，一种是中心扩展法，比较好理解，遍历、若左边的或者右边的元素和当前元素相等则回文长度+1，若左边的和右边的相等，则回文长度+2.</p><p>第二种是动态规划，我们用 P(i,j)<em>P</em>(<em>i</em>,<em>j</em>) 表示字符串 s<em>s</em> 的第 <em>i</em> 到 <em>j</em> 个字母组成的串是否为回文串。状态转移方程：<em>P</em>(<em>i</em>,<em>j</em>)=<em>P</em>(<em>i</em>+1,<em>j</em>−1)∧(S[i]==S[j])。边界条件：<img src="https://raw.githubusercontent.com/jack8luo/picture/main/202209061451886.png" alt="image-20220906145111850"></p><h2 id="代码实现">代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestPalindrome</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> len = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> maxLeft = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> maxRight = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> mid = <span class="number">0</span>; mid &lt; s.<span class="built_in">size</span>(); mid++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> left = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> right = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; s[left] == s[mid])</span><br><span class="line">            &#123;</span><br><span class="line">                left--;</span><br><span class="line">                len++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (right &lt;= s.<span class="built_in">size</span>()<span class="number">-1</span> &amp;&amp; s[right] == s[mid])</span><br><span class="line">            &#123;</span><br><span class="line">                right++;</span><br><span class="line">                len++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; right &lt;= s.<span class="built_in">size</span>()<span class="number">-1</span> &amp;&amp; s[left] == s[right])</span><br><span class="line">            &#123;</span><br><span class="line">                left--;</span><br><span class="line">                right++;</span><br><span class="line">                len += <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(len &gt; maxLen)&#123;</span><br><span class="line">                maxLeft = left;</span><br><span class="line">                maxRight = right;</span><br><span class="line">                maxLen = len;</span><br><span class="line">            &#125;</span><br><span class="line">            len = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">substr</span>(maxLeft + <span class="number">1</span>,maxLen);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 中心扩展法</span></span><br><span class="line">    string S = <span class="string">&quot;abcdcba&quot;</span>;</span><br><span class="line">    Solution a;</span><br><span class="line">    cout&lt;&lt;a.<span class="built_in">longestPalindrome</span>(S);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestPalindrome</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">     <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">     <span class="keyword">if</span> (n&lt;<span class="number">2</span>)</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="type">int</span> maxLen = <span class="number">1</span>;</span><br><span class="line">     <span class="type">int</span> begin = <span class="number">0</span>;</span><br><span class="line">     vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n));</span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">     &#123;</span><br><span class="line">        dp[i][i] = <span class="literal">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> L = <span class="number">2</span>; L &lt;= n; L++)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j = L + i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(j&gt;=n)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == s[j] &amp;&amp; j - i &lt; <span class="number">2</span>)&#123;</span><br><span class="line">                dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s[i]==s[j])&#123;</span><br><span class="line">                dp[i][j]=dp[i+<span class="number">1</span>][j<span class="number">-1</span>];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                dp[i][j] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(dp[i][j]&amp;&amp;j-i+<span class="number">1</span>&gt;maxLen)&#123;</span><br><span class="line">                maxLen = j-i+<span class="number">1</span>;</span><br><span class="line">                begin = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> s.<span class="built_in">substr</span>(begin,maxLen);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 动态规划</span></span><br><span class="line">    Solution a;</span><br><span class="line">    string s = <span class="string">&quot;dd&quot;</span>;</span><br><span class="line">    cout&lt;&lt;a.<span class="built_in">longestPalindrome</span>(s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>vector用法不是很熟练，动态规划的边界条件和状态转移方程使用不熟练。</p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++、算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣hot100--0019 删除链表倒数第N位</title>
      <link href="/posts/2977d1eb.html"/>
      <url>/posts/2977d1eb.html</url>
      
        <content type="html"><![CDATA[<h1><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点</a></h1><p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202210091306235.jpeg" alt="img"></p><h2 id="示例">示例</h2><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [<span class="number">1,2,3,4</span>,<span class="number">5</span>], n = <span class="number">2</span></span><br><span class="line">输出：[<span class="number">1,2,3,5</span>]</span><br></pre></td></tr></table></figure><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = <span class="comment">[1]</span>, n = 1</span><br><span class="line">输出：<span class="comment">[]</span></span><br></pre></td></tr></table></figure><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = <span class="comment">[1,2]</span>, n = 1</span><br><span class="line">输出：<span class="comment">[1]</span></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 哔哔 </summary>              <div class='content'>              <p>这是道简单的链表题，对我们熟悉链表操作有很好的帮助。</p><p>链表最重要的操作就是创增删改查。我们熟悉这些操作就行了。还有另外的双链表，循环链表大同小异，可以放在以后再看。</p><hr><p>思路就是先获取链表的长度，然后由倒数第几个转化为第几个的问题。</p>              </div>            </details><p>实现代码：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">include</span>&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"><span class="keyword">struct</span> ListNode &#123;</span><br><span class="line">    <span class="built_in">int</span> <span class="keyword">val</span>;</span><br><span class="line">    ListNode *next;</span><br><span class="line">    <span class="constructor">ListNode()</span> : <span class="keyword">val</span>(<span class="number">0</span>), next(nullptr) &#123;&#125;</span><br><span class="line">    <span class="constructor">ListNode(<span class="params">int</span> <span class="params">x</span>)</span> : <span class="keyword">val</span>(x), next(nullptr) &#123;&#125;</span><br><span class="line">    <span class="constructor">ListNode(<span class="params">int</span> <span class="params">x</span>, ListNode <span class="operator">*</span><span class="params">next</span>)</span> : <span class="keyword">val</span>(x), next(next) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* remove<span class="constructor">NthFromEnd(ListNode<span class="operator">*</span> <span class="params">head</span>, <span class="params">int</span> <span class="params">n</span>)</span> &#123;</span><br><span class="line">         ListNode* p = head;</span><br><span class="line">        <span class="built_in">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (p-&gt;next != nullptr)</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        n = i-n;</span><br><span class="line">        p = head;</span><br><span class="line">        <span class="keyword">if</span>(n<span class="operator"> == </span><span class="number">0</span>)&#123;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            n-=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            p-&gt;next = p-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        return head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">int</span> main<span class="literal">()</span>&#123;</span><br><span class="line">    ListNode* hea = <span class="keyword">new</span> <span class="constructor">ListNode(1)</span>;</span><br><span class="line">    ListNode* he = hea;</span><br><span class="line">    <span class="built_in">int</span> i;</span><br><span class="line">    <span class="keyword">while</span> (cin&gt;&gt;i)</span><br><span class="line">    &#123;</span><br><span class="line">        he-&gt;next = <span class="keyword">new</span> <span class="constructor">ListNode(<span class="params">i</span>)</span>;</span><br><span class="line">        he = he-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    Solution a;</span><br><span class="line">    ListNode* b = a.remove<span class="constructor">NthFromEnd(<span class="params">hea</span>,1)</span>;</span><br><span class="line">    <span class="keyword">while</span> (b != nullptr)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;b-&gt;<span class="keyword">val</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        b=b-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>**进阶：**你能尝试使用一趟扫描实现吗？</h1><p>扫描一遍就得出答案可以使用双指针，思路如下：</p><p>设置两个头指针p、q，移动q使得两指针相距n位，然后同时移动两个指针，当q到尾部时，p指的自然是倒数n位。</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202210091320311.gif" alt="img"></p><p>实现代码</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* removeNthFromEnd(ListNode* head, int n) &#123;</span><br><span class="line">     ListNode* dummyHead = new ListNode(<span class="number">0</span>);</span><br><span class="line">        <span class="function"><span class="title">dummyHead</span>-&gt;</span>next = head;</span><br><span class="line"></span><br><span class="line">        ListNode* p = dummyHead;</span><br><span class="line">        ListNode* q = dummyHead;</span><br><span class="line">        <span class="keyword">for</span>( int i = <span class="number">0</span> ; i &lt; n + <span class="number">1</span> ; i ++ )&#123;</span><br><span class="line">            <span class="function"><span class="title">q</span> = q-&gt;</span>next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(q)&#123;</span><br><span class="line">            <span class="function"><span class="title">p</span> = p-&gt;</span>next;</span><br><span class="line">            <span class="function"><span class="title">q</span> = q-&gt;</span>next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        L<span class="function"><span class="title">istNode</span>* delNode = p-&gt;</span>next;</span><br><span class="line">        <span class="function"><span class="title">p</span>-&gt;</span><span class="function"><span class="title">next</span> = delNode-&gt;</span>next;</span><br><span class="line">        delete delNode;</span><br><span class="line"></span><br><span class="line">        L<span class="function"><span class="title">istNode</span>* retNode = dummyHead-&gt;</span>next;</span><br><span class="line">        delete dummyHead;</span><br><span class="line"></span><br><span class="line">        return retNode;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++、算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣hot100--022 括号生成</title>
      <link href="/posts/3f31bd15.html"/>
      <url>/posts/3f31bd15.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>数字 <code>n</code> 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 <strong>有效的</strong> 括号组合。</p><p><strong>示例 1：</strong></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">n</span> = <span class="number">3</span></span><br><span class="line">输出：[<span class="string">&quot;((()))&quot;</span>,<span class="string">&quot;(()())&quot;</span>,<span class="string">&quot;(())()&quot;</span>,<span class="string">&quot;()(())&quot;</span>,<span class="string">&quot;()()()&quot;</span>]</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 哔哔 </summary>              <div class='content'>              <p>这道题目思路有很多，但是我一个都没想到… 看了天才们的解法，有以下两个：递归和动态规划。</p><p>好像递归转为非递归用的就是动态规划…</p><p>这两种解法真的好难掌握一看就懂一写就废…</p>              </div>            </details><h2 id="递归实现">递归实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line"><span class="function">vector&lt;string&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt; <span class="built_in">res</span>(n + <span class="number">1</span>);</span><br><span class="line">        res[<span class="number">0</span>] = &#123;<span class="string">&quot;&quot;</span>&#125;;</span><br><span class="line">        res[<span class="number">1</span>] = &#123;<span class="string">&quot;()&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (string p : res[j])</span><br><span class="line">                    <span class="keyword">for</span> (string q : res[i - j - <span class="number">1</span>])</span><br><span class="line">                    &#123;</span><br><span class="line">                        string str = <span class="string">&quot;(&quot;</span> + p + <span class="string">&quot;)&quot;</span> + q;</span><br><span class="line">                        res[i].<span class="built_in">push_back</span>(str);</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Solution a;</span><br><span class="line">    <span class="comment">// list&lt;string&gt; b;</span></span><br><span class="line">    vector&lt;string&gt; b;</span><br><span class="line">    b = a.<span class="built_in">generateParenthesis</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = b.<span class="built_in">begin</span>(); it != b.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="comment">// for (string c : b)</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; c &lt;&lt; &quot; &quot;;</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态规划实现">动态规划实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    list&lt;string&gt; res;</span><br><span class="line">    <span class="function">list&lt;string&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">dfs</span>(<span class="string">&quot;&quot;</span>, n, n);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(string str, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//定义递归出口</span></span><br><span class="line">        <span class="keyword">if</span> (left == <span class="number">0</span> &amp;&amp; right == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(str);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 左括号=右括号时，只能加左括号</span></span><br><span class="line">        <span class="keyword">if</span> (left == right)</span><br><span class="line">            <span class="built_in">dfs</span>(str + <span class="string">&quot;(&quot;</span>, left - <span class="number">1</span>, right);</span><br><span class="line">        <span class="comment">// 左括号大于右括号时，当左括号取完前，取左括号，取完后取右括号</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (left &lt; right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (left &gt; <span class="number">0</span>)</span><br><span class="line">                <span class="built_in">dfs</span>(str + <span class="string">&quot;(&quot;</span>, left - <span class="number">1</span>, right);</span><br><span class="line">            <span class="built_in">dfs</span>(str + <span class="string">&quot;)&quot;</span>, left, right - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Solution a;</span><br><span class="line">    list&lt;string&gt; b;</span><br><span class="line">    <span class="comment">// vector&lt;string&gt; b;</span></span><br><span class="line">    b = a.<span class="built_in">generateParenthesis</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">// for (auto it = b.begin(); it != b.end(); it++)</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span></span><br><span class="line">    <span class="keyword">for</span> (string c : b)</span><br><span class="line">        cout &lt;&lt; c &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" ><summary> green，递归哔哔 </summary>              <div class='content'>              <p>每种解法都有特定的思路。</p><p>递归来讲：剩余左括号总数要小于等于右括号。定义函数dfs(str,left,right)。str是生成的字符串，left表示剩下的“（”，right表示剩下的“）”。</p><p>1、定义递归出口：当左括号和右括号都填完了，return即可。</p><p>2、递归顺序：考虑左括号和右括号的性质，当左右括号数相同，先递归左括号（保证左括号数&lt;=n)，再递归右括号。</p>              </div>            </details><details class="folding-tag" green><summary> 动态规划哔哔 </summary>              <div class='content'>              <p>思路：求结果n时，我们可以从结果n-1中插入一个括号求解。（x）会有重复解的情况。</p><p>求结果n时，考虑 <code>i=n</code> 时相比 <code>n-1</code> 组括号增加的那一组括号的位置。括号要么在这一组新增的括号内部，要么在这一组新增括号的外部（右侧）。</p><p>规划方程：</p><p>“(” + 【i=p时所有括号的排列组合】 + “)” + 【i=q时所有括号的排列组合】</p>              </div>            </details><p>tip:</p><p><strong>我想把三个常用的序列式放在一起对比一下是有必要的：</strong></p><p><strong>vector ：</strong> vector和built-in数组类似，拥有一段连续的内存空间，能非常好的支持随即存取，即[]操作符，但由于它的内存空间是连续的，所以在中间进行插入和删除会造成内存块的拷贝，另外，当插入较多的元素后，预留内存空间可能不够，需要重新申请一块足够大的内存并把原来的数据拷贝到新的内存空间。这些影响了vector的效率，但是实际上用的最多的还是vector容器，建议大多数时候使用vector效率一般是不错的。vector的用法解析可以参考本人的另一篇随笔：<a href="http://www.cnblogs.com/BeyondAnyTime/archive/2012/08/08/2627666.html">http://www.cnblogs.com/BeyondAnyTime/archive/2012/08/08/2627666.html</a></p><p><strong>list：</strong>   list就是数据结构中的双向链表(根据sgi stl源代码)，因此它的内存空间是不连续的，通过指针来进行数据的访问，这个特点使得它的随即存取变的非常没有效率，因此它没有提供[]操作符的重载。但由于链表的特点，它可以以很好的效率支持任意地方的删除和插入。</p><p><strong>deque：</strong> deque是一个double-ended queue，它的具体实现不太清楚，但知道它具有以下两个特点：它支持[]操作符，也就是支持随即存取，并且和vector的效率相差无几，它支持在两端的操作：push_back,push_front,pop_back,pop_front等，并且在两端操作上与list的效率也差不多。</p><p>因此在实际使用时，如何选择这三个容器中哪一个，应根据你的需要而定，具体可以遵循下面的****原则****：</p><ul><li><p>如果你需要高效的随即存取，而不在乎插入和删除的效率，使用vector</p></li><li><p>如果你需要大量的插入和删除，而不关心随即存取，则应使用list</p></li><li><p>如果你需要随即存取，而且关心两端数据的插入和删除，则应使用deque。</p></li></ul><p>遍历:</p><p>对于三种容器:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = b.<span class="built_in">begin</span>(); it != b.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">   <span class="keyword">for</span> (string c : b)</span><br><span class="line">       cout &lt;&lt; c &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++、算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣hot100--021 合并子串</title>
      <link href="/posts/aa423386.html"/>
      <url>/posts/aa423386.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p><p><strong>示例 1：</strong></p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202210131816011.jpeg" alt="img"></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = <span class="comment">[1,2,4]</span>, l2 = <span class="comment">[1,3,4]</span></span><br><span class="line">输出：<span class="comment">[1,1,2,3,4,4]</span></span><br></pre></td></tr></table></figure><h2 id="解题思路">解题思路</h2><details class="folding-tag" green><summary> 哔哔 </summary>              <div class='content'>              <p>之前写过这道题目用的是迭代的思路，所以实现起来还是很熟练的。但是我在解题中看到了递归的解法，最递归害怕者的我有很好的帮助。</p>              </div>            </details><h2 id="迭代代码实现">迭代代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode *next;</span><br><span class="line">    <span class="built_in">ListNode</span>():<span class="built_in">val</span>(<span class="number">0</span>),<span class="built_in">next</span>(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x):<span class="built_in">val</span>(x),<span class="built_in">next</span>(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x,ListNode *next):<span class="built_in">val</span>(x),<span class="built_in">next</span>(next)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* list1, ListNode* list2)</span> </span>&#123;</span><br><span class="line">        ListNode  result = <span class="keyword">new</span> <span class="built_in">ListNode</span>();</span><br><span class="line">        ListNode* r = result;</span><br><span class="line">        <span class="keyword">while</span>(list1!=<span class="literal">nullptr</span> &amp;&amp; list2!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(list1-&gt;val&gt;list2-&gt;val)&#123;</span><br><span class="line">                result-&gt;next = list2;</span><br><span class="line">                list2 = list2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                result-&gt;next = list1;</span><br><span class="line">                list1 = list1-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">            result = result-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(list1 == <span class="literal">nullptr</span>)</span><br><span class="line">            result-&gt;next = list2;</span><br><span class="line">        <span class="keyword">if</span>(list2 == <span class="literal">nullptr</span>)</span><br><span class="line">            result-&gt;next = list1;</span><br><span class="line">        <span class="keyword">return</span> r-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ListNode* a;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归代码实现">递归代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l1 == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l2 == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l1-&gt;val &lt;= l2-&gt;val) &#123;</span><br><span class="line">            l1-&gt;next = <span class="built_in">mergeTwoLists</span>(l1-&gt;next, l2);</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125;</span><br><span class="line">        l2-&gt;next = <span class="built_in">mergeTwoLists</span>(l1, l2-&gt;next);</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++、算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣hot100--020 符号匹配</title>
      <link href="/posts/b88ae749.html"/>
      <url>/posts/b88ae749.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述：">题目描述：</h2><p>给定一个只包括 ‘(’，‘)’，‘{’，‘}’，‘[’，‘]’ 的字符串 s ，判断字符串是否有效。</p><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>每个右括号都有一个对应的相同类型的左括号。</p><p><strong>示例 1：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">&quot;()&quot;</span></span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">&quot;()[]&#123;&#125;&quot;</span></span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="解题思路">解题思路</h2><details class="folding-tag" green><summary> 哔哔 </summary>              <div class='content'>              <p>这就是编译原理学的符号匹配，话说编译原理也忘得差不多了，里面正则表达式的计算之类的东西，忘了以后再捡起来吧，对了感谢肖建老师教授的编译原理，个人感觉非常的好。（有一次把肖建老师叫成了肖战，哈哈哈。。。）</p>              </div>            </details><p>算法执行过程：</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202210131055496.gif" alt="20.gif"></p><h2 id="解题代码：">解题代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isVaild</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; a;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a.<span class="built_in">empty</span>())</span><br><span class="line">                &#123;</span><br><span class="line">                    a.<span class="built_in">push</span>(s[i]);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">if</span>(a.<span class="built_in">top</span>() == <span class="string">&#x27;(&#x27;</span> )</span><br><span class="line">                <span class="keyword">if</span>(s[i] == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                a.<span class="built_in">pop</span>();<span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">if</span>(a.<span class="built_in">top</span>() == <span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span>(s[i] == <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                a.<span class="built_in">pop</span>();<span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">if</span>(a.<span class="built_in">top</span>() == <span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span>(s[i] == <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                a.<span class="built_in">pop</span>();<span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            a.<span class="built_in">push</span>(s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a.<span class="built_in">empty</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Solution tex;</span><br><span class="line">    string str = <span class="string">&quot;(&#123;[)&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(tex.<span class="built_in">isVaild</span>(str))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;yes&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;NO&quot;</span>;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>这道题目比较简单，就是一个符号匹配，利用栈即可解决问题，但是我又看了一位大佬的代码，里面用map映射了符号与数字之间的关系，再用简单的一行命令判断即可求解，很巧妙，代码贴下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>,<span class="type">int</span>&gt; m&#123;&#123;<span class="string">&#x27;(&#x27;</span>,<span class="number">1</span>&#125;,&#123;<span class="string">&#x27;[&#x27;</span>,<span class="number">2</span>&#125;,&#123;<span class="string">&#x27;&#123;&#x27;</span>,<span class="number">3</span>&#125;,</span><br><span class="line">                                &#123;<span class="string">&#x27;)&#x27;</span>,<span class="number">4</span>&#125;,&#123;<span class="string">&#x27;]&#x27;</span>,<span class="number">5</span>&#125;,&#123;<span class="string">&#x27;&#125;&#x27;</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; st;</span><br><span class="line">        <span class="type">bool</span> istrue=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">            <span class="type">int</span> flag=m[c];</span><br><span class="line">            <span class="keyword">if</span>(flag&gt;=<span class="number">1</span>&amp;&amp;flag&lt;=<span class="number">3</span>) st.<span class="built_in">push</span>(c);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!st.<span class="built_in">empty</span>()&amp;&amp;m[st.<span class="built_in">top</span>()]==flag<span class="number">-3</span>) st.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">else</span> &#123;istrue=<span class="literal">false</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!st.<span class="built_in">empty</span>()) istrue=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> istrue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++、算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣hot100--001</title>
      <link href="/posts/14bc7925.html"/>
      <url>/posts/14bc7925.html</url>
      
        <content type="html"><![CDATA[<h1><a href="https://leetcode.cn/problems/two-sum/">1. 两数之和</a></h1><p>题目表述：给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出<mark class="hl-label pink">和</mark> 为目标值 target  的那两个整数，并返回它们的数组下标。</p><p>1、你可以假设每种输入只会对应<mark class="hl-label pink">一个答案</mark> 。但是，数组中同一个元素在答案里不能重复出现。</p><p>2、你可以按任意顺序返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = <span class="comment">[2,7,11,15]</span>, target = 9</span><br><span class="line">输出：<span class="comment">[0,1]</span></span><br><span class="line">解释：两数相加=9</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = <span class="comment">[3,2,4]</span>, target = 6</span><br><span class="line">输出：<span class="comment">[1,2]</span></span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = <span class="comment">[3,3]</span>, target = 6</span><br><span class="line">输出：<span class="comment">[0,1]</span></span><br></pre></td></tr></table></figure><h1>解题思路</h1><p>题目要求时间复杂度在<mark class="hl-label red">O(n2)</mark> 以下，所以暴力法是不可行的。</p><p>哈希表中查找的时间复杂度是<mark class="hl-label red">O（1）</mark> 。可以用哈希表对数组进行存储。例如：</p><p><img src="https://s2.loli.net/2022/05/18/Bh48vJZVN3lYXmy.png" alt=""></p><p><img src="https://s2.loli.net/2022/05/18/SlHEw2LkaxXW5BI.png" alt=""></p><h2 id="代码实现：">代码实现：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">b</span><span class="params">(<span class="number">2</span>,<span class="number">-1</span>)</span></span>;</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; a;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            a.<span class="built_in">insert</span>(map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;::<span class="built_in">value_type</span>(nums[i],i));  <span class="comment">//初始化哈希表a</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (a.<span class="built_in">count</span>(target-nums[i]) &gt; <span class="number">0</span> &amp;&amp; (a[target-nums[i]] != i)) <span class="comment">//a.count(target-nums[i]) &gt; 0:判断哈希表中是否有两个相加等于target的数；a[target-nums[i]] != i：排除两个相同的数相加=target//a.count(i)查找到返回1，否则返回0；以为数组不含相同整数</span></span><br><span class="line">            &#123;</span><br><span class="line">                b[<span class="number">0</span>] = i;</span><br><span class="line">                b[<span class="number">1</span>] = a[target-nums[i]];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="补充一些与哈希表有关的操作：">补充一些与哈希表有关的操作：</h2><h3 id="初始化和迭代：">初始化和迭代：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Mymap c1;</span><br><span class="line">c1.<span class="built_in">insert</span>(Mymap::<span class="built_in">value_type</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>));</span><br><span class="line">c1.<span class="built_in">insert</span>(Mymap::<span class="built_in">value_type</span>(<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>));</span><br><span class="line">c1.<span class="built_in">insert</span>(Mymap::<span class="built_in">value_type</span>(<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>));</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (Mymap::const_iterator it = c1.<span class="built_in">begin</span>(); it != c1.<span class="built_in">end</span>(); ++it)</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot; [&quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="string">&quot;]&quot;</span>;</span><br><span class="line">output:</span><br><span class="line">[a,<span class="number">1</span>],[b,<span class="number">2</span>],[c,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><h3 id="函数clear：">函数clear：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Mymap c1;</span><br><span class="line">c1.<span class="built_in">insert</span>(Mymap::<span class="built_in">value_type</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>));</span><br><span class="line">c1.<span class="built_in">insert</span>(Mymap::<span class="built_in">value_type</span>(<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>));</span><br><span class="line">c1.<span class="built_in">insert</span>(Mymap::<span class="built_in">value_type</span>(<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>));</span><br><span class="line"> </span><br><span class="line">c1.<span class="built_in">clear</span>();</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;size == &quot;</span> &lt;&lt; c1.<span class="built_in">size</span>() &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;empty() == &quot;</span> &lt;&lt; std::boolalpha &lt;&lt; c1.<span class="built_in">empty</span>() &lt;&lt; std::endl; output:</span><br><span class="line">size == <span class="number">0</span> empty（）== <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="函数count（查找与指定元素匹配的数目）：">函数count（查找与指定元素匹配的数目）：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Mymap c1;</span><br><span class="line">c1.<span class="built_in">insert</span>(Mymap::<span class="built_in">value_type</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>));</span><br><span class="line">c1.<span class="built_in">insert</span>(Mymap::<span class="built_in">value_type</span>(<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>));</span><br><span class="line">c1.<span class="built_in">insert</span>(Mymap::<span class="built_in">value_type</span>(<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>));</span><br><span class="line"> </span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;count(&#x27;A&#x27;) == &quot;</span> &lt;&lt; c1.<span class="built_in">count</span>(<span class="string">&#x27;A&#x27;</span>) &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;count(&#x27;b&#x27;) == &quot;</span> &lt;&lt; c1.<span class="built_in">count</span>(<span class="string">&#x27;b&#x27;</span>) &lt;&lt; std::endl; output:</span><br><span class="line">count（<span class="string">&#x27;A&#x27;</span>）== <span class="number">0</span> count（<span class="string">&#x27;b&#x27;</span>）== <span class="number">1</span></span><br></pre></td></tr></table></figure><p>函数find（查找指定元素）返回false和true。</p><p>还有各种各样的函数功能，记不了那么多了。</p><h2 id="归纳总结">归纳总结</h2><p>其实哈希表在数据结构中已经学过了，哈希函数是从关键字集合到地址集合的<mark class="hl-label pink">映像</mark>  。哈希函数其实是一个压缩映像，那么这种情况就不可避免的产生冲突，那么在建造哈希表时不仅要设定一个好的哈希函数，还要设定一种处理冲突的方法。</p><p>这道题就没有处理冲突的方法，因为它设置了一个和数组个数一样大的地址空间。这道题就是用到了哈希表查找的复杂度为1，并没有用到压缩存储的思想，更没有用到处理冲突的方法。常见的<mark class="hl-label pink">哈希函数</mark> 在数据结构中已经学习过了：直接定址法、除留余数法。常见的<mark class="hl-label pink">处理冲突方法</mark>  :开放定址法。具体先不管，挺容易懂得，代码实现就不一定了。</p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++、算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu22.04 中Drag and drop is not supported问题</title>
      <link href="/posts/2547a556.html"/>
      <url>/posts/2547a556.html</url>
      
        <content type="html"><![CDATA[<h1>Ubuntu22.04 中Drag and drop is not supported问题</h1><blockquote><p>ubuntu安装教程：<a href="https://zhuanlan.zhihu.com/p/355314438">https://zhuanlan.zhihu.com/p/355314438</a></p></blockquote><p>解决方法<br>先在terminal中安装这两个程序</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt <span class="keyword">install </span>gnome-<span class="keyword">shell-extension-prefs</span></span><br><span class="line"><span class="keyword"></span>sudo apt <span class="keyword">install </span>nemo</span><br></pre></td></tr></table></figure><p>左下角的application中选择extension， 将Desktop icons NG 选项关闭</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230330202439439.png" alt="image-20230330202439439"></p><p>左下角的application中选择startup application preference， 添加如下命令</p><p><img src="https://img-blog.csdnimg.cn/1df319278b124816a90579738f0c6995.png" alt="img"></p><p>将程序重启后即可在host和vm间进行拖动传输</p>]]></content>
      
      
      
        <tags>
            
            <tag> Ubuntu22.04 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo部署到gitee出现js和css文件丢失</title>
      <link href="/posts/3300d37c.html"/>
      <url>/posts/3300d37c.html</url>
      
        <content type="html"><![CDATA[<h1>hexo部署到gitee出现js和css文件丢失</h1><p>前言：</p><p>因为国内能访问的代码部署平台只有gitee了，然而gitee审核太严格了，有时候好看的（涩）图片会被挂掉，都有点不敢用了。但是为了让不能上外网的小伙伴们看到我的blog，我还是研究了一下gitee，并成功部署了（庆祝）。虽然过程很头大，其中url和deploy的配置很烦，经常出错。所以总结一下同时部署gitee和github，实现大家同时访问。（对了， gitee现在不支持自定义域名，哎，无语。你们只能记住又长又臭的网址了：<a href="https://icebress.gitee.io/jack8luo/">骆小黑的一亩三分地 - 阿妮亚 (gitee.io)</a></p><details class="folding-tag" cyan><summary> github绑定了我喜欢的域名，部署配置如下 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span><br><span class="line">#url: https://blog.luoxiaohei.co</span><br><span class="line">#root: /</span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">#  repo: git@gitee.com:icebress/jack8luo.git</span><br><span class="line">#  branch: master</span><br><span class="line">    github: git@github.com:jack8luo/jack8luo.github.io.git,master</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" cyan><summary> gitee个人版不能绑定自定义域名，配置如下 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Gitee URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span><br><span class="line">url: https://icebress.gitee.io/jack8luo</span><br><span class="line">root: /jack8luo</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@gitee.com:icebress/jack8luo.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>              </div>            </details><p>掰掰! <svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rabbit"></use></svg></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最优化</title>
      <link href="/posts/5e792134.html"/>
      <url>/posts/5e792134.html</url>
      
        <content type="html"><![CDATA[<h1>最优化理论</h1><p>1.极点<br>极点的定义及理解<br>Definition 2.6 Let P be a polyhedron. A vector x ∈ P is an extreme point of P if we cannot find two vectors y, z ∈ P, both different from x, and a scalar λ ∈ (0,1), such that x = λy + (1 - λ)z.</p><p>定义中给出了一种严格证明极点 (extreme point) 的方法，即：极点无法被另外两个点的线性组合表示出。若我们想用概括性的图像思维来描述极点的话，请先看下图（所有的极点都已用字母标出）</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202210091540298.jpeg" alt="在这里插入图片描述">通过观察不难发现，所有的极点都是凸集的“角(corner)”，即：你无法找到相异的两点，使得这些“角”在这两点的连线上。这就是我对于极点的直观几何理解。<br>当然，这是在二维平面上的，这里希望读者自己去思考在3,4,…,n维情况下，极点究竟如何定义。</p>]]></content>
      
      
      <categories>
          
          <category> 最优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优雅搞定word论文模板&amp;图片&amp;表格</title>
      <link href="/posts/c6226ada.html"/>
      <url>/posts/c6226ada.html</url>
      
        <content type="html"><![CDATA[<h1>优雅搞定word论文模板</h1><h3 id="Q：怎么修改默认标题字体">Q：怎么修改默认标题字体</h3><h3 id="A：右键点击修改。">A：右键点击修改。</h3><p><img src="https://s2.loli.net/2022/05/24/6TN9RorpljU15uM.png" alt="image-20220524213950373"></p><h3 id="点击修改字体">点击修改字体</h3><p><img src="https://s2.loli.net/2022/05/24/fmxbRcoUyikV21D.png" alt="image-20220524214048455"></p><h3 id="修改成一级标题三号中文宋体黑体居中，英文字体times-new-roman。">修改成一级标题三号中文宋体黑体居中，英文字体times new roman。</h3><p><img src="https://s2.loli.net/2022/05/24/VxncEFvARZ7tzPq.png" alt="image-20220524214244871"></p><p>设置行距在段落中有，设置两倍行距。</p><p>同样地设置正文字体：宋体小四times new roman，行间距1.25。二级三级标题设置方法一样。</p><h2 id="标号如何自动生成：">标号如何自动生成：</h2><h3 id="Q-如何设置自己想要的标号，比如：第一章、第1章这种。">Q:如何设置自己想要的标号，比如：第一章、第1章这种。</h3><h3 id="A-点击开始选项栏中的定义新的多级列表">A:点击开始选项栏中的定义新的多级列表</h3><p><img src="https://s2.loli.net/2022/05/24/CDUyq4IovX3NfSz.png" alt="image-20220524214850349"></p><p><img src="https://s2.loli.net/2022/05/24/Vsvq47aibjGlrfD.png" alt="image-20220524215407245"></p><h3 id="Q-如何设置成第一章1-1、1-2这样子">Q:如何设置成第一章1.1、1.2这样子</h3><h3 id="A-image-20220524215617233">A:<img src="https://s2.loli.net/2022/05/24/gbUqj3WoXRlsHVQ.png" alt="image-20220524215617233"></h3><p><img src="https://s2.loli.net/2022/05/24/MyIELQmtcxAnjdT.png" alt="image-20220524220420629"></p><h1>优雅搞定word论文图片&amp;表格</h1><p>图片样式选择嵌入型</p><p><img src="https://s2.loli.net/2022/05/24/2OdfhGF3YaocMrA.png" alt="image-20220524220740210"></p><p><img src="https://s2.loli.net/2022/05/24/1pOgrnemJPUki7z.png" alt="image-20220524220840289"></p><p>点击引用选项中的交叉引用，可以插入引用，但是会遇见如下情况：</p><p><img src="https://s2.loli.net/2022/05/24/TSg1xhmIKn3Ajqd.png" alt="image-20220524221112075"></p><p>解决办法：ctrl + A全选，按F9刷新即可解决。</p><p>tips：两张图片并排放可以用表格实现，插入两列表格，然后插入图片，最后在表格设计中隐藏框框。</p><p>tips：两张图片组合成一张图片：1、设置图片为四周型。2、选中两张图片，点击组合。最后设置为嵌入型就可以。</p><p>Q:如果我们标题是汉字一，图片编号会变成一-1这样子，怎么办？</p><p>A:按Alt+F9，在每章标题上按ctrl+F9进入域，输入SEQ seq \h</p><p><img src="https://s2.loli.net/2022/05/24/RVdipzncq6MJOPD.png" alt="image-20220524221835190"></p><p>在空白处按ctrl+F9，输入SEQ seq \c。剪切这部分，点击ctrl+h，进入替换页面。把^d STYLEREF 1\s替换为剪切的部分。</p><p><img src="https://s2.loli.net/2022/05/24/iQblfeqks2tZV3D.png" alt="image-20220524222056969"></p><p>按Alt + F9退出域，ctrl+A全选，按F9刷新即可完成。</p><p>Tips：建议写完所有论文之后再设置这个图注。</p><p>表格和图片引用是一样的，这里不赘诉了。</p><p>设计一个好看的表结构：</p><p>插入表格，进入表格设计，右击表格点击新建表格样式，选择古典型1</p><p><img src="https://s2.loli.net/2022/05/24/nRat5yObDC6HAWp.png" alt="image-20220524222645757"></p><p>设置字体：和正文一样。</p><p>设置格式：首先在将格式应用于首列，在框线出取消右框线，再选择应用于首行，把字体改成不倾斜即可。</p><p><img src="https://s2.loli.net/2022/05/24/lBqOwHpQmbuxjFr.png" alt="image-20220524223029002"></p>]]></content>
      
      
      <categories>
          
          <category> 论文模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>性爱课堂 -- 深田老师</title>
      <link href="/posts/cd909dd0.html"/>
      <url>/posts/cd909dd0.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试!" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="5fba2ad0f7bd52aaa36fb39004047762c8518bab62cdd93cc5f9ac34c0a91760">c74f710743701036f7d1284969e87da53b8fad0bf46163e92b693e1a16ae7704b10bc776e0dc55bdb395d6c654e05f862fc56addc81ad4fe62eb2312aa2c45badd71d067e3d480e6ed9be8aafd0c6650f193f7ecf4d2a6aac47671680e396a24bb39f18a430221109aec97b6e1383c0b8016f79f6d1d19f130035a2bdae8ebd4e7f598ca90a498990031ef299b06a0bc4d287c37166156675574d108a45ed2f4ea8be1ab2d911fda3b551644bf2ef6c0035cbd181fecbb520be9bb8b1fc306d9052feec5871683e4315fd60af0789032d1d2f4510c3f6f8c553b65847839cad4e701b318b3f1100a8b22a64103fb270208b3a81ead878140db9fe4f480ff6b4d52a68f16493c8e86d8143ca34ba71947b0b3310a6816ca2cdf0277218c6c25737591401043d4d42f82159dab3fd81754c76e3b737ca5d72954e7458ec0e64040954b426fd5fb9b7cd3db0bd8ef13cd6e3b83eccbe4e0387c8451f363ea15b0e8d2c7a34cfe92477958d8a08180e1a60c0a7ee4c294ef6dc41c66b5e38f51abceffd43755c899414f28ee7d59a30f3c082dd89cf0b96dd3871d6d45b17182e552c5d3f84a95a848998bbdfc505ee4c4dc17bcac87c45005477e522957223363642759efa5aa38b4040eb09f90565c4303c29f49fd619bd8d894b9e88f08a05414e830e12f733b244160e31943aedf0ee2ab22608c913528b78f7f3b28ee3e684c9dea5392e0c9beefd0aaa3fd4e704aa7b711d02c0c74d8a8bd22584da830c7632a45087812cd1356668a81b6e0e2bec89c9ac057a4577f9c528c01819ba7ff4b6ccd987f31dbb88141e5016000566b3284694a47e0b2aae27d3e5abfea80645d9d280605c4302d6036f8ce8c40ab94a27f054069dfd46566341edb50fb603929c56ee27e1c6a1caa93505715813181f1e4d0eea6b09b87dd1a57bd5c79e675ea0dc1aace2211126da48363335a8ddd7bba1248fc5cbe7d9e91da09839b96aaa459fb61fb59632806028ec61e53527ba715216ed8006d0abac06e18f30de3af0f5c671facaac8d62b7c597b2c48169a54898ac8467a3d538739a4f7367f3a3dcae6a2eb91f4150074c6ee9bdd26da8c3e26bfced270bd60ccdf65db46fa81f9a7a5850cd1bf6bfd0c02380d471b9690f906d368b0224cc2fd1456a28e462f01128d4b97c638828ccfc42754acfcb5a9022537fdddf92f9c1615842a27d97e0cad998f01a69d0934076cb9aefb7facc66f226c62ecd0aca9270b260738655d99f1c8a374f2a17a2edb2345bdb4b7d25fd437807438a31d9442afcf0ccd24c9fbff00c747be229d668e0aba0f0d65cd7974edfb0c101588f522f622b9c8fd4f46a75e3bd878c3a26585f5d0ee0bb9e367812d53185d1c8f15374aa4d10296ae4d9931a97905b742f79375f53141ccbf577ec4f46e16d822bedd6a9d71a8e2d9e1ec73d6f6fe74b11a377345cee345190e448b0f34358736d2d98c745c78a3fc360dbeffc8fa42fab0e9cb348428c8cd422ee71ba3f3fa0f6f73d70602992671bc6d838e1c3ee1b88e51678f0e9f711071631d946f458f93bf8f0c043d936db50b88680c9fb5f7b1c829e58c4814cd2f4ecb801af6b926dc776f56fac6360c0dd51dbfd5449bbeedaae629288db1a9d51bcdf2006a2242b25aff1b97a24815f1a31b94d82a8f8e2b6eb2172e1c2b1cff7aa98d01cd4ba87d266a3f55b2ba738a38adce37a154b14d884f91f7255565eab482a0ce807d4375765c16e1291a5e5576c63072bb64874afd61e606ff0acc3255fdf0fb63911e2cb3665d3b26b319f5c9107799a5a09854e8ba3f6811178b70814acb44fefbe2bde7230d366bc4ffccefd0c49929e8a4be67ec83a782d873c4f6cb84108e72f4c4b5bcb1debcdc154cfd381dce0ce50f81d839f52b442f758a94bba2b844dc96d5ef8d0367b81db44aa36fa4e8f9548af0b317a0b8ad1117047e4f6c138e6ae7328ad9f41a7cf9d4bc9882ecff4255efabe95c44fb35909c118af684ce4f926311554e332adf33e3959a25f7b17229d2698504d1b16f3309b486789d61037214087db5e07465dcb5c3dc135f8af64dc9d011ef85f2bb021ef1d3db18f62b0db9bb54a1d9c816e38157db7e8ada3ecbef99f74d17183980da709830c5b0d64322b75818eccfb3fad9b65416bce12684e15b1feb7e717916cce19a1a97d14d017590730901cb7506151209f904b27e8648feff8a5e0fa748228b20fdedc82e3a9d8cda6b3a694757f302c0be</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">比较sex的东西，需要密码才能进入!</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 性 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣hot100--003</title>
      <link href="/posts/fab21809.html"/>
      <url>/posts/fab21809.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>📖每日更新一道力扣hot100</p></div><div class="note success flat"><p>📚更新于5.18</p></div><hr><h1>3. 无重复字符的最长子串</h1><h2 id="题目描述">题目描述</h2><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p><h2 id="实例">实例</h2><p><strong>示例 1:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">输入: s = &quot;abcabcbb&quot;</span></span><br><span class="line"><span class="section">输出: 3 </span></span><br><span class="line"><span class="section">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span></span><br></pre></td></tr></table></figure><h2 id="示例2：">示例2：</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">输入: s = &quot;bbbbb&quot;</span></span><br><span class="line"><span class="section">输出: 1</span></span><br><span class="line"><span class="section">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span></span><br></pre></td></tr></table></figure><h2 id="示例3：">示例3：</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">输入: s = &quot;pwwkew&quot;</span></span><br><span class="line"><span class="section">输出: 3</span></span><br><span class="line">你的答案必须是 子串 的长度，<span class="string">&quot;pwke&quot;</span> 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure><h2 id="解题思路：">解题思路：</h2><p>查找子串首先想到<strong>移动窗口</strong>，设置开始和结束指针，在字符串中，随着结束指针往后移动，若一直不出现相同的字符，则字符串的长度就是最长子串，但遇到相同的字符，则需要将开始指针指向相同字符所在位置的下一个字符，更新最大子串的长度。更新最长子串的长度要保留被淘汰掉的子串，所以用max（）函数进行比较，保留最长的子串长度。如图所示：</p><p><strong>时间空间复杂度</strong>：O（n^2)、O(1)</p><p><img src="https://s2.loli.net/2022/05/29/FTylHzDCAmrBkbQ.png" alt="image-20220529135837645"></p><h2 id="代码实现：">代码实现：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">length</span><span class="params">(<span class="number">0</span>)</span>,<span class="title">result</span><span class="params">(<span class="number">0</span>)</span>,<span class="title">start</span><span class="params">(<span class="number">0</span>)</span>,<span class="title">end</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span>(end&lt;s.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="type">int</span> tmpChar=s[end];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> index = start; index &lt; end; index++)<span class="comment">//查找可以用hashmap优化</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (tmpChar == s[index])</span><br><span class="line">            &#123;</span><br><span class="line">                start = index + <span class="number">1</span>;</span><br><span class="line">                length = end - start;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        end++;</span><br><span class="line">        length++;</span><br><span class="line">        result=<span class="built_in">max</span>(result,length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为遍历字符串过程中，都需要用for语句判断子串中是否有相同字符出现，所以时间复杂度到了n^2。用hash表的快速查找方法，可以降低一个数量级的时间复杂度。</p><h2 id="代码实现：-2">代码实现：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">length</span><span class="params">(<span class="number">0</span>)</span>,<span class="title">result</span><span class="params">(<span class="number">0</span>)</span>,<span class="title">start</span><span class="params">(<span class="number">0</span>)</span>,<span class="title">end</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; p;</span><br><span class="line">    <span class="keyword">while</span>(end&lt;s.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="type">int</span> tmpChar=s[end];</span><br><span class="line">        <span class="keyword">if</span>(p.<span class="built_in">find</span>(tmpChar) != p.<span class="built_in">end</span>() &amp;&amp; p[tmpChar] &gt;=start)&#123; <span class="comment">//返回迭代器--是一个对象，作用是是遍历选择序列中的对象</span></span><br><span class="line">            <span class="comment">//p.find(tmpChar) != p.end()表示返回的两个迭代器不相等子串中找到了重复的元素。</span></span><br><span class="line">            <span class="comment">//p[tmpChar] &gt;=start 用于避免查到到之前匹配的子串，因为hash不会表中的内容一直在。想象一个hash表，里面存了（a，1）但是start已经因为其他元素更新到2了，这时候通过 int tmpChar=s[end]--p[tmpChar]匹配到的元素确实（a，1）,这是不正确的。</span></span><br><span class="line">            start = p[tmpChar]+<span class="number">1</span>;</span><br><span class="line">            length = end-start;</span><br><span class="line">        &#125;</span><br><span class="line">        p[tmpChar]=end;</span><br><span class="line">        <span class="comment">//p.insert(Mymap::value_type(&#x27;tmpChar&#x27;, end));</span></span><br><span class="line">        end++;</span><br><span class="line">        length++;</span><br><span class="line">        result=<span class="built_in">max</span>(result,length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结：">总结：</h2><p>还有一个用数捅的方法代替hash，本文不做深究。</p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++、算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>局域网内使用FileZilla共享数据</title>
      <link href="/posts/9e27e58c.html"/>
      <url>/posts/9e27e58c.html</url>
      
        <content type="html"><![CDATA[<h1>局域网内使用FileZilla共享数据</h1><h2 id="使用效果">使用效果</h2><h2 id="使用步骤">使用步骤</h2><p>1、先检查两台主机是否可以ping通</p><p>2、确认被连接的那台电脑安装了OPENSSH服务器，一般电脑是不安装的。检查安装之后，需要检查服务器是否启动</p><ul><li>打开控制面板</li><li>选择「管理工具」</li><li>选择「服务」</li><li>在列表中查找「OpenSSH 服务」</li><li>检查该服务的状态是否为「启动」。</li></ul><p>3、在软件内输入ip+用户名+密码+端口即可连接</p><p>4.协议一定选择SFTP，因为在未安装FTP的服务器上，只能选择这个协议进行传输文件；</p>]]></content>
      
      
      <categories>
          
          <category> 共享数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 共享数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法课程</title>
      <link href="/posts/2ed55c05.html"/>
      <url>/posts/2ed55c05.html</url>
      
        <content type="html"><![CDATA[<h2 id="穿过几个点的线段统计">穿过几个点的线段统计</h2><p>穿过几个点的线段统计</p><p>题目描述：平面上有N个点（N&lt;1600），有的线段会穿过多个点，请依据穿过点的个数，对线段进行统计。</p><p>输入：每十个点一行，最后一行可能不足十个点；每行有20个整数（最后一行，可能不足），依次为第一个点的x坐标和y坐标，第二个点的x坐标和y坐标，，，等等。点的个数依据数据决定。</p><p>输出：依据穿过点的数量升序输出：每行两个整数，点的数量k和正好穿过k个点的线段数量，最后一行也有回车。</p><p>输入样例1：0 0 0 1 0 2 1 0 1 1 1 2 2 0 2 1 2 2</p><p>输出样例2：</p><p>2 12</p><p>3 8</p><p>输入样例2：</p><p>0 0 0 1 0 2 0 3 1 0 1 1 1 2 1 3 2 0 2 1</p><p>2 2 2 3 3 0 3 1 3 2 3 3</p><p>输出样例2：</p><p>2 48</p><p>3 4</p><p>4 10</p><h2 id="思路：有一道题是求最长的线段长度，暴力即可解决，原题链接：">思路：有一道题是求最长的线段长度，暴力即可解决，原题链接：</h2><p><a href="https://leetcode.cn/problems/max-points-on-a-line/solution/c-liang-chong-fang-fa-by-heroding-9gso/">C++ 两种方法！ - 直线上最多的点数 - 力扣（LeetCode）</a></p><p>有两种方法，一种3次方，一种二次方。</p><p>二次方方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> len = <span class="number">0</span>;<span class="type">int</span> b[<span class="number">3600</span>][<span class="number">1000</span>];</span><br><span class="line">map&lt;<span class="type">int</span> ,<span class="type">int</span>&gt;a;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">C2</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>, b = <span class="number">1</span>, c = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; --i) a *= i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &gt;= <span class="number">1</span>; --i) b *= i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n<span class="number">-2</span>; i &gt;= <span class="number">1</span>; --i) c *= i;</span><br><span class="line">    <span class="keyword">return</span> a/(b*c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">maxPoints</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 点的数量不够</span></span><br><span class="line">    <span class="comment">// if(len &lt; 3) &#123;</span></span><br><span class="line">    <span class="comment">//     return len;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="type">int</span> maxNum = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历每两个点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++) &#123;</span><br><span class="line">        map&lt;<span class="type">double</span>, <span class="type">int</span>&gt; count;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i != j) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="type">long</span> dx = b[i][<span class="number">0</span>] - b[j][<span class="number">0</span>];</span><br><span class="line">                <span class="type">long</span> <span class="type">long</span> dy = b[i][<span class="number">1</span>] - b[j][<span class="number">1</span>];</span><br><span class="line">                <span class="type">double</span> gradient;</span><br><span class="line">                <span class="keyword">if</span>(dy==<span class="number">0</span>) </span><br><span class="line">                    gradient = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(dx == <span class="number">0</span>)</span><br><span class="line">                    gradient = <span class="number">99999</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                     gradient = dy * <span class="number">1.0</span> / dx;</span><br><span class="line">                <span class="keyword">if</span>(count.<span class="built_in">count</span>(gradient)) &#123;  <span class="comment">// 经过i个点且斜率相同</span></span><br><span class="line">                    count[gradient] ++;</span><br><span class="line">                    </span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    count[gradient] = <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        map&lt;<span class="type">double</span>, <span class="type">int</span>&gt;::iterator iter;</span><br><span class="line">        iter = count.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="keyword">while</span>(iter != count.<span class="built_in">end</span>()) &#123;</span><br><span class="line">            a[iter-&gt;second]++;</span><br><span class="line">            iter++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::iterator iter;</span><br><span class="line">        iter = a.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="keyword">while</span>(iter != a.<span class="built_in">end</span>()) &#123;</span><br><span class="line">            a[iter-&gt;first] = iter-&gt;second / iter-&gt;first;</span><br><span class="line">            iter++;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (cin&gt;&gt;b[len][<span class="number">0</span>]&gt;&gt;b[len][<span class="number">1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        len++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">maxPoints</span>();</span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::iterator iter;</span><br><span class="line">    iter = a.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">while</span>(iter != a.<span class="built_in">end</span>()) &#123;</span><br><span class="line">    cout &lt;&lt; iter-&gt;first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; iter-&gt;second &lt;&lt; endl;</span><br><span class="line">    iter++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" red><summary> 哔哔 </summary>              <div class='content'>              <p>开始用暴力解法，一直出现timeout错误，借用map达到了O（n^2）.</p>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++、算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ChatGPT账号注册教程，详细版！</title>
      <link href="/posts/8b3c5d64.html"/>
      <url>/posts/8b3c5d64.html</url>
      
        <content type="html"><![CDATA[<h1>ChatGPT账号注册教程，详细版！</h1><p>一些兄弟想注册个ChatGPT账号，但是不知道该怎么注册，今天站长就给大家出份完整的账号注册流程，大家且看且珍惜！</p><p>注册ChtaGPT账号简单流程：</p><ol><li>准备一个科学上网工具</li><li>准备一个注册好的谷歌邮箱</li><li>准备一个可以接收ChatGPT短信验证的国外手机号</li><li>注册好ChatGPT 然后开始体验</li></ol><p>具体操作流程：</p><p><strong>1.运行科学上网工具</strong></p><p>科学上网工具自备，站长不分享这种软件，你可以进群寻求大佬们的帮助。</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202302192052334.png" alt="image-20230219205234137"></p><p><strong>2.注册一个谷歌账号</strong></p><p>①打开谷歌浏览器或edge</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202302192054269.png" alt="image-20230219205418076"></p><p>②打开科学上网工具，确认能正常打开谷歌官网</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202302192054943.png" alt="image-20230219205446764"></p><p>③打开Gmail邮箱官方网站https://www.google.com/gmail/about/# ，点击【Create an account】创建账户，并填写注册信息；</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202302192055219.png" alt="image-20230219205543016"></p><p>④区域选择中国，填写国内手机号码,填写找回密码邮箱账号（可选，非必填），然后点击【下一步】，同意隐私和条款，进入欢迎界面后自动登录邮箱，表示已成功注册Google账号。</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202302192057690.png" alt="image-20230219205756627"></p><p><strong>3.注册短信接码平台</strong></p><p>①打开网址：<a href="https://sms-activate.org/cn%EF%BC%8C%E7%84%B6%E5%90%8E%E6%B3%A8%E5%86%8C%E4%B8%80%E4%B8%AA%E8%B4%A6%E5%8F%B7%E3%80%82%E6%B3%A8%E5%86%8C%E5%A1%AB%E5%86%99%E7%9A%84%E9%82%AE%E7%AE%B1%EF%BC%8C%E5%B0%B1%E7%94%A8%E5%88%9A%E6%B3%A8%E5%86%8C%E7%9A%84%E9%82%A3%E4%B8%AA%E3%80%82">https://sms-activate.org/cn，然后注册一个账号。注册填写的邮箱，就用刚注册的那个。</a></p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202302192058362.png" alt="image-20230219205834161"></p><p>②需要充值，因为要购买ChatGPT服务，最低充值1美元，可以用支付宝付款，如果看不懂语言，使用浏览器进行翻译成中文即可。</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202302192059064.png" alt="image-20230219205920848"></p><p><strong>4.注册ChatGPT账号</strong></p><p>①打开ChatGPT官网：<a href="https://beta.openai.com/signup">https://beta.openai.com/signup</a></p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202302192101965.png" alt="image-20230219210107789"></p><p>②使用刚注册好的谷歌邮箱登录，免验证</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202302192107946.png" alt=""></p><p>③回到注册好的接码平台，购买Open AI服务，同时记住提供服务的国家；推荐英格兰。</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202302192103045.png" alt="image-20230219210348841"></p><p>④在电话号码界面选择提供Open AI服务的国家，并粘贴购买接码的号码。</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202302192105066.png" alt="image-20230219210549015"></p><p>⑤粘贴输入收到的短信验证码，注册好ChatGPT账号。</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202302192106873.png" alt="image-20230219210607828"></p><p><strong>5.然后就开始体验ChatGPT吧</strong></p><hr><p>最后，欢迎进群769481240</p><p>实在不会注册，或者懒得注册的兄弟，可以添加下方微信，付费帮忙注册。</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202302192117375.png" alt="image-20230219211718311"></p>]]></content>
      
      
      <categories>
          
          <category> chatgpt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chatgpt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>latex+vscode</title>
      <link href="/posts/a9d63313.html"/>
      <url>/posts/a9d63313.html</url>
      
        <content type="html"><![CDATA[<p>copy这位大佬：</p><p><a href="https://mirclea.github.io/2022/09/18/Latex/#latex%E7%9A%84vscode%E9%85%8D%E7%BD%AE">Latex入门 | Mirclea’s blog</a></p><hr><h2 id="Latex的下载：">Latex的下载：</h2><ul><li>下载latex镜像文件，下载地址点击<a href="https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/">这里</a>可以进入</li></ul><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202209271802542.png" alt="image-20220927180227455"></p><p>对于这种.iso文件直接利用win10自带的虚拟光驱打开即可，不需要再额外下载其他虚拟光驱软件</p><h2 id="配置vscode-setting文件">配置vscode setting文件</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;workbench.startupEditor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;workbench.colorTheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Visual Studio Dark&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;backgroundCover.imagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;d:\\photo\\wallper\\68048370_p0.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;backgroundCover.opacity&quot;</span><span class="punctuation">:</span> <span class="number">0.5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;java.home&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\Program Files\\Java\\jre8&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;files.autoSave&quot;</span><span class="punctuation">:</span> <span class="string">&quot;afterDelay&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;files.encoding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gbk&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;latex-workshop.latex.autoBuild.run&quot;</span><span class="punctuation">:</span> <span class="string">&quot;never&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.showContextMenu&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.intellisense.package.enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.message.error.show&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.message.warning.show&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.latex.tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;-synctex=1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-interaction=nonstopmode&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-file-line-error&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pdflatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pdflatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;-synctex=1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-interaction=nonstopmode&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-file-line-error&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;latexmk&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;latexmk&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;-synctex=1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-interaction=nonstopmode&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-file-line-error&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-pdf&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-outdir=%OUTDIR%&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bibtex&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bibtex&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.latex.recipes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;XeLaTeX&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;xelatex&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PDFLaTeX&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;pdflatex&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;BibTeX&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;bibtex&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LaTeXmk&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;latexmk&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xelatex -&gt; bibtex -&gt; xelatex*2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;bibtex&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;xelatex&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pdflatex -&gt; bibtex -&gt; pdflatex*2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;pdflatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;bibtex&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;pdflatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;pdflatex&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.latex.clean.fileTypes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;*.aux&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.bbl&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.blg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.idx&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.ind&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.lof&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.lot&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.out&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.toc&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.acn&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.acr&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.alg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.glg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.glo&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.gls&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.ist&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.fls&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.log&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.fdb_latexmk&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.latex.autoClean.run&quot;</span><span class="punctuation">:</span> <span class="string">&quot;onFailed&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.latex.recipe.default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lastUsed&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.view.pdf.internal.synctex.keybinding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;double-click&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.view.pdf.viewer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tab&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;latex-workshop.view.pdf.external.viewer.command&quot;</span><span class="punctuation">:</span></span><br><span class="line">    <span class="string">&quot;D:/xunleidownload/SumatraPDF.exe&quot;</span><span class="punctuation">,</span>  <span class="comment">//注意修改路径</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.view.pdf.external.viewer.args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;%PDF%&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.view.pdf.external.synctex.command&quot;</span><span class="punctuation">:</span></span><br><span class="line">    <span class="string">&quot;D:/xunleidownload/SumatraPDF.exe&quot;</span><span class="punctuation">,</span>  <span class="comment">//注意修改路径</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.view.pdf.external.synctex.args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;-forward-search&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;%TEX%&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;%LINE%&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;%PDF%&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;[latex]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    </span><br><span class="line">        <span class="attr">&quot;editor.formatOnPaste&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;editor.suggestSelection&quot;</span><span class="punctuation">:</span> <span class="string">&quot;recentlyUsedByPrefix&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>其中latex中的setting.json</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202209272329865.png" alt="image-20220927232946787"></p><h2 id="打开SumatraPDF设置中高级选项，替换如下代码（路径改成自己的）">打开SumatraPDF设置中高级选项，替换如下代码（路径改成自己的）</h2><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># For documentation, see https://www.sumatrapdfreader.org/settings/settings3-4-6.html</span></span><br><span class="line">FixedPageUI [</span><br><span class="line"><span class="attr">TextColor</span> = <span class="comment">#000000</span></span><br><span class="line"><span class="attr">BackgroundColor</span> = <span class="comment">#ffffff</span></span><br><span class="line"><span class="attr">SelectionColor</span> = <span class="comment">#f5fc0c</span></span><br><span class="line"><span class="attr">WindowMargin</span> = <span class="number">2</span> <span class="number">4</span> <span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="attr">PageSpacing</span> = <span class="number">4</span> <span class="number">4</span></span><br><span class="line"><span class="attr">HideScrollbars</span> = <span class="literal">false</span></span><br><span class="line">]</span><br><span class="line">ComicBookUI [</span><br><span class="line"><span class="attr">WindowMargin</span> = <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="attr">PageSpacing</span> = <span class="number">4</span> <span class="number">4</span></span><br><span class="line"><span class="attr">CbxMangaMode</span> = <span class="literal">false</span></span><br><span class="line">]</span><br><span class="line">ChmUI [</span><br><span class="line"><span class="attr">UseFixedPageUI</span> = <span class="literal">false</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">SelectionHandlers [</span><br><span class="line">]</span><br><span class="line">ExternalViewers [</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="attr">ZoomLevels</span> = <span class="number">8.33</span> <span class="number">12.5</span> <span class="number">18</span> <span class="number">25</span> <span class="number">33.33</span> <span class="number">50</span> <span class="number">66.67</span> <span class="number">75</span> <span class="number">100</span> <span class="number">125</span> <span class="number">150</span> <span class="number">200</span> <span class="number">300</span> <span class="number">400</span> <span class="number">600</span> <span class="number">800</span> <span class="number">1000</span> <span class="number">1200</span> <span class="number">1600</span> <span class="number">2000</span> <span class="number">2400</span> <span class="number">3200</span> <span class="number">4800</span> <span class="number">6400</span></span><br><span class="line"><span class="attr">ZoomIncrement</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">PrinterDefaults [</span><br><span class="line"><span class="attr">PrintScale</span> = shrink</span><br><span class="line">]</span><br><span class="line">ForwardSearch [</span><br><span class="line"><span class="attr">HighlightOffset</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">HighlightWidth</span> = <span class="number">15</span></span><br><span class="line"><span class="attr">HighlightColor</span> = <span class="comment">#6581ff</span></span><br><span class="line"><span class="attr">HighlightPermanent</span> = <span class="literal">false</span></span><br><span class="line">]</span><br><span class="line">Annotations [</span><br><span class="line"><span class="attr">HighlightColor</span> = <span class="comment">#ffff00</span></span><br><span class="line"><span class="attr">UnderlineColor</span> = <span class="comment">#00ff00</span></span><br><span class="line"><span class="attr">TextIconColor</span> = <span class="comment">#ffff00</span></span><br><span class="line"><span class="attr">TextIconType</span> = </span><br><span class="line"><span class="attr">DefaultAuthor</span> = </span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="attr">RememberOpenedFiles</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">RememberStatePerDocument</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">RestoreSession</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">UiLanguage</span> = cn</span><br><span class="line"><span class="attr">InverseSearchCmdLine</span> = <span class="string">&quot;F:\vscode\Microsoft VS Code\Code.exe&quot;</span> <span class="string">&quot;F:\vscode\Microsoft VS Code\resources\app\out\cli.js&quot;</span>  --ms-enable-electron-run-as-node -r -g <span class="string">&quot;%f:%l&quot;</span></span><br><span class="line"><span class="attr">EnableTeXEnhancements</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">DefaultDisplayMode</span> = automatic</span><br><span class="line"><span class="attr">DefaultZoom</span> = fit page</span><br><span class="line">Shortcuts [</span><br><span class="line">]</span><br><span class="line"><span class="attr">EscToExit</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">ReuseInstance</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">ReloadModifiedDocuments</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">MainWindowBackground</span> = <span class="comment">#80fff200</span></span><br><span class="line"><span class="attr">FullPathInTitle</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">ShowMenubar</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">ShowToolbar</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">ShowFavorites</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">ShowToc</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">TocDy</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">SidebarDx</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">ToolbarSize</span> = <span class="number">18</span></span><br><span class="line"><span class="attr">TabWidth</span> = <span class="number">300</span></span><br><span class="line"><span class="attr">TreeFontSize</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">SmoothScroll</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">ShowStartPage</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">CheckForUpdates</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">WindowState</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">WindowPos</span> = <span class="number">0</span> <span class="number">0</span> <span class="number">1921</span> <span class="number">1030</span></span><br><span class="line"><span class="attr">UseTabs</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">UseSysColors</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">CustomScreenDPI</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">FileStates [</span><br><span class="line">[</span><br><span class="line"><span class="attr">FilePath</span> = c:\Users\<span class="number">29133</span>\Desktop\latex\test.pdf</span><br><span class="line">Favorites [</span><br><span class="line">]</span><br><span class="line"><span class="attr">IsPinned</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">IsMissing</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">OpenCount</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">UseDefaultState</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">DisplayMode</span> = continuous</span><br><span class="line"><span class="attr">ScrollPos</span> = -<span class="number">1</span> <span class="number">53.8129</span></span><br><span class="line"><span class="attr">PageNo</span> = <span class="number">8</span></span><br><span class="line"><span class="attr">Zoom</span> = <span class="number">200</span></span><br><span class="line"><span class="attr">Rotation</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">WindowState</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">WindowPos</span> = <span class="number">0</span> <span class="number">0</span> <span class="number">1921</span> <span class="number">1030</span></span><br><span class="line"><span class="attr">ShowToc</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">SidebarDx</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">DisplayR2L</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">ReparseIdx</span> = <span class="number">0</span></span><br><span class="line">]</span><br><span class="line">[</span><br><span class="line"><span class="attr">FilePath</span> = d:\Projcets\latex\Home1\conference_101719.pdf</span><br><span class="line">Favorites [</span><br><span class="line">]</span><br><span class="line"><span class="attr">IsPinned</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">IsMissing</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">OpenCount</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">UseDefaultState</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">DisplayMode</span> = continuous</span><br><span class="line"><span class="attr">ScrollPos</span> = -<span class="number">1</span> <span class="number">624.14</span></span><br><span class="line"><span class="attr">PageNo</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">Zoom</span> = fit page</span><br><span class="line"><span class="attr">Rotation</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">WindowState</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">WindowPos</span> = <span class="number">197</span> <span class="number">46</span> <span class="number">803</span> <span class="number">1026</span></span><br><span class="line"><span class="attr">ShowToc</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">SidebarDx</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">DisplayR2L</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">ReparseIdx</span> = <span class="number">0</span></span><br><span class="line">]</span><br><span class="line">[</span><br><span class="line"><span class="attr">FilePath</span> = d:\downloader\压缩文件\latex-templates\ieee\bare_jrnl.pdf</span><br><span class="line">Favorites [</span><br><span class="line">]</span><br><span class="line"><span class="attr">IsPinned</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">IsMissing</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">OpenCount</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">UseDefaultState</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">DisplayMode</span> = continuous</span><br><span class="line"><span class="attr">ScrollPos</span> = -<span class="number">1</span> -<span class="number">1</span></span><br><span class="line"><span class="attr">PageNo</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">Zoom</span> = fit page</span><br><span class="line"><span class="attr">Rotation</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">WindowState</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">WindowPos</span> = <span class="number">197</span> <span class="number">46</span> <span class="number">803</span> <span class="number">1026</span></span><br><span class="line"><span class="attr">ShowToc</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">SidebarDx</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">DisplayR2L</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">ReparseIdx</span> = <span class="number">0</span></span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line">SessionData [</span><br><span class="line">]</span><br><span class="line"><span class="attr">TimeOfLastUpdateCheck</span> = <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="attr">OpenCountWeek</span> = <span class="number">612</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Settings below are not recognized by the current version</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="latex语法">latex语法</h3><p>由于latex语法比较多且有点乱(本人学的也不太明白)，</p><p>我们可以通过<a href="https://github.com/CTeX-org/lshort-zh-cn">这里</a>找到latex手册进行学习</p><p>一些简单的常用的语法建议看一下这个<a href="https://www.bilibili.com/video/BV11h41127FD?from=search&amp;seid=12274189218691696421&amp;spm_id_from=333.337.0.0&amp;vd_source=57e5130c3375ea877ab660ca10500f21">视频</a></p>]]></content>
      
      
      <categories>
          
          <category> latex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> latex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA小计</title>
      <link href="/posts/71ecb9e.html"/>
      <url>/posts/71ecb9e.html</url>
      
        <content type="html"><![CDATA[<h1>java学习笔记</h1><h2 id="第一个Java程序">第一个Java程序</h2><p><strong>运行</strong></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">javac </span>HelloWorld.<span class="keyword">java</span></span><br><span class="line"><span class="keyword"></span>$ <span class="keyword">java </span>HelloWorld </span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure><h2 id="基本语法">基本语法</h2><ul><li><strong>大小写敏感</strong>：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。</li><li><strong>源文件名</strong>：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 <strong>.java</strong>。（如果文件名和类名不相同则会导致编译错误）。</li><li><strong>主方法入口</strong>：所有的 Java 程序由 <strong>public static void main(String[] args)</strong> 方法开始执行。</li></ul><h2 id="Java-标识符">Java 标识符</h2><p>Java 所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。</p><p>关于 Java 标识符，有以下几点需要注意：</p><ul><li><strong>所有的标识符都应该以字母（A-Z 或者 a-z）,美元符（$）、或者下划线（_）开始</strong></li><li>首字符之后可以是字母（A-Z 或者 a-z）,美元符（$）、下划线（_）或数字的任何字符组合</li><li>关键字不能用作标识符</li><li>标识符是大小写敏感的</li><li>合法标识符举例：age、$salary、_value、__1_value</li><li>非法标识符举例：123abc、-salary</li></ul><h2 id="Java-源程序与编译型运行区别">Java 源程序与编译型运行区别</h2><p>如下图所示：</p><p><img src="https://www.runoob.com/wp-content/uploads/2013/12/ZSSDMld.png" alt="img"></p><h2 id="IDEA快捷键">IDEA快捷键</h2><p>复制，删除、删除一行，粘贴一行在keymap修改：</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230426144029475.png" alt="image-20230426144029475"></p><p>快速导入需要的包：</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230426143950683.png" alt="image-20230426143950683"></p><p>alt+ins 自动生成构造函数</p><p>ctrl+H 查看类的层次</p><p>ctrl+B 查看方法</p><p>在后面.var 可自动分配变量名</p><h2 id="Java-包">Java 包</h2><p>包主要用来对类和接口进行分类。在同一个目录下的Java文件中，类可以相互访问。</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230426153421561.png" alt="image-20230426153421561"></p><h2 id="Java-常量">Java 常量</h2><p>常量在程序运行时是不能被修改的。</p><p>在 Java 中使用 final 关键字来修饰常量，声明方式和变量类似：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">double</span> <span class="literal">PI</span> = <span class="number">3.1415927</span>;</span><br></pre></td></tr></table></figure><p>虽然常量名也可以用小写，但为了便于识别，通常使用大写字母表示常量。</p><h1>Java 基本数据类型</h1><p>下表列出了 Java 各个类型的默认值：</p><table><thead><tr><th style="text-align:left"><strong>数据类型</strong></th><th style="text-align:left"><strong>默认值</strong></th></tr></thead><tbody><tr><td style="text-align:left">byte</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">short</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">int</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">long</td><td style="text-align:left">0L</td></tr><tr><td style="text-align:left">float</td><td style="text-align:left">0.0f</td></tr><tr><td style="text-align:left">double</td><td style="text-align:left">0.0d</td></tr><tr><td style="text-align:left">char</td><td style="text-align:left">‘u0000’</td></tr><tr><td style="text-align:left">String (or any object)</td><td style="text-align:left">null</td></tr><tr><td style="text-align:left">boolean</td><td style="text-align:left">false</td></tr></tbody></table><h2 id="自动类型转换">自动类型转换</h2><p><strong>整型、实型（常量）、字符型数据可以混合运算。运算中，不同类型的数据先转化为同一类型，然后进行运算。</strong></p><p>转换从低级到高级。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">低  ------------------------------------&gt;  高</span><br><span class="line"></span><br><span class="line"><span class="type">byte</span>,<span class="type">short</span>,<span class="type">char</span>—&gt; <span class="type">int</span> —&gt; <span class="type">long</span>—&gt; <span class="type">float</span> —&gt; <span class="type">double</span> </span><br></pre></td></tr></table></figure><p>数据类型转换必须满足如下规则：</p><ul><li><ol><li>不能对boolean类型进行类型转换。</li></ol></li><li><ol start="2"><li>不能把对象类型转换成不相关类的对象。</li></ol></li><li><ol start="3"><li>在把容量大的类型转换为容量小的类型时必须使用强制类型转换。</li></ol></li><li><ol start="4"><li>转换过程中可能导致溢出或损失精度，例如：</li></ol><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int i <span class="operator">=</span><span class="number">128</span><span class="comment">;   </span></span><br><span class="line">byte b <span class="operator">=</span> (byte)i<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>因为 byte 类型是 8 位，最大值为127，所以当 int 强制转换为 byte 类型时，值 128 时候就会导致溢出。</p></li><li><ol start="5"><li>浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入，例如：</li></ol><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(int)<span class="number">23.7</span> <span class="operator">=</span><span class="operator">=</span> <span class="number">23</span><span class="comment">;        </span></span><br><span class="line">(int)-<span class="number">45.89</span>f <span class="operator">=</span><span class="operator">=</span> -<span class="number">45</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="访问控制修饰符">访问控制修饰符</h2><p>Java中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。</p><ul><li><strong>default</strong> (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</li><li><strong>private</strong> : 在同一类内可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong></li><li><strong>public</strong> : 对所有类可见。使用对象：类、接口、变量、方法</li><li><strong>protected</strong> : 对同一包内的类和所有子类可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong>。</li></ul><p>我们可以通过以下表来说明访问权限：</p><table><thead><tr><th style="text-align:left"><strong>修饰符</strong></th><th style="text-align:left"><strong>同一 个类中</strong></th><th style="text-align:left"><strong>同一个包中</strong>  <strong>其他类</strong></th><th style="text-align:left"><strong>不同包下的</strong>  <strong>子类</strong></th><th style="text-align:left"><strong>不同包下的</strong>  <strong>无关类</strong></th></tr></thead><tbody><tr><td style="text-align:left">private</td><td style="text-align:left">√</td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">缺省</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">protected</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">public</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">√</td></tr></tbody></table><h2 id="Static">Static</h2><p>static静态成员和实例成员总结</p><p>1、静态成员是类中独一份的，所有对象共享的。</p><p>2、方法的使用场景：</p><ul><li>以执行一个通用功能为目的，需要方便访问的，使用静态方法</li><li>表示对象自己行为的，且方法需要直接访问实例成员，使用实例方法</li></ul><p>3、静态成员在函数执行时就放入堆区，函数调用时放入栈区</p><p><strong>注意事项</strong>（静态是提前放入堆区的）</p><p>1、静态方法只能访问静态成员，不可以访问实例成员</p><p>2、实例方法可以访问静态成员，也可以访问实例成员</p><p>3、静态方法不可以出现this关键字（this代表当前对象）</p><h2 id="Static工具类">Static工具类</h2><p>为了实现一些方便调用的公共函数，比如生成验证码。</p><p>优点：1、方便调用2、可复用</p><p>为什么不用实例方法：因为实例方法需要创建对象来调用，浪费内存</p><p>tip：因为静态方法不需要实例对象来调用，可以把构造器私有</p><h2 id="Static代码块">Static代码块</h2><p>1、</p><p>静态：是一个通常用于在类加载的时候做的一些静态数据初始化操作，在mian（）函数之前执行</p><p>实例：初始化实例变量，在构造器执行之前执行</p><p>2、</p><p>3、</p><p>静态：static{}</p><p>实例：{}</p><p>4、案例：扑克牌</p><h2 id="Static模式">Static模式</h2><p>1、</p><p>饿汉单例模式:在获取对象前，对象已经提前准备好了一个</p><p>2、</p><p>实现任务管理器之类的情况（只打开一个对象）</p><p>3、</p><p>把构造器私有、定义静态变量存储一个new对象。</p><hr><p>1、</p><p>懒汉单例模式：在真正需要该对象的时候，才创建一个对象（延迟加载对象）</p><p>2、</p><p>3、</p><p>构造器私有化</p><p>定义静态变量存储一个对象不new</p><p>提供一个返回单例对象的方法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">hungre</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * 设置为私有是为了防止别人直接调用未初始化的对象*/</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">static</span> hungre hungre;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="type">static</span> hungre <span class="title">ret</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (hungre == null)</span><br><span class="line">           hungre = <span class="keyword">new</span> <span class="built_in">hungre</span>();</span><br><span class="line">       <span class="keyword">return</span> hungre;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="继承">继承</h2><p>1、</p>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>头脑风暴--海康SDK</title>
      <link href="/posts/c222124a.html"/>
      <url>/posts/c222124a.html</url>
      
        <content type="html"><![CDATA[<p>头脑风暴–海康SDK</p><p>看看友商是怎么做的。最大的友商就是萤石云了，那萤石云是如何获取我们的视频数据的呢？</p><p>首先需要我们在本地配置绑定好萤石云账号，绑定我们的摄像头，比如ip和端口和密码。通过这些，萤石云可以从网络上调用到我们的摄像头数据，从而将我们的摄像头数据实时调用过去，这样还是占用我们用户网络的带宽，而且为了检测警报和回放之类的信息，萤石云平台肯定会一直调取我们的摄像头数据。这样我们用户的数据隐私都在萤石云的云存储器上了，非常不安全。</p><p>那么如何才能把数据把握在自己手中呢？</p><p>我们的任务就是把云服务器和本地服务器相结合，云服务器负责把本地服务器内网穿透（反向代理）到公网当中，使用公网ip就能访问到本地局域网内的服务器，本地服务器负责调取我们实验室的摄像头数据，通过软件或者视频流的方式，调取我们的视频数据并存储在本地，再在本地服务器上显示我们的视频。</p><p>这样数据放在本地，且只占用我们局域网内的带宽，并不占用局域网到公网的带宽。</p><p>所以海康威视SDK是我们之后开发的重点！！！</p><p>如何调取回放数据</p><p>如何实时播放数据</p>]]></content>
      
      
      
        <tags>
            
            <tag> 海康SDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>螺旋矩阵总结</title>
      <link href="/posts/27a9b1db.html"/>
      <url>/posts/27a9b1db.html</url>
      
        <content type="html"><![CDATA[<h1>二分查找总结</h1><details class="folding-tag" pink><summary> 哔哔 </summary>              <div class='content'>              <p>这类题目考察一些输入输出的技巧，通常记录上下左右的偏移位置达到想要的结果。</p><p>​类似题目</p><ul><li>54.螺旋矩阵</li><li>剑指Offer 29.顺时针打印矩阵</li></ul>              </div>            </details><h2 id="59-螺旋矩阵II">59.螺旋矩阵II</h2><p><a href="https://leetcode.cn/problems/spiral-matrix-ii/">力扣题目链接(opens new window)</a></p><p>给定一个正整数 n，生成一个包含 1 到 n^2 所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。</p><p>示例:</p><p>输入: 3 输出: [ [ 1, 2, 3 ], [ 8, 9, 4 ], [ 7, 6, 5 ] ]</p><h2 id="思路">思路</h2><h2 id="代码">代码</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">generateMatrix</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,cnt=<span class="number">1</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">a</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line">        <span class="type">int</span> loop = n/<span class="number">2</span>;<span class="comment">//循环次数</span></span><br><span class="line">        <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(loop--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(j;j&lt;n<span class="number">-1</span>-t;j++)</span><br><span class="line">                a[i][j] = cnt++;</span><br><span class="line">            <span class="keyword">for</span>(i;i&lt;n<span class="number">-1</span>-t;i++)</span><br><span class="line">                a[i][j] = cnt++;</span><br><span class="line">            <span class="keyword">for</span>(j;j&gt;<span class="number">0</span>+t;j--)</span><br><span class="line">                a[i][j] = cnt++;</span><br><span class="line">            <span class="keyword">for</span>(i;i&gt;<span class="number">0</span>+t;i--)</span><br><span class="line">                a[i][j] = cnt++;</span><br><span class="line">            <span class="comment">//i = 0 j = 0</span></span><br><span class="line">            i++;j++;t++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">            a[n/<span class="number">2</span>][n/<span class="number">2</span>] = cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="类似题目">类似题目</h2><h4 id="剑指-Offer-29-顺时针打印矩阵"><a href="https://leetcode.cn/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/">剑指 Offer 29. 顺时针打印矩阵</a></h4><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = <span class="comment">[<span class="comment">[1,2,3]</span>,<span class="comment">[4,5,6]</span>,<span class="comment">[7,8,9]</span>]</span></span><br><span class="line">输出：<span class="comment">[1,2,3,6,9,8,7,4,5]</span></span><br></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">2</span>：</span><br><span class="line">输入：matrix = [[<span class="number">1,2,3,4</span>],[<span class="number">5,6,7,8</span>],[<span class="number">9,10,11,12</span>]]</span><br><span class="line">输出：[<span class="number">1,2,3,4</span>,<span class="number">8,12,11,10</span>,<span class="number">9,5,6,7</span>]</span><br></pre></td></tr></table></figure><h2 id="思路-2">思路</h2><h2 id="代码-2">代码</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Solution &#123;</span><br><span class="line">public:</span><br><span class="line">       vector&lt;<span class="built_in">int</span>&gt; spiral<span class="constructor">Order(<span class="params">vector</span>&lt;<span class="params">vector</span>&lt;<span class="params">int</span>&gt;&gt;&amp; <span class="params">matrix</span>)</span> &#123;</span><br><span class="line">        vector &lt;<span class="built_in">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">if</span>(matrix.empty<span class="literal">()</span>) return res;</span><br><span class="line">        <span class="built_in">int</span> rl = <span class="number">0</span>, rh = matrix.size<span class="literal">()</span>-<span class="number">1</span>; <span class="comment">//记录待打印的矩阵上下边缘</span></span><br><span class="line">        <span class="built_in">int</span> cl = <span class="number">0</span>, ch = matrix<span class="literal">[<span class="number">0</span>]</span>.size<span class="literal">()</span>-<span class="number">1</span>; <span class="comment">//记录待打印的矩阵左右边缘</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i=cl; i&lt;=ch; i++) res.push<span class="constructor">_back(<span class="params">matrix</span>[<span class="params">rl</span>][<span class="params">i</span>])</span>;<span class="comment">//从左往右</span></span><br><span class="line">            <span class="keyword">if</span>(++rl &gt; rh) break; <span class="comment">//往下走（rl++），若超出边界，退出</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i=rl; i&lt;=rh; i++) res.push<span class="constructor">_back(<span class="params">matrix</span>[<span class="params">i</span>][<span class="params">ch</span>])</span>;<span class="comment">//从上往下</span></span><br><span class="line">            <span class="keyword">if</span>(--ch &lt; cl) break;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i=ch; i&gt;=cl; i--) res.push<span class="constructor">_back(<span class="params">matrix</span>[<span class="params">rh</span>][<span class="params">i</span>])</span>;<span class="comment">//从右往左</span></span><br><span class="line">            <span class="keyword">if</span>(--rh &lt; rl) break;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i=rh; i&gt;=rl; i--) res.push<span class="constructor">_back(<span class="params">matrix</span>[<span class="params">i</span>][<span class="params">cl</span>])</span>;<span class="comment">//从下往上</span></span><br><span class="line">            <span class="keyword">if</span>(++cl &gt; ch) break;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法、c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下epoll_BS服务器开发</title>
      <link href="/posts/ee0cabc9.html"/>
      <url>/posts/ee0cabc9.html</url>
      
        <content type="html"><![CDATA[<h1>部署epoll_BS</h1><p>代码已经上传到github了</p><p>注意在master分支下</p><p>项目地址：<a href="https://github.com/jack8luo/epoll_BS">jack8luo/epoll_BS: linux下的一个基于epoll多路IO转发的本地文件传输服务器。没有做压力测试，没有使用线程池。 (github.com)</a></p><h2 id="远程操作服务器SSH：">远程操作服务器SSH：</h2><p>下载一个连接服务器的软件——securecrx可以远程操作服务器。需要在服务器上安装ssh服务</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开机自动启动ssh命令</span></span><br><span class="line">sudo <span class="params">system</span>ctl enable ssh</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 关闭ssh开机自动启动命令</span></span><br><span class="line">sudo <span class="params">system</span>ctl disable ssh</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 单次开启ssh</span></span><br><span class="line">sudo <span class="params">system</span>ctl start ssh</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 单次关闭ssh</span></span><br><span class="line">sudo <span class="params">system</span>ctl stop ssh</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 设置好后重启系统</span></span><br><span class="line"><span class="keyword">reboot</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#查看ssh是否启动，看到Active: active (running)即表示成功</span></span><br><span class="line">sudo <span class="params">system</span>ctl status ssh</span><br></pre></td></tr></table></figure><h2 id="远程复制服务器文件FTP">远程复制服务器文件FTP</h2><p>使用 FileZilla 工具互传<br>FileZilla是一款免费的工具，是基于 FTP 协议进行文件互传的，在传输过程中我们的ubuntu是作为服务器， FileZilla 工具则是作为客户端。</p><p>2.1 ubuntu安装 FTP服务<br>在ubuntu终端下输入如下命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install vsftpd</span><br></pre></td></tr></table></figure><p>安装完之后检查 /etc/vsftpd.conf 配置文件</p><p>输入如下命令打开配置文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi  <span class="regexp">/etc/</span>vsftpd.conf</span><br></pre></td></tr></table></figure><p>然后检查下图 28 和 31 行的内容是否有被注释掉，如果前面有 “#” 号注释起来的话，就去掉即可。</p><p>修改完之后，重启FTP服务，如下命令：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="regexp">/etc/i</span>nit.d/vsftpd restart</span><br></pre></td></tr></table></figure><p>2.2 windows安装和配置FileZilla<br>FileZilla 客户端下载和安装</p><p>FileZilla工具可以去官网下载即可，<a href="https://www.filezilla.cn/download">https://www.filezilla.cn/download</a></p><p>我们要安装的是客户端，选择对应版本的客户端下载，然后一路 next 安装即可。</p><p>FileZilla 软件配置和连接ubuntu</p><p>打开 FileZilla 软件，然后选择：文件 -&gt; 站点管理器 -&gt; 点击新增站点，然后配置连接参数，如下图：</p><p>点击连接之后，就可以看到ubuntu下的文件了，如下图：</p><p><img src="https://img-blog.csdnimg.cn/325c85dc4a7b438cbd55469772cc863f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbHVvYmVpaGFp,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>我们要把windows的文件拷贝到ubuntu中，直接在左侧把windows下的目录文件拖到右侧ubuntu中指定的目录即可。</p><h2 id="push代码中遇到的问题">push代码中遇到的问题</h2><p><a href="https://blog.csdn.net/gongdamrgao/article/details/115032436">关于git的问题：error: src refspec main does not match any_TripleGold.的博客-CSDN博客</a></p><hr><p>至此，Linux已经学习完了，系统编程是做了相关的md文件笔记和思维导图，网络编程做的是思维导图</p><p>需要资料的请添加我的微信：lh18779121256</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux线程Day9</title>
      <link href="/posts/780c04f8.html"/>
      <url>/posts/780c04f8.html</url>
      
        <content type="html"><![CDATA[<p>守护进程：</p><pre><code>daemon进程。通常运行与操作系统后台，脱离控制终端。一般不与用户直接交互。周期性的等待某个事件发生或周期性执行某一动作。不受用户登录注销影响。通常采用以d结尾的命名方式。</code></pre><p>守护进程创建步骤：</p><pre><code>1. fork子进程，让父进程终止。2. 子进程调用 setsid() 创建新会话3. 通常根据需要，改变工作目录位置 chdir()， 防止目录被卸载。4. 通常根据需要，重设umask文件权限掩码，影响新文件的创建权限。  022 -- 7550345 --- 432   r---wx-w-   4225. 通常根据需要，关闭/重定向 文件描述符6. 守护进程 业务逻辑。while（）</code></pre><p>=============================================================</p><p>线程概念：</p><pre><code>进程：有独立的 进程地址空间。有独立的pcb。分配资源的最小单位。线程：有独立的pcb。没有独立的进程地址空间。最小单位的执行。ps -Lf 进程id ---&gt; 线程号。LWP  --》cpu 执行的最小单位。</code></pre><p>线程共享：</p><pre><code>独享 栈空间（内核栈、用户栈）共享 ./text./data ./rodataa ./bsss heap  ---&gt; 共享【全局变量】（errno）</code></pre><p>线程控制原语：</p><pre><code>pthread_t pthread_self(void);获取线程id。 线程id是在进程地址空间内部，用来标识线程身份的id号。返回值：本线程id检查出错返回：  线程中。fprintf(stderr, &quot;xxx error: %s\n&quot;, strerror(ret));int pthread_create(pthread_t *tid, const pthread_attr_t *attr, void *(*start_rountn)(void *), void *arg); 创建子线程。参1：传出参数，表新创建的子线程 id参2：线程属性。传NULL表使用默认属性。参3：子线程回调函数。创建成功，ptherad_create函数返回时，该函数会被自动调用。参4：参3的参数。没有的话，传NULL返回值：成功：0失败：errno循环创建N个子线程：for （i = 0； i &lt; 5; i++）pthread_create(&amp;tid, NULL, tfn, (void *)i);   // 将 int 类型 i， 强转成 void *， 传参。void pthread_exit(void *retval);  退出当前线程。retval：退出值。 无退出值时，NULLexit();退出当前进程。return: 返回到调用者那里去。pthread_exit(): 退出当前线程。int pthread_join(pthread_t thread, void **retval);阻塞 回收线程。thread: 待回收的线程idretval：传出参数。 回收的那个线程的退出值。线程异常借助，值为 -1。返回值：成功：0失败：errnoint pthread_detach(pthread_t thread);设置线程分离thread: 待分离的线程id</code></pre><p>​<br>返回值：成功：0</p><pre><code>失败：errnoint pthread_cancel(pthread_t thread);杀死一个线程。  需要到达取消点（保存点）thread: 待杀死的线程id返回值：成功：0失败：errno如果，子线程没有到达取消点， 那么 pthread_cancel 无效。我们可以在程序中，手动添加一个取消点。使用 pthread_testcancel();成功被 pthread_cancel() 杀死的线程，返回 -1.使用pthead_join 回收。线程控制原语进程控制原语pthread_create()fork();pthread_self()getpid();pthread_exit()exit(); / return pthread_join()wait()/waitpid()pthread_cancel()kill()pthread_detach()</code></pre><p>线程属性：</p><pre><code>设置分离属性。pthread_attr_t attr  创建一个线程属性结构体变量pthread_attr_init(&amp;attr);初始化线程属性pthread_attr_setdetachstate(&amp;attr,  PTHREAD_CREATE_DETACHED);设置线程属性为 分离态pthread_create(&amp;tid, &amp;attr, tfn, NULL); 借助修改后的 设置线程属性 创建为分离态的新线程pthread_attr_destroy(&amp;attr);销毁线程属性</code></pre><p>不要在程序中同时用线程和信号。</p><p>​</p><p>​</p><p>​</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux信号Day8</title>
      <link href="/posts/2e7d981b.html"/>
      <url>/posts/2e7d981b.html</url>
      
        <content type="html"><![CDATA[<p>信号共性：</p><pre><code>简单、不能携带大量信息、满足条件才发送。</code></pre><p>信号的特质：</p><pre><code>信号是软件层面上的“中断”。一旦信号产生，无论程序执行到什么位置，必须立即停止运行，处理信号，处理结束，再继续执行后续指令。所有信号的产生及处理全部都是由【内核】完成的。</code></pre><p>信号相关的概念：</p><blockquote><p>产生信号：</p><ol><li>按键产生</li><li>系统调用产生</li><li>软件条件产生</li><li>硬件异常产生</li><li>命令产生</li></ol><p>概念：<br>未决：产生与递达之间状态。</p><p>​递达：产生并且送达到进程。直接被内核处理掉。</p><p>​信号处理方式： 执行默认处理动作、忽略、捕捉（自定义）</p></blockquote><blockquote><p>​阻塞信号集（信号屏蔽字）： 本质：位图。用来记录信号的屏蔽状态。一旦被屏蔽的信号，在解除屏蔽前，一直处于未决态。</p><p>​未决信号集：本质：位图。用来记录信号的处理状态。该信号集中的信号，表示，已经产生，但尚未被处理。</p></blockquote><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230406101059515.png" alt="阻塞和未决"></p><p>kill库函数 kill（pid_t ，int ）：给某个进程发送一个信号</p><p>kill命令 和 kill函数：</p><pre><code>int kill（pid_t pid, int signum）参数：pid: &gt; 0:发送信号给指定进程= 0：发送信号给跟调用kill函数的那个进程处于同一进程组的进程。&lt; -1: 取绝对值，发送信号给该绝对值所对应的进程组的所有组员。= -1：发送信号给，有权限发送的所有进程。signum：待发送的信号返回值：成功： 0失败： -1 errno</code></pre><p>alarm 函数：使用自然计时法。</p><pre><code>定时发送SIGALRM给当前进程。unsigned int alarm(unsigned int seconds);seconds：定时秒数返回值：上次定时剩余时间。无错误现象。alarm（0）； 取消闹钟。time 命令 ： 查看程序执行时间。   实际时间 = 用户时间 + 内核时间 + 等待时间。  --》 优化瓶颈 IO</code></pre><p>setitimer函数：</p><pre><code>int setitimer(int which, const struct itimerval *new_value, struct itimerval *old_value);参数：which：ITIMER_REAL： 采用自然计时。 ——&gt; SIGALRMITIMER_VIRTUAL: 采用用户空间计时  ---&gt; SIGVTALRMITIMER_PROF: 采用内核+用户空间计时 ---&gt; SIGPROFnew_value：定时秒数           类型：struct itimerval &#123;           struct timeval &#123;           time_t      tv_sec;         /* seconds */           suseconds_t tv_usec;        /* microseconds */       &#125;it_interval;---&gt; 周期定时秒数            struct timeval &#123;           time_t      tv_sec;                    suseconds_t tv_usec;               &#125;it_value;  ---&gt; 第一次定时秒数          &#125;;old_value：传出参数，上次定时剩余时间。e.g.struct itimerval new_t;struct itimerval old_t;new_t.it_interval.tv_sec = 0;new_t.it_interval.tv_usec = 0;new_t.it_value.tv_sec = 1;new_t.it_value.tv_usec = 0;int ret = setitimer(&amp;new_t, &amp;old_t);  定时1秒返回值：成功： 0失败： -1 errno</code></pre><p>其他几个发信号函数：</p><pre><code>int raise(int sig);void abort(void);</code></pre><p>信号集操作函数：内核不允许操作未决信号集，但是可以操作阻塞信号集影响未决信号集</p><pre><code>sigset_t set;  自定义信号集。sigemptyset(sigset_t *set);清空信号集sigfillset(sigset_t *set);全部置1sigaddset(sigset_t *set, int signum);将一个信号添加到集合中sigdelset(sigset_t *set, int signum);将一个信号从集合中移除sigismember（const sigset_t *set，int signum); 判断一个信号是否在集合中。 在--》1， 不在--》0</code></pre><p>设置信号屏蔽字和解除屏蔽：</p><pre><code>int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);how:SIG_BLOCK:设置阻塞SIG_UNBLOCK:取消阻塞SIG_SETMASK:用自定义set替换mask。set：自定义setoldset：旧有的 mask。</code></pre><p>查看未决信号集：</p><pre><code>int sigpending(sigset_t *set);set： 传出的 未决信号集。</code></pre><p>【信号捕捉】：</p><pre><code>signal();【sigaction();】 重点！！！</code></pre><p>​</p><p>信号捕捉特性：</p><pre><code>1. 捕捉函数执行期间，信号屏蔽字 由 mask --&gt; sa_mask , 捕捉函数执行结束。 恢复回mask2. 捕捉函数执行期间，本信号自动被屏蔽(sa_flgs = 0).3. 捕捉函数执行期间，被屏蔽信号多次发送，解除屏蔽后只处理一次！</code></pre><p>借助信号完成 子进程回收。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux进程Day7</title>
      <link href="/posts/59145b91.html"/>
      <url>/posts/59145b91.html</url>
      
        <content type="html"><![CDATA[<h2 id="pipe管道：-用于有血缘关系的进程间通信。-ps-aux-grep-ls-wc-l">pipe管道： 用于有血缘关系的进程间通信。  ps aux | grep ls | wc -l</h2><pre><code>父子进程间通信：兄弟进程间通信：</code></pre><h2 id="fifo管道：可以用于无血缘关系的进程间通信。">fifo管道：可以用于无血缘关系的进程间通信。</h2><pre><code>命名管道：  mkfifo 无血缘关系进程间通信：读端，open fifo O_RDONLY写端，open fifo O_WRONLY</code></pre><h2 id="文件实现进程间通信-很早以前的东西，过时了-：">文件实现进程间通信(很早以前的东西，过时了)：</h2><p><strong>打开的文件是内核中的一块缓冲区</strong>。<strong>多个</strong>无血缘关系的进程，可以<strong>同时</strong>访问该文件。</p><h2 id="★共享内存映射">★共享内存映射:</h2><p>void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset);创建共享内存映射</p><blockquote><p>参数：<br>addr： 指定映射区的首地址。通常传NULL，表示让系统自动分配</p><p>​length：共享内存映射区的大小。（&lt;= 文件的实际大小）</p><p>​prot：共享内存映射区的读写属性。PROT_READ、PROT_WRITE、PROT_READ|PROT_WRITE</p><p>​flags：标注共享内存的共享属性。MAP_SHARED：会<strong>同步内存到磁盘上</strong>、MAP_PRIVATE</p><p>​fd:用于创建共享内存映射区的那个文件的 文件描述符。</p><p>​offset：默认0，表示映射文件全部。偏移位置。需是 4k 的整数倍。</p><p>返回值：</p><p>​成功：映射区的首地址。</p><p>​失败：MAP_FAILED 宏实质是：(void*(-1))， errno</p></blockquote><p>int munmap(void *addr, size_t length);释放映射区。</p><pre><code>addr：mmap 的返回值length：大小</code></pre><h2 id="使用注意事项：">使用注意事项：</h2><blockquote><ol><li><p>用于创建映射区的文件大小为 0，实际指定非0大小创建映射区，出 “总线错误”。</p></li><li><p>用于创建映射区的文件大小为 0，实际制定0大小创建映射区， 出 “无效参数”。</p></li><li><p>用于创建映射区的文件读写属性为，只读。映射区属性为 读、写。 出 “无效参数”。</p></li><li><p>创建映射区，需要read权限。当访问权限指定为 “共享”MAP_SHARED时， mmap的读写权限，应该 &lt;=文件的open权限。只写不行。 私有MAP_PRIVATE可以改，见第10点。</p></li><li><p>文件描述符fd，在mmap创建映射区完成即可关闭。后续访问文件，用 地址访问。</p></li><li><p>offset 必须是 4096的整数倍。（MMU 映射的最小单位 4k ）</p></li><li><p>对申请的映射区内存，不能越界访问。</p></li><li><p>munmap用于释放的 地址，必须是mmap申请返回的地址。</p></li><li><p>映射区访问权限为 “私有”MAP_PRIVATE, 对内存所做的所有修改，只在内存有效，不会反应到物理磁盘上。</p></li><li><p>映射区访问权限为 “私有”MAP_PRIVATE, 只需要open文件时，有读权限，用于创建映射区即可。</p></li></ol></blockquote><p>mmap函数的保险调用方式：</p><pre><code>1. fd = open（&quot;文件名&quot;， O_RDWR）;2. mmap(NULL, 有效文件大小， PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0);</code></pre><p>父子进程使用 mmap 进程间通信：</p><pre><code>父进程 先 创建映射区。 open（ O_RDWR） mmap( MAP_SHARED );指定 MAP_SHARED 权限fork() 创建子进程。一个进程读， 另外一个进程写。</code></pre><p>无血缘关系进程间 mmap 通信：  【会写】</p><pre><code>两个进程 打开同一个文件，创建映射区。指定flags 为 MAP_SHARED。一个进程写入，另外一个进程读出。【注意】：无血缘关系进程间通信。mmap：数据可以重复读取。fifo：数据只能一次读取。</code></pre><p>匿名映射：只能用于 血缘关系进程间通信。</p><pre><code>p = (int *)mmap(NULL, 40, PROT_READ|PROT_WRITE, MAP_SHARED|MAP_ANONYMOUS, -1, 0);</code></pre><p>​</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双指针总结</title>
      <link href="/posts/e08b0e73.html"/>
      <url>/posts/e08b0e73.html</url>
      
        <content type="html"><![CDATA[<h4 id="27-移除元素"><a href="https://leetcode.cn/problems/remove-element/">27. 移除元素</a></h4><h2 id="示例">示例</h2><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">0,1,2,2</span>,<span class="number">3,0,4,2</span>], val = <span class="number">2</span></span><br><span class="line">输出：<span class="number">5</span>, nums = [<span class="number">0,1,4,0</span>,<span class="number">3</span>]</span><br><span class="line">解释：函数应该返回新的长度 <span class="number">5</span>, 并且 nums 中的前五个元素为 <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">4</span>。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><h2 id="思路">思路</h2><p><strong>双指针法（快慢指针法）在数组和链表的操作中是非常常见的，很多考察数组、链表、字符串等操作的面试题，都使用双指针法。</strong></p><p>这里使用双指针是因为我们暴力求解问题时，需要循环遍历两遍数组。</p><p>所以在这里可以<strong>通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。</strong></p><p>暴力过程：</p><p><img src="https://code-thinking.cdn.bcebos.com/gifs/27.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0-%E6%9A%B4%E5%8A%9B%E8%A7%A3%E6%B3%95.gif" alt="27.移除元素-暴力解法"></p><p>双指针过程：</p><p><img src="https://code-thinking.cdn.bcebos.com/gifs/27.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0-%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95.gif" alt="27.移除元素-双指针法"></p><h2 id="实现代码：">实现代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 时间复杂度：O(n)</span></span><br><span class="line"><span class="comment">// 空间复杂度：O(1)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> slowIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> fastIndex = <span class="number">0</span>; fastIndex &lt; nums.<span class="built_in">size</span>(); fastIndex++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (val != nums[fastIndex]) &#123;</span><br><span class="line">                nums[slowIndex++] = nums[fastIndex];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slowIndex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="类似题目">类似题目</h2><h4 id="26-删除有序数组中的重复项"><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/">26. 删除有序数组中的重复项</a></h4><p><strong>示例 1：</strong></p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">输入：nums </span>=<span class="string"> [1,1,2]</span></span><br><span class="line"><span class="string">输出：2</span></span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">0,0,1,1</span>,<span class="number">1,2,2,3</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="思路-2">思路</h2><p>使用双指针，指针i指向想要结果的数组尾。j指针用于判断我们i和j元素是否相等时进行以下操作：1、i=j，i不动，j++；2、i！=j，i++，j++。</p><h2 id="代码">代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == nums[j])</span><br><span class="line">            &#123;</span><br><span class="line">                ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                nums[++i] = nums[j];</span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="类似题目-2">类似题目</h2><h4 id="283-移动零"><a href="https://leetcode.cn/problems/move-zeroes/">283. 移动零</a></h4><p><strong>请注意</strong> ，必须在不复制数组的情况下原地对数组进行操作。</p><p><strong>示例 1:</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = <span class="string">[0,1,0,3,12]</span></span><br><span class="line">输出: <span class="string">[1,3,12,0,0]</span></span><br></pre></td></tr></table></figure><h2 id="思路-3">思路</h2><p>不借用其他数组，原地实现很容易就想到双指针。</p><p>双指针i，j<strong>同向</strong>且<strong>同时</strong>跑，如果i元素=0，j就找个不为零的数和i替换，最后结束判断是j跑到了数组尾部。</p><h2 id="代码实现">代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">moveZeroes</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i =<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i,j;i,j&lt;nums.<span class="built_in">size</span>();i++,j++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(nums[j] == <span class="number">0</span> &amp;&amp; j &lt; nums.<span class="built_in">size</span>()<span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                nums[i] = nums[j];</span><br><span class="line">                nums[j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="类似题目-3">类似题目</h2><h4 id="844-比较含退格的字符串（快慢指针）"><a href="https://leetcode.cn/problems/backspace-string-compare/">844. 比较含退格的字符串</a>（快慢指针）</h4><p><strong>示例 1：</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">&quot;ab<span class="subst">#c</span>&quot;</span>, t = <span class="string">&quot;ad<span class="subst">#c</span>&quot;</span></span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：s 和 t 都会变成 <span class="string">&quot;ac&quot;</span>。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">&quot;ab##&quot;</span>, <span class="built_in">t</span> = <span class="string">&quot;c#d#&quot;</span></span><br><span class="line">输出：<span class="built_in">true</span></span><br><span class="line">解释：s 和 <span class="built_in">t</span> 都会变成 <span class="string">&quot;&quot;</span>。</span><br></pre></td></tr></table></figure><h2 id="思路-4">思路</h2><p>因为学会了双指针，结果在这道题倒了。</p><p>这道题使用双指针的<strong>快慢指针</strong>，low指向字符串的有效字符尾部，fast遍历字符串就可以。</p><p>**注意：**如果对空文本输入退格字符，文本继续为空。</p><h2 id="代码实现-2">代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="function">string <span class="title">result</span><span class="params">(string a)</span></span>&#123;</span><br><span class="line">            <span class="type">int</span> low = <span class="number">0</span> ;</span><br><span class="line">            <span class="type">int</span> fast = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(fast;fast&lt;a.<span class="built_in">length</span>();fast++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[fast] == <span class="string">&#x27;#&#x27;</span> &amp;&amp; low != <span class="number">0</span>)</span><br><span class="line">                    low--;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(a[fast] != <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">                    a[low++] = a[fast];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> a.<span class="built_in">substr</span>(<span class="number">0</span>,low);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">backspaceCompare</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">result</span>(s) == <span class="built_in">result</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="类似题目-4">类似题目</h2><h4 id="977-有序数组的平方（首尾指针）"><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">977. 有序数组的平方</a>（首尾指针）</h4><p><strong>示例 2：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-<span class="number">7</span>,-<span class="number">3,2,3,11</span>]</span><br><span class="line">输出：[<span class="number">4,9,9,49</span>,<span class="number">121</span>]</span><br></pre></td></tr></table></figure><h2 id="思路-5">思路</h2><p>认真观察知道数组最左边和最右边的数一定有最大的一个数。可以在首尾设置两个指针，这样比较首尾值的大小，就可以依次确定最大的数。</p><h2 id="代码-2">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> pos = j;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nums1</span><span class="params">(nums.size(),<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">while</span>(pos&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]*nums[i] &lt;= nums[j]*nums[j])</span><br><span class="line">            &#123;</span><br><span class="line">                nums1[pos--] = nums[j]*nums[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[i]*nums[i] &gt; nums[j]*nums[j])&#123;</span><br><span class="line">                nums1[pos--] = nums[i]*nums[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="总结">总结:</h2><p>1、双指针有首尾指针和快慢指针</p><p>2、</p><p>if 、else if 中有比如上面的</p><p>if(a[fast] == ‘#’ &amp;&amp; low != 0)<br>low–;<br>else if(a[fast] != ‘#’)<br>a[low++] = a[fast];</p><p>a[fast] == ‘#’</p><p>a[fast] != ‘#’</p><p><strong>这两个互斥的，可以考虑换一个顺序：</strong></p><p>if(a[fast] != ‘#’)</p><p>​          a[low++] = a[fast];</p><p>else if(low &gt; 0)</p><p>​          low–;</p><p>这样代码更容易理解一些。</p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法、c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滑动窗口</title>
      <link href="/posts/50cab45.html"/>
      <url>/posts/50cab45.html</url>
      
        <content type="html"><![CDATA[<h4 id="209-长度最小的子数组（滑动窗口）"><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">209. 长度最小的子数组</a>（滑动窗口）</h4><p>给定一个含有 n 个正整数的数组和一个正整数 target 。</p><p>找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, …, numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。</p><p><strong>示例 2：</strong></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="keyword">target</span> = <span class="number">4</span>, nums = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：target = <span class="number">11</span>, nums = [<span class="number">1,1,1,1</span>,<span class="number">1,1,1,1</span>]</span><br><span class="line">输出：<span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="思路">思路</h2><p><img src="https://code-thinking.cdn.bcebos.com/gifs/209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.gif" alt="209.长度最小的子数组"></p><h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> min = INT_MAX;</span><br><span class="line">        cout&lt;&lt;INT_MAX;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>,j = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> temp = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">while</span>(j &lt; nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">if</span>(temp &gt;= target)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(min &gt; j-i+<span class="number">1</span>)</span><br><span class="line">                    min = j-i+<span class="number">1</span>;</span><br><span class="line">                temp -= nums[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                j++;</span><br><span class="line">                <span class="keyword">if</span>(j == nums.<span class="built_in">size</span>())</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                temp += nums[j];</span><br><span class="line">            &#125;</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (min == INT_MAX)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="类似题目">类似题目</h2><h4 id="904-水果成篮"><a href="https://leetcode.cn/problems/fruit-into-baskets/">904. 水果成篮</a></h4><p>你正在探访一家农场，农场从左到右种植了一排果树。这些树用一个整数数组 fruits 表示，其中 fruits[i] 是第 i 棵树上的水果 种类 。</p><p>你想要尽可能多地收集水果。然而，农场的主人设定了一些严格的规矩，你必须按照要求采摘水果：</p><p>你只有 两个 篮子，并且每个篮子只能装 单一类型 的水果。每个篮子能够装的水果总量没有限制。<br>你可以选择任意一棵树开始采摘，你必须从 每棵 树（包括开始采摘的树）上 恰好摘一个水果 。采摘的水果应当符合篮子中的水果类型。每采摘一次，你将会向右移动到下一棵树，并继续采摘。<br>一旦你走到某棵树前，但水果不符合篮子的水果类型，那么就必须停止采摘。<br>给你一个整数数组 fruits ，返回你可以收集的水果的 最大 数目。</p><p><strong>示例 1：</strong></p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">输入：fruits </span>=<span class="string"> [1,2,1]</span></span><br><span class="line"><span class="string">输出：3</span></span><br><span class="line"><span class="string">解释：可以采摘全部 3 棵树。</span></span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：fruits = <span class="comment">[0,1,2,2]</span></span><br><span class="line">输出：3</span><br><span class="line">解释：可以采摘 <span class="comment">[1,2,2]</span> 这三棵树。</span><br><span class="line">如果从第一棵树开始采摘，则只能采摘 <span class="comment">[0,1]</span> 这两棵树。</span><br></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：fruits = [<span class="number">3,3,3,1</span>,<span class="number">2,1,1,2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">5</span></span><br><span class="line">解释：可以采摘 [<span class="number">1,2,1,1</span>,<span class="number">2</span>] 这五棵树。</span><br></pre></td></tr></table></figure><h2 id="思路-2">思路</h2><p>滑动窗口，当不好判断移动的条件时，可以借助map判断 i 到 j 数组中是否种类为两种，使用函数判断种类是否大于2的话，复杂度就起来了。所以只能用map</p><h2 id="代码-2">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">totalFruit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; fruits)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n = fruits.<span class="built_in">size</span>();</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; cnt;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> right = <span class="number">0</span>; right &lt; n; ++right) &#123;</span><br><span class="line">            ++cnt[fruits[right]];</span><br><span class="line">            <span class="keyword">while</span> (cnt.<span class="built_in">size</span>() &gt; <span class="number">2</span>) &#123;<span class="comment">//left移动至erase一个</span></span><br><span class="line">                <span class="keyword">auto</span> it = cnt.<span class="built_in">find</span>(fruits[left]);</span><br><span class="line">                --it-&gt;second;</span><br><span class="line">                <span class="keyword">if</span> (it-&gt;second == <span class="number">0</span>) &#123;</span><br><span class="line">                    cnt.<span class="built_in">erase</span>(it);</span><br><span class="line">                &#125;</span><br><span class="line">                ++left;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, right - left + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="类似题目-2">类似题目</h2><h4 id="76-最小覆盖子串"><a href="https://leetcode.cn/problems/minimum-window-substring/">76. 最小覆盖子串</a></h4><p>给你一个字符串 <code>s</code> 、一个字符串 <code>t</code> 。返回 <code>s</code> 中涵盖 <code>t</code> 所有字符的最小子串。如果 <code>s</code> 中不存在涵盖 <code>t</code> 所有字符的子串，则返回空字符串 <code>&quot;&quot;</code> 。</p><p><strong>注意：</strong></p><ul><li>对于 <code>t</code> 中重复字符，我们寻找的子字符串中该字符数量必须不少于 <code>t</code> 中该字符数量。</li><li>如果 <code>s</code> 中存在这样的子串，我们保证它是唯一的答案。</li></ul><p><strong>示例 1：</strong></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">&quot;ADOBECODEBANC&quot;</span>, <span class="built_in">t</span> = <span class="string">&quot;ABC&quot;</span></span><br><span class="line">输出：<span class="string">&quot;BANC&quot;</span></span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">&quot;a&quot;</span>, <span class="built_in">t</span> = <span class="string">&quot;a&quot;</span></span><br><span class="line">输出：<span class="string">&quot;a&quot;</span></span><br><span class="line">解释：整个字符串 s 是最小覆盖子串。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入<span class="symbol">:</span> s = <span class="string">&quot;a&quot;</span>, <span class="built_in">t</span> = <span class="string">&quot;aa&quot;</span></span><br><span class="line">输出<span class="symbol">:</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="思路-3">思路</h2><p><img src="https://assets.leetcode-cn.com/solution-static/76/76_fig1.gif" alt="fig1"></p><h2 id="代码-3">代码</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">minWindow</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//移动窗口</span></span><br><span class="line">        map&lt;<span class="type">char</span>,<span class="type">int</span>&gt;  hash;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> m = t.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> ch : t) hash[ch]--;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> min = INT_MAX;</span><br><span class="line">        <span class="type">int</span> start;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>,j = <span class="number">0</span>, cnt = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* 双指针移动 */</span></span><br><span class="line">            hash[s[i]]++;</span><br><span class="line">            <span class="keyword">if</span>(hash[s[i]] &lt;= <span class="number">0</span>) cnt++;<span class="comment">//s[i]是t中元素</span></span><br><span class="line">            <span class="keyword">while</span>(cnt == m &amp;&amp; hash[s[j]] &gt; <span class="number">0</span>) hash[s[j++]]--;<span class="comment">//j右移</span></span><br><span class="line">            <span class="keyword">if</span>(cnt == m &amp;&amp; min &gt; i - j + <span class="number">1</span>)&#123;</span><br><span class="line">                min = i - j + <span class="number">1</span>;</span><br><span class="line">                start = j;</span><br><span class="line">            &#125;</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(min == INT_MAX) <span class="comment">//若没有覆盖子串</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">substr</span>(start,min);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>滑动窗口通常要判断左移右移的边界条件，通常用map进行判断</p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法、c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在排序数组中查找元素的第一个和最后一个位置</title>
      <link href="/posts/2442b2a4.html"/>
      <url>/posts/2442b2a4.html</url>
      
        <content type="html"><![CDATA[<h2 id="34-在排序数组中查找元素的第一个和最后一个位置"><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/">34. 在排序数组中查找元素的第一个和最后一个位置</a></h2><h2 id="题目描述">题目描述</h2><p>给你一个按照非递减顺序排列的整数数组 nums，和一个目标值 target。请你找出给定目标值在数组中的开始位置和结束位置。</p><p>如果数组中不存在目标值 target，返回 [-1, -1]。</p><p>你必须设计并实现时间复杂度为 O(log n) 的算法解决此问题。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = <span class="comment">[5,7,7,8,8,10]</span>, target = 8</span><br><span class="line">输出：<span class="comment">[3,4]</span></span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = <span class="comment">[5,7,7,8,8,10]</span>, target = 6</span><br><span class="line">输出：<span class="comment">[-1,-1]</span></span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = <span class="comment">[]</span>, target = 0</span><br><span class="line">输出：<span class="comment">[-1,-1]</span></span><br></pre></td></tr></table></figure><h2 id="思路">思路</h2><p>Q:看到log（n）就能想到二分查找，但是二分查找里面怎么找到第一个重复元素呢？</p><p>A:我们之前总结过：可以查找到一个元素的最左最右元素，因此，我们只需要查找这个元素的最左元素，再去查找这个元素数值+1的最左元素位置-1即可得到这个元素的最右元素。</p><h2 id="代码">代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">searchRange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> vector&lt;<span class="type">int</span>&gt;&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;<span class="comment">//空数组直接返回</span></span><br><span class="line">        <span class="type">int</span> l = <span class="built_in">search</span>(nums,target);</span><br><span class="line">        <span class="type">int</span> r = <span class="built_in">search</span>(nums,target+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(l == nums.<span class="built_in">size</span>()||nums[l] != target) <span class="comment">// ||运算符先检查前面，后检查后面</span></span><br><span class="line">            <span class="keyword">return</span> vector&lt;<span class="type">int</span>&gt;&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">        <span class="keyword">return</span> vector&lt;<span class="type">int</span>&gt;&#123;l,r<span class="number">-1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//找&gt;=target的第一个</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums,<span class="type">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> r = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> mid;</span><br><span class="line">        <span class="keyword">while</span> (l&lt;r)</span><br><span class="line">        &#123;</span><br><span class="line">            mid = (l+r)&gt;&gt;<span class="number">1</span>; <span class="comment">//，默认的除法是整数除法向下取整</span></span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&gt;=target) <span class="comment">//find first target</span></span><br><span class="line">                r = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                l = mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Solution a;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums = &#123;<span class="number">5</span>&#125;;</span><br><span class="line">    nums = a.<span class="built_in">searchRange</span>(nums,<span class="number">5</span>);</span><br><span class="line">    cout&lt;&lt;nums[<span class="number">0</span>]&lt;&lt;nums[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>二分查找要仔细判断。</p><h2 id="扩展：是否可以用最左最右元素找呢">扩展：是否可以用最左最右元素找呢?</h2><p>明显是可以的，但是遇到个问题：</p><p>1、找最右元素的时候，需要判断数组越界的情况。（因为r=nums.size()  这是有可能访问到nums【r】的）</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">searchRange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> vector&lt;<span class="type">int</span>&gt;&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;; <span class="comment">//空数组直接返回</span></span><br><span class="line">        <span class="type">int</span> l = <span class="built_in">searchl</span>(nums,target);</span><br><span class="line">        <span class="type">int</span> r = <span class="built_in">searchr</span>(nums,target);</span><br><span class="line">        <span class="keyword">if</span>(l == nums.<span class="built_in">size</span>()||nums[l] != target) <span class="comment">// ||运算符先检查前面，后检查后面</span></span><br><span class="line">            <span class="keyword">return</span> vector&lt;<span class="type">int</span>&gt;&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">        <span class="keyword">return</span> vector&lt;<span class="type">int</span>&gt;&#123;l,r&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//找&gt;=target的第一个</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">searchl</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums,<span class="type">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> lside;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> r = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> mid;</span><br><span class="line">        <span class="keyword">while</span> (l&lt;r)</span><br><span class="line">        &#123;</span><br><span class="line">            mid = (l+r)&gt;&gt;<span class="number">1</span>; <span class="comment">//，默认的除法是整数除法向下取整</span></span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&gt;=target) <span class="comment">//find first target</span></span><br><span class="line">               &#123; r = mid;</span><br><span class="line">               lside=mid;&#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    l = mid+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lside;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">searchr</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums,<span class="type">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> r = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> mid;</span><br><span class="line">        <span class="type">int</span> lside;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) <span class="comment">// 因为l已经累加了，如果l等于r的情况不能进行判断，那么l=r-1 且 两个数都是target时，mid只会=l，lside也是，我们要的结果是右边的，即r</span></span><br><span class="line">        &#123;</span><br><span class="line">            mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(mid&gt;=nums.<span class="built_in">size</span>()) <span class="comment">//杜绝数组越界的情况</span></span><br><span class="line">                <span class="keyword">return</span> lside;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt;= target)</span><br><span class="line">            &#123;</span><br><span class="line">                l = mid+<span class="number">1</span>;  <span class="comment">// 找到大于第一个大于target的数减1 即可</span></span><br><span class="line">                lside = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lside;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Solution a;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums = &#123;<span class="number">5</span>&#125;;</span><br><span class="line">    nums = a.<span class="built_in">searchRange</span>(nums,<span class="number">5</span>);</span><br><span class="line">    cout&lt;&lt;nums[<span class="number">0</span>]&lt;&lt;nums[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法、c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux进程通信Day6</title>
      <link href="/posts/b84d4e26.html"/>
      <url>/posts/b84d4e26.html</url>
      
        <content type="html"><![CDATA[<h1>回收子进程</h1><h2 id="孤儿进程">孤儿进程</h2><p>孤儿进程 : 父进程先于子进程结束，则子进程成为孤儿进程，子进程的父进程成为 init进程，称为 init 进程领养孤儿进程。<br>【 orphan.c 】杀死孤儿进程  kill -9 pid</p><p>僵尸进程<br>僵尸进程: 进程终止 ，父进程 尚未 回收 子进程 残留 资源（ PCB ）存放于内核中 变成僵尸 Zombie 进程 。</p><p>【zoom.c】</p><p><strong>特别注意</strong>，僵尸进程是不能使用kill 命令清除掉的。因为 kill 命令只是用来终止进程的，<br>而僵尸进程已经终止。只能杀死父进程让僵尸进程变为孤儿进程，再由init进程领养，init发现他是僵尸就会自动回收进程。</p><h2 id="wait函数">wait函数</h2><p>回收子进程退出资源， <strong>阻塞回收任意一个</strong>。</p><pre><code>pid_t wait(int *status)参数：（传出） 回收进程的状态。返回值：成功： 回收进程的pid失败： -1， errno</code></pre><p>wait 函数可以回收子进程终止信息 。 该函数有三个功能<br>①阻塞等待子进程退出<br>②回收子进程残留资源<br>③获取子进程结束状态 退出原因 。<br>pid_t wait(int *status); 成功：清理掉的子进程 ID ；失败 1 ( 没有子进程）</p><h2 id="waitpid函数：指定某一个进程进行回收。可以设置非阻塞。waitpid-1-status-0-wait-status">waitpid函数：指定某一个进程进行回收。可以设置非阻塞。waitpid(-1, &amp;status, 0) == wait(&amp;status);</h2><blockquote><p>pid_t waitpid(pid_t pid, int *status, int options)</p><p>参数：<br>pid：指定回收某一个子进程pid</p><p>​&gt; 0: 待回收的子进程pid</p><p>​-1：任意子进程</p><p>​0：同组的子进程。</p><p>​status：（传出） 回收进程的状态。</p><p>​options：WNOHANG 指定回收方式为，非阻塞。</p><p>返回值：</p><p>​&gt; 0 : 表成功回收的子进程 pid</p><p>​0 : 函数调用时， 参3 指定了WNOHANG， 并且，没有子进程结束。</p><p>​-1: 失败。errno</p></blockquote><p>进程退出，只是内存地址空间释放，精准一点就是用户内存地址释放，<strong>内核pcb残留</strong>，所以才需要回收。</p><p>总结：</p><blockquote><p>wait、waitpid一次调用，回收一个子进程。</p><p>​想回收多个。while</p></blockquote><h2 id="进程间通信的常用方式，特征：">进程间通信的常用方式，特征：</h2><blockquote><p>管道：简单</p><p>信号：开销小</p><p>mmap映射：非血缘关系进程间</p><p>socket（本地套接字）：稳定</p></blockquote><h2 id="管道">管道</h2><p>实现原理： 内核借助环形队列机制，使用内核缓冲区实现（4K）。</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/%E7%AE%A1%E9%81%93%E5%8E%9F%E7%90%86%E5%9B%BE.png" alt="管道原理图"></p><blockquote><p>特质；</p><ol><li><p>伪文件 （实质就是内存的一片空间）</p></li><li><p>管道中的数据只能一次读取。</p></li><li><p>数据在管道中，只能单向流动。</p></li></ol><p>局限性：</p><ol><li><p>自己写，不能自己读。</p></li><li><p>数据不可以反复读。</p></li><li><p>半双工通信。</p></li><li><p>血缘关系进程间可用。</p></li></ol></blockquote><h2 id="pipe函数：创建，并打开管道。">pipe函数：创建，并打开管道。</h2><blockquote><p>int pipe(int fd[2]);</p><p>参数：fd[0]: 读端。</p><p>​fd[1]: 写端。</p><p>返回值： 成功： 0</p><p>​ 失败： -1 errno</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/%E7%AE%A1%E9%81%93%E9%80%9A%E4%BF%A1.png" alt="管道通信"></p></blockquote><p>管道的读写行为：</p><blockquote><p>读管道：</p><ol><li><p>管道有数据，read返回实际读到的字节数。</p></li><li><p>管道无数据：</p></li></ol><p>​1）无写端，read返回0 （类似读到文件尾）</p><p>​2）有写端，read阻塞等待。</p><p>写管道：</p><ol><li><p>无读端， 异常终止。 （SIGPIPE导致的）</p></li><li><p>有读端：</p></li></ol><p>​1） 管道已满， 阻塞等待</p><p>​2） 管道未满， 返回写出的字节个数。</p></blockquote><blockquote><p>优点：简单，相比信号，套接字实现进程间通信，简单很多。<br>缺点： 1. 只能单向通信，双向通信需建立 两个管道。<br>2. 只能用于<strong>父子、兄弟进程 有共同祖先</strong> 间通信。该问题后来使用 fifo 有名管道解决。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows下安装C++编译环境</title>
      <link href="/posts/f9b3f499.html"/>
      <url>/posts/f9b3f499.html</url>
      
        <content type="html"><![CDATA[<p>之前也安装过，但是并没有多明白，现在才知道，学习就是要知道为什么才能知道怎么做。</p><p>1、根据vscode推荐的MSYS2</p><p><em>MSYS2是一个工具和库的集合，为您提供了一个易于使用的环境，用于构建、安装和运行本机Windows软件。</em></p><p>使用这个软件，可以方便管理我们的环境。</p><p>2、使用MSYS2安装Mingw-w64</p><p>安装Mingw-w64工具链（pacman -S --needed base-devel mingw-w64-x86_64-toolchain）。在MSYS2终端中运行pacman命令。<strong>接受默认设置以安装工具链组中的所有成员</strong>。</p><p>3、检查环境</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">gcc</span> <span class="literal">--</span><span class="comment">version</span></span><br><span class="line"><span class="comment">g</span><span class="literal">++</span> <span class="literal">--</span><span class="comment">version</span></span><br><span class="line"><span class="comment">gdb</span> <span class="literal">--</span><span class="comment">version</span></span><br></pre></td></tr></table></figure><p>4、安装VS代码的<strong>C/C++扩展</strong></p><p>C++是一种已编译的语言，这意味着程序的源代码必须经过翻译（编译）才能在计算机上运行。VSCode首先是一个编辑器，它依赖于命令行工具来完成大部分开发工作流程。C/C++扩展不包括C++编译器或调试器。您需要安装这些工具或使用计算机上已安装的工具。（<strong>意思就是要本地有C++的环境</strong>）</p><ul><li>C++ compiler pre-installed</li><li>C++ debugger pre-installed</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索插入位置</title>
      <link href="/posts/b04a536.html"/>
      <url>/posts/b04a536.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><h4 id="35-搜索插入位置"><a href="https://leetcode.cn/problems/search-insert-position/">35. 搜索插入位置</a></h4><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>请必须使用时间复杂度为 O(log n) 的算法。</p><p><strong>示例 1:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">输入: nums = [1,3,5,6], target = 5</span></span><br><span class="line"><span class="section">输出: 2</span></span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">输入: nums = [1,3,5,6], target = 2</span></span><br><span class="line"><span class="section">输出: 1</span></span><br></pre></td></tr></table></figure><h2 id="思路">思路</h2><p>long（n），二分查找。但是要搞清楚返回的位置</p><p>对于左闭右开的区间：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">    <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = n - <span class="number">1</span>; <span class="comment">// 定义target在左闭右闭的区间里，[left, right]</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123; <span class="comment">// 当left==right，区间[left, right]依然有效</span></span><br><span class="line">        <span class="type">int</span> middle = left + ((right - left) / <span class="number">2</span>);<span class="comment">// 防止溢出 等同于(left + right)/2</span></span><br><span class="line">        <span class="keyword">if</span> (nums[middle] &gt; target) &#123;</span><br><span class="line">            right = middle - <span class="number">1</span>; <span class="comment">// target 在左区间，所以[left, middle - 1]</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[middle] &lt; target) &#123;</span><br><span class="line">            left = middle + <span class="number">1</span>; <span class="comment">// target 在右区间，所以[middle + 1, right]</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// nums[middle] == target</span></span><br><span class="line">            <span class="keyword">return</span> middle;</span><br><span class="line">        &#125;</span><br><span class="line">        ??????</span><br><span class="line">        <span class="comment">// 分别处理如下四种情况</span></span><br><span class="line">        <span class="comment">// 目标值在数组所有元素之前  [0, -1]</span></span><br><span class="line">        <span class="comment">// 目标值等于数组中某一个元素  return middle;</span></span><br><span class="line">        <span class="comment">// 目标值插入数组中的位置 [left, right]，return  right + 1</span></span><br><span class="line">        <span class="comment">// 目标值在数组所有元素之后的情况 [left, right]， 因为是右闭区间，所以 return right + 1</span></span><br><span class="line">        <span class="keyword">return</span> right + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">----------------------------------------------------------------------------</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">searchInsert</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right = n; <span class="comment">// 定义target在左闭右开的区间里，[left, right)  target</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123; <span class="comment">// 因为left == right的时候，在[left, right)是无效的空间</span></span><br><span class="line">            <span class="type">int</span> middle = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &gt; target) &#123;</span><br><span class="line">                right = middle; <span class="comment">// target 在左区间，在[left, middle)中</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[middle] &lt; target) &#123;</span><br><span class="line">                left = middle + <span class="number">1</span>; <span class="comment">// target 在右区间，在 [middle+1, right)中</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// nums[middle] == target</span></span><br><span class="line">                <span class="keyword">return</span> middle; <span class="comment">// 数组中找到目标值的情况，直接返回下标</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 分别处理如下四种情况</span></span><br><span class="line">        <span class="comment">// 目标值在数组所有元素之前 [0,0)</span></span><br><span class="line">        <span class="comment">// 目标值等于数组中某一个元素 return middle</span></span><br><span class="line">        <span class="comment">// 目标值插入数组中的位置 [left, right) ，return right 即可</span></span><br><span class="line">        <span class="comment">// 目标值在数组所有元素之后的情况 [left, right)，因为是右开区间，所以 return right</span></span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里肯定有很多人犯迷糊，为什么左闭右闭就返回right+1。而左闭右开就返回right？？？？</p><p>鄙人认为：</p><p>左闭右闭二分查找下，最后的结果肯定是【right，left】，而要插入的target在right+1,也就是left的位置。</p><p>相反，左闭右开二分查找下，最后的结果肯定是【left，right】，而且<strong>left==right</strong>，而要插入的target在left,也就是right的位置。</p><p><strong>可以这样理解记忆：</strong></p><p>左闭右开相当于多了一个元素进去，最后要查找过程中left和right肯定在它本该在的元素上。</p><p>左闭右闭就是本来的元素排序，最后结果【right，left】，right在小于targrt位置上，left在大于target上。</p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux进程Day5</title>
      <link href="/posts/b71a3abd.html"/>
      <url>/posts/b71a3abd.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230402100505828.png" alt="内存管理单元MMU"></p><blockquote><p>fork函数：</p><p>pid_t fork(void)</p><p>创建子进程。父子进程各自返回。父进程返回子进程pid。 子进程返回 0.</p><p>getpid();getppid();</p><p>循环创建N个子进程模型。 每个子进程标识自己的身份。<br><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230402102858975.png" alt="循环fork"></p></blockquote><p>父子进程相同：</p><blockquote><p>刚fork后。 data段、text段、堆、栈、环境变量、全局变量、宿主目录位置、进程工作目录位置、信号处理方式</p></blockquote><p>父子进程不同：</p><blockquote><p>进程id、返回值、各自的父进程、进程创建时间、闹钟、未决信号集</p></blockquote><p>父子进程共享：</p><blockquote><p><strong>读时共享、写时复制</strong>。———————— 不共享全局变量。</p><p>父子进程共享：1. 文件描述符 2. mmap映射区。</p></blockquote><p>父子进程调式</p><blockquote><p>set follow-fork-mode child 命令设置 gdb 在 fork 之后跟踪子进程。<br>set follow-fork-mode parent 设置跟踪父进程。</p></blockquote><h2 id="execl函数族">execl函数族</h2><p>将当前进程的.text 、 .data 替换为所要加载的程序的 .text 、 .data ，然后让进程从新的 .text<br>第一条指令开始执行，但进程 ID 不变，<strong>换核不换壳。</strong></p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/exec%E5%87%BD%E6%95%B0.png" alt="exec函数"></p><blockquote><p>int execl(const char *path, const char *arg, …);<br>int execlp(const char *file, const char *arg, …);</p><p>execl和execlp的区别就在于execl指定的是执行路径，execlp指定环境变量中的函数名：</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230403154604154.png" alt="execl和execlp"></p></blockquote><p>l( 命令行参数列表<br>p( 搜素 file 时使用 path 变量<br>v( 使用命令行参数数组<br>e( 使用环境变量数组 不使用进程原有的环境变量，设置新加载程序运</p><p>小练习：练习：将当前系统中的进程信息，打印到文件中。 exec_ps.c</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux文件IO-Day4</title>
      <link href="/posts/85119742.html"/>
      <url>/posts/85119742.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>系统调用（内核提供的函数| 内核=操作系统=系统的核心代码）</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230331193102158.png" alt="系统调用"></p></blockquote><h2 id="open函数：">open函数：</h2><blockquote><p>int open(char *pathname, int flags)#include &lt;unistd.h&gt;</p><p>参数：<br>pathname: 欲打开的文件路径名</p><p>​flags：文件打开方式：#include &lt;fcntl.h&gt;</p><p>​O_RDONLY|O_WRONLY|O_RDWRO_CREAT|O_APPEND|O_TRUNC|O_EXCL|O_NONBLOCK …</p><p>返回值：<br>成功： 打开文件所得到对应的 文件描述符（整数）</p><p>​失败： -1， 设置errno</p><p>int open(char *pathname, int flags， mode_t mode)123  775</p><p>参数：<br>pathname: 欲打开的文件路径名</p><p>​flags：文件打开方式：O_RDONLY|O_WRONLY|O_RDWRO_CREAT|O_APPEND|O_TRUNC|O_EXCL|O_NONBLOCK …</p><p>​mode: 参数3使用的<strong>前提</strong>， 参2指定了 O_CREAT。取值8进制数，用来描述文件的 访问权限。 rwx    0664</p><p>​创建文件最终权限 = mode &amp; ~umask （<strong>umask是默认文件权限取反</strong>）</p><p>返回值：<br>成功： 打开文件所得到对应的 文件描述符（整数）</p><p>​失败： -1， 设置errno</p></blockquote><h2 id="close函数：">close函数：</h2><pre><code>int close(int fd);</code></pre><h2 id="错误处理函数：与-errno-相关。">错误处理函数：与 errno 相关。</h2><pre><code>printf(&quot;xxx error: %d\n&quot;, errno);char *strerror(int errnum);printf(&quot;xxx error: %s\n&quot;, strerror(errno));void perror(const char *s);perror(&quot;open error&quot;);</code></pre><hr><h2 id="read函数：">read函数：</h2><blockquote><p>ssize_t read(int fd, void *buf, size_t count);</p><p>参数：<br>fd：文件描述符</p><p>​buf：存数据的缓冲区</p><p>​count：缓冲区大小</p><p>返回值：</p><p>​0：读到文件末尾。</p><p>​成功；&gt; 0 读到的字节数。</p><p>​失败：-1， 设置 errno</p><p>​-1： 并且 errno = EAGIN 或 EWOULDBLOCK, 说明不是read失败，而是read在以<strong>非阻塞方式</strong>读一个设备文件（网络文件），并且文件无数据。</p></blockquote><h2 id="write函数："><strong>write函数：</strong></h2><pre><code>ssize_t write(int fd, const void *buf, size_t count);参数：fd：文件描述符buf：待写出数据的缓冲区count：数据大小返回值：成功；写入的字节数。失败：-1， 设置 errno</code></pre><h2 id="系统调用和库函数的比较">系统调用和库函数的比较</h2><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230401111355517.png" alt="系统调用和库函数"></p><p><strong>误区</strong>：系统调用比库函数效率高。</p><p><strong>前提条件</strong>：假如分别用库函数fputc一次写一个字节，和用系统调用一次写一个字节。<strong>结果</strong>：使用库函数会快一些，因为库函数有自己的缓冲区，当缓冲区满再切换到内核区。而系统调用，每次都切换内核区。</p><p><strong>使用环境</strong>：系统调用立刻写入<strong>内核区</strong>，库函数等缓冲区满再写入<strong>内核区</strong>。</p><hr><h2 id="文件描述符：">文件描述符：</h2><blockquote><p>PCB进程控制块：本质 <strong>结构体</strong>。</p><p>成员：文件描述符表。</p><p>文件描述符：0/1/2/3/4。。。。/1023     表中可用的最小的。</p><p>0 - STDIN_FILENO</p><p>1 - STDOUT_FILENO</p><p>2 - STDERR_FILENO</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230401112552458.png" alt="PCB进程控制块"></p></blockquote><h2 id="阻塞、非阻塞：-是设备文件、网络文件的属性。">阻塞、非阻塞：  是<strong>设备文件</strong>、<strong>网络文件</strong>的属性。</h2><blockquote><p>产生阻塞的场景： 读<strong>设备文件</strong>。读网络文件。（读常规文件无阻塞概念：<strong>总有读完的时候</strong>）</p><p>/dev/tty – <strong>终端文件</strong>。</p><p>open(“/dev/tty”, O_RDWR|O_NONBLOCK)— 设置 /dev/tty 非阻塞状态。(默认为阻塞状态)</p><p>eg（在file_IO_test下）：</p><p>case1:block_readtty.c | 阻塞读终端</p><p>case2:nonblock_readtty.c | 非阻塞读终端</p><p>case3:nonblock_timeout.c | 非阻塞读终端和等待超时</p></blockquote><h2 id="fcntl："><strong>fcntl：</strong></h2><p>描述：获取文件状态和设置文件状态</p><p>​int (int fd, int cmd, …)</p><blockquote><p>int flgs = fcntl(fd,  F_GETFL);</p><p>返回的int类型flgs的位图：</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/fcntl%E8%AE%BE%E7%BD%AE%E6%96%87%E4%BB%B6%E5%B1%9E%E6%80%A7.png" alt="fcntl设置文件属性"></p><p>flgs |= O_NONBLOCK</p><p>fcntl(fd,  F_SETFL, flgs);</p><p>获取文件状态： F_GETFL</p><p>设置文件状态： F_SETFL</p></blockquote><h2 id="lseek函数：">lseek函数：</h2><p>描述：设置读写文件偏移量</p><blockquote><p>off_t lseek(int fd, off_t offset, int whence);</p><p>参数：<br>fd：文件描述符</p><p>​offset： 偏移量</p><p>​whence：起始偏移位置： SEEK_SET/SEEK_CUR/SEEK_END</p><p>返回值：</p><p>​成功：较起始位置偏移量 = <strong>offset+whence</strong></p><p>​失败：-1 errno</p><p><strong>应用场景：</strong></p><blockquote><ol><li><p><strong>文件的“读”、“写”使用同一偏移位置。</strong></p></li><li><p>使用lseek获取文件大小</p></li><li><p>1）使用lseek拓展文件大小：要想使文件大小真正拓展，<strong>必须引起IO操作</strong>：int ret = write(fd, “a”, 1);</p></li></ol><p>2）使用 truncate 函数，直接拓展文件。int ret = truncate(“dict.cp”, 250);</p></blockquote></blockquote><h3 id="传入参数：">传入参数：</h3><blockquote><ol><li><p>指针作为函数参数。</p></li><li><p>同常有const关键字修饰。</p></li><li><p>指针指向有效区域， 在函数内部做读操作。</p></li></ol></blockquote><h3 id="传出参数：">传出参数：</h3><blockquote><ol><li><p>指针作为函数参数。</p></li><li><p>在函数调用之前，指针指向的空间可以无意义，但必须有效。</p></li><li><p>在函数内部，做写操作。</p></li><li><p>函数调用结束后，充当函数返回值。</p></li></ol></blockquote><h3 id="传入传出参数：">传入传出参数：</h3><blockquote><ol><li><p>指针作为函数参数。</p></li><li><p>在函数调用之前，指针指向的空间有实际意义。</p></li><li><p>在函数内部，先做读操作，后做写操作。</p></li><li><p>函数调用结束后，<strong>充当</strong>函数返回值。比如int aaa(int *p, struct stat *p2, strcut student *p3);函数参数都可以充当函数返回值。</p></li></ol></blockquote><h2 id="目录项和Inode">目录项和Inode</h2><p>一个文件对应一个FCB，FCB就是目录项。多个FCB组成一个目录。</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230401135720597.png" alt="目录项和Inode"></p><h2 id="stat-lstat-函数：">stat/lstat 函数：</h2><p>描述：查看文件信息</p><blockquote><p>int stat(const char *path, struct stat *buf);</p><p>参数：<br>path： 文件路径</p><p>​buf：（传出参数） 存放文件属性。</p><p>返回值：</p><p>​成功： 0</p><p>​失败： -1 errno</p><p>获取文件大小： buf.st_size</p><p>获取文件类型： buf.st_mode</p><p>获取文件权限： buf.st_mode</p><p>符号穿透：stat会。lstat不会。</p><p>符号穿透：指我创建的软链接指向哪个文件，在stat查看文件类型时，会显示那个文件的信息而不是软连接文件的信息。</p><h3 id="文件类型">文件类型</h3><p>使用stat获取文件类型或者权限时，参考下面位图</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E4%BD%8D%E5%9B%BE.png" alt="文件权限位图"></p></blockquote><h2 id="link-unlink">link/unlink:</h2><blockquote><p>描述：link就是创建一个FCB，unlink就是删除一个FCB（文件目录项）</p><p>unlink需要注意的是：尽管unlink了文件，但要等到<strong>所有</strong>打开该文件的进程关闭了该文件，系统才会挑时间将文件释放。俗话就是还没删掉inode，等打开文件进程关闭才等时机删。</p></blockquote><p>隐式回收。</p><blockquote><p>当进程结束运行时，系统会自动关闭内存空间。</p><p>一个进程的文件描述符表最多也就能打开1024个文件，如果是服务器一直不关掉进程，系统就不会隐式回收。<strong>这就是我们说要及时free的原因。</strong></p></blockquote><h2 id="readlink函数">readlink函数</h2><p>描述：查看符号链接文件本身的内容。</p><h2 id="rename函数">rename函数</h2><p>描述：重命名文件。</p><hr><h1>目录操作</h1><h2 id="opendir函数">opendir函数</h2><p>根据传入的目录名打开一个目录（库函数）</p><h2 id="closedir函数">closedir函数</h2><p>关闭打开的目录（库函数）</p><h2 id="readdir函数">readdir函数</h2><p>读取目录（库函数）</p><hr><p>dup 和 dup2：</p><blockquote><p>int dup(int oldfd);文件描述符复制。</p><p>​oldfd: 已有文件描述符</p><p>​返回：新文件描述符。</p><p>int dup2(int oldfd, int newfd); 文件描述符复制。重定向。</p><p>将oldfd文件描述符拷贝给newfd，所以它们指向同一个文件。</p></blockquote><p>fcntl 函数实现 dup：</p><blockquote><p>int fcntl(int fd, int cmd, …)</p><p>cmd: F_DUPFD</p><p>参3:  被占用的，返回最小可用的文件描述符。</p><p>​未被占用的， 返回=该值的文件描述符。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习路线</title>
      <link href="/posts/18b4444b.html"/>
      <url>/posts/18b4444b.html</url>
      
        <content type="html"><![CDATA[<p>个人推荐一个java框架路线。</p><p>1、首先了解一下javaweb（servlet）</p><p>2、入门ssm</p><p>3、了解springboot</p><p>4、了解常见组件springcloud或者dubbo&amp;;zk</p><p>5、中间件等 redis和消息队列</p><p>6、上手项目，在项目中巩固技术栈</p><p>更多java面试干货和实战项目推荐，可以关注我的公众号：代码界的小白，希望对你有帮助。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统编程Day3</title>
      <link href="/posts/8edc8dcb.html"/>
      <url>/posts/8edc8dcb.html</url>
      
        <content type="html"><![CDATA[<h1>Day3</h1><p>gdb调试工具：   大前提：程序是你自己写的。  —逻辑错误</p><p>基础指令：<br>-g：使用该参数编译可以执行文件，得到调试表。</p><pre><code>gdb ./a.outlist： list 1  列出源码。根据源码指定 行号设置断点。b：b 20在20行位置设置断点。run/r:运行程序n/next: 下一条指令（会越过函数）s/step: 下一条指令（会进入函数） |  进入系统函数会找不到文件，使用until+行号回到调试点 | 或者finish结束函数调用p/print：p i  查看变量的值。continue：继续执行断点后续指令。finish：结束当前函数调用。 quit：退出gdb当前调试。</code></pre><p>其他指令：</p><pre><code>run：使用run查找段错误出现位置。set args： 设置main函数命令行参数 （在 start、run 之前）run 字串1 字串2 ...: 设置main函数命令行参数info b: 查看断点信息表b 20 if i = 5：设置条件断点。ptype：查看变量类型。display：设置跟踪变量undisplay：取消设置跟踪变量。 使用跟踪变量的编号。</code></pre><blockquote><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bt：列出当前程序正存活着的栈帧。</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">frame： 根据栈帧编号，切换栈帧。</span><br></pre></td></tr></table></figure><p>切换栈帧即可访问函数调用栈帧中的数据</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230331112614337.png" alt="栈帧"></p></blockquote><hr><blockquote><p>makefile： 管理项目。</p><blockquote><p>命名：makefile Makefile  — make 命令</p><p>1 个规则：</p><p>​目标：依赖条件<br>​（一个tab缩进）命令</p></blockquote><blockquote><pre><code>1. **目标的时间必须晚于依赖条件的时间，否则，更新目标并继续更新总目标**2. **依赖条件如果不存在，找寻新的规则去产生依赖条件。**</code></pre><p>（make会把makefile的第一行规则作为终极目标）</p><p>ALL：指定 makefile 的终极目标。</p><p><strong>小细节</strong>：为什么要把makefile写的复杂？</p><p>例如：我修改了一个add的源码，而导致我所有的源文件都要跟着编译一遍，这是非常耗时的。如果写成如下的样式，make会根据<strong>目标的时间必须晚于依赖条件的时间，否则，更新目标并继续更新总目标</strong>原则，只执行<code>gcc -v add.c -o hello.o 和 gcc hello.o add.o sub.o div1.o -o a.out.</code></p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230331164549575.png" alt="image-20230331164549575"></p></blockquote><blockquote><p>2 个函数：</p><p>​src = $(wildcard ./*.c): 匹配当前工作目录下的所有.c 文件。将文件名组成列表，赋值给变量 src。  src = add.c sub.c div1.c</p><p>​obj = $(patsubst %.c, %.o, $(src)): 将参数3中，包含参数1的部分，替换为参数2。 obj = add.o sub.o div1.o</p><p>clean:(没有依赖)</p><pre><code>make clean -n | -n表示提示不执行  -rm -rf $(obj) a.out“-”：作用是，删除不存在文件时，不报错。顺序执行结束。</code></pre><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230331172250751.png" alt="使用2个函数"></p><p>3 个自动变量：</p><p>​$@: 在规则的<strong>命令中</strong>，表示<strong>规则中的目标</strong>。</p><p>​$^: 在规则的<strong>命令中</strong>，表示<strong>所有依赖条件</strong>。</p><p>​$&lt;: 在规则的<strong>命令中，<strong>表示</strong>第一个依赖条件</strong>。如果将该变量应用在<strong>模式规则</strong>中，它可将依赖条件列表中的依赖<strong>依次</strong>取出，套用模式规则。</p><p>模式规则：</p><p>​%.o:%.c<br>​   gcc -c $&lt; -o %@</p></blockquote><p>使用这么多函数和自动变量的原因是<strong>方便扩展</strong></p><p><strong>不需要修改makefile</strong>即可扩展程序功能函数。</p><blockquote><p>静态模式规则：（指定模式规则下使用的obj）（obj可以有多个，可有obj函数的特性看出）</p><p>​$(obj):%.o:%.c<br>​   gcc -c $&lt; -o %@</p><p>伪目标：（不管重名与否都执行）</p><p>​.PHONY: clean ALL</p><p>参数：<br>-n：模拟执行make、make clean 命令。</p><p>​-f：指定文件执行 make 命令。make -f filename  clean          (xxx.mk通常是makefile文件)</p></blockquote></blockquote><pre><code>作业：编写一个 makefile 可以将其所在目录下的所有独立 .c 文件编译生成同名可执行文件。</code></pre><p>tips：makefile中的%和*的区别：</p><p>%在*的基础上，多了一个匹配的功能。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统编程Day2</title>
      <link href="/posts/f9dbbd5d.html"/>
      <url>/posts/f9dbbd5d.html</url>
      
        <content type="html"><![CDATA[<h1>Day 2</h1><p>vim的三种工作模式</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230330114045599.png" alt=""></p><p>vim的快捷键</p><blockquote><p>跳转到指定行：</p><ol><li>88G （命令模式）</li><li>:88  (末行模式)</li></ol><p>跳转文件首：</p><p>​gg （命令模式）</p><p>跳转文件尾：</p><p>​G（命令模式）</p><p>自动格式化程序：</p><p>​gg=G（命令模式）</p><p>大括号对应：</p><p>​% （命令模式）</p><p>光标移至行首：</p><p>​0 （命令模式）执行结束，工作模式不变。</p><p>光标移至行尾：</p><p>​$ （命令模式）执行结束，工作模式不变。</p><p>删除单个字符：</p><p>​x （命令模式）执行结束，工作模式不变。</p><p>替换单个字符：</p><p>​将待替换的字符用光标选中， r （命令模式），再按欲替换的字符</p><p>删除一个单词：</p><p>​dw（命令模式）光标置于单词的首字母进行操作。</p><p>删除光标至行尾：</p><p>​D 或者 d$（命令模式）</p><p>删除光标至行首：</p><p>​d0 （命令模式）</p><p>删除指定区域：</p><p>​按 V （命令模式）切换为 “可视模式”，使用 hjkl挪移光标来选中待删除区域。  按 d 删除该区域数据。</p><p>剪切指定1行：</p><p>​在光标所在行，按 dd （命令模式）</p><p>剪切指定N行：</p><p>​在光标所待删除首行，按 Ndd （命令模式）</p><p>复制一行：</p><p>​yy</p><p>粘贴：<br>p：向后、P：向前。</p><p>查找：</p><ol><li>找 设想 内容：命令模式下， 按 “/” 输入欲搜索关键字，回车。使用 n 检索下一个。</li><li>找 看到的内容：命令模式下，将光标置于单词任意一个字符上，按 “*”/ “#”</li></ol><p>单行替换：</p><p>​将光标置于待替换行上， 进入末行模式，输入 :s /原数据/新数据</p><p>通篇替换：</p><p>​末行模式， :%s /原数据/新数据/g   g:不加，只替换每行首个。</p><p>指定行的替换：</p><p>​末行模式， :起始行号，终止行号s /原数据/新数据/g   g:不加，只替换每行首个。</p><p>​:29,35s /printf/println/g</p><p>撤销、反撤销：</p><p>​u、ctrl+r（命令模式）</p><p>分屏：（末行模式）<br>sp：横屏分。 Ctrl+ww 切换。</p><p>​vsp：竖屏分。Ctrl+ww 切换。</p><p>跳转至 man 手册：</p><p>​将光标置于待查看函数单词上，使用 K（命令模式）跳转。 指定卷， nK</p><p>查看宏定义：</p><p>​将光标置于待查看宏定义单词上，使用 [d 查看定义语句。（命令模式）</p><p>在末行模式执行shell命令：</p><p>​:!命令:! ls -l<br>​:! gcc hello.c -o hello100  | !./hello100</p><p>​<strong>gcc hello.c -o hello = gcc -c hello.c -o hello.o + gcc hello.o -o a.out</strong></p><p>​:! g++ hello.cpp | !./a.out</p></blockquote><hr><p>gcc编译：<img src="https://raw.githubusercontent.com/jack8luo/picture/main/gcc%E7%BC%96%E8%AF%914%E6%AD%A5%E9%AA%A4.png" alt="gcc编译4步骤"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">4步骤： 预处理、编译、汇编、连接。</span><br><span class="line"></span><br><span class="line"><span class="code">-I：指定头文件所在目录位置。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">-c：只做预处理、编译、汇编。得到 二进制 文件！！！</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">-g：编译时添加调试语句。 主要支持 gdb 调试。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">-Wall： 显示所有警告信息。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">-D：向程序中“动态”注册宏定义。   ifdef ... #define NAME VALUE</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">-l: 指定动态库名</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">-L: 指定动态库路径</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/%E5%8A%A8%E6%80%81%E5%BA%93%E5%92%8C%E9%9D%99%E6%80%81%E5%BA%93.png" alt="动态库和静态库"></p><blockquote><blockquote><p>静态库制作及使用步骤：</p><p><strong>（-o 取名）</strong></p><pre><code>1. 将 .c 生成 .o 文件​gcc -c add.c -o add.o2. 使用 ar 工具制作静态库  ar rcs  lib库名.a  add.o sub.o div.o3. 编译静态库到可执行文件中：  gcc test.c lib库名.a -o a.out</code></pre><p>头文件守卫：<strong>防止头文件被重复包含</strong></p></blockquote><blockquote><p>implicit declaration<strong>隐式声明</strong>，这是c语言自己会声明的东西，只会做int add（int ,int）之类的声明，如果库里面有类似viod就会报错。<br>解决办法：自己在源代码中声明函数，为了复用性，我们通常用下面的头文件守卫：</p><pre><code>#ifndef _HEAD_H_#define _HEAD_H_......#endif</code></pre><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">然后在.c中引入<span class="selector-class">.h</span></span><br><span class="line">项目发布：</span><br><span class="line">gcc test<span class="selector-class">.c</span> ./lib/libmylib<span class="selector-class">.a</span> -o <span class="selector-tag">a</span><span class="selector-class">.out</span> -I ./inc</span><br></pre></td></tr></table></figure><p>动态库制作及使用：</p></blockquote></blockquote><blockquote><ol><li>将 .c 生成 .o 文件， （<strong>生成与位置无关的代码 -fPIC</strong>）</li></ol><p>​gcc -c add.c -o add.o -fPIC         （<strong>在动态库函数后生成PIC，程序运行时再链接</strong>）</p><ol start="2"><li>使用 gcc -shared 制作动态库</li></ol><p>gcc -shared -o <a href="http://xn--lib-t33e349b.so">lib库名.so</a>add.o sub.o div.o</p><ol start="3"><li>编译可执行程序时，指定所使用的动态库。  -l：指定库名(去掉lib前缀和.so后缀)  -L：指定库路径。</li></ol><p>gcc test.c -o a.out -lmymath -L./lib -I./inc</p><ol start="4"><li>运行可以执行程序 ./a.out <strong>出错</strong>！！！！ — ldd a.out --&gt; “not found” （<strong>ldd 查看程序链接信息</strong>）</li></ol><p>error while loading shared libraries: <a href="http://libxxx.so">libxxx.so</a>: cannot open shared object file: No such file or directory</p><p>原因：<br>链接器：工作于链接阶段， 工作时需要 -l 和 -L （<strong>执行数据段合并和地址回填</strong>）|</p><p>​动态链接器：工作于程序运行阶段，工作时需要提供动态库所在固定目录位置。</p><p>解决方式：</p><p>​【1】 通过环境变量：  export LD_LIBRARY_PATH=动态库路径</p><p>​./a.out 成功！！！  （临时生效， 终端重启环境变量失效）改变的是进程的环境变量</p><p>​【2】 永久生效： 写入 终端配置文件。  .bashrc  建议使用绝对路径。eg:/home/luo/file/dynamicLab/lib</p><p>​<a href="http://1.vi">1.vi</a> ~/.bashrc</p><p>​2.写入 export LD_LIBRARY_PATH=动态库路径  保存</p><p>3）. .bashrc/  source .bashrc / 重启 终端  —&gt; 让修改后的.bashrc生效</p><p>4）./a.out 成功！！！</p><p>【3】 拷贝自定义动态库 到 /lib (标准C库所在目录位置)</p><p>【4】 配置文件法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>）sudo vi /etc/ld<span class="selector-class">.so</span><span class="selector-class">.conf</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>）写入 动态库绝对路径  保存</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>）sudo ldconfig -v  使配置文件生效。</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>）./<span class="selector-tag">a</span><span class="selector-class">.out</span> 成功！！！--- 使用 ldd  <span class="selector-tag">a</span><span class="selector-class">.out</span> 查看程序链接情况</span><br></pre></td></tr></table></figure></blockquote><p>数据段合并</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230331103821681.png" alt="数据段合并"></p><p>其他：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi显示<span class="built_in">readonly</span></span><br><span class="line">退出两个办法</span><br><span class="line">1：wq！</span><br><span class="line">2：w !sudo <span class="built_in">tee</span> %</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>B610m-a装机步骤</title>
      <link href="/posts/44f9d292.html"/>
      <url>/posts/44f9d292.html</url>
      
        <content type="html"><![CDATA[<h1>B610m-a装机步骤</h1><p>1、先装网卡，因为如果后期装网卡需要把主板拆下来</p><p>2、装cpu，对准卡位。再在主板反面装散热器的固定板，记得拉一下四个边角槽对准卡位</p><p>3、在主板正面插上散热器和散热器的风扇，记得涂硅脂</p><p>4、插上内存条，对准卡位</p><p>5、装上固态，装在离cpu近的地方，越近越快。散热板卡位了不装也行</p><p>6、散热器的风扇线插主板上的有cpu_FAN的标识位置</p><p>7、其他风扇插有CHA_FAN2标识的地方就可以了</p><p>8、主板供电线插靠近内存条那边的插口，</p><table><thead><tr><th><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230824101206649.png" alt="image-20230824101206649"></th><th><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230824101201279.png" alt="image-20230824101201279"></th></tr></thead></table><p>9、cpu供电线，线上有标识</p><p><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230824100753031.png" alt="image-20230824100753031"></p><p>10、usb线插主板电源线下面</p><p>11、开机线</p><p><img src="C:%5CUsers%5Cluo%5CAppData%5CRoaming%5CTencent%5CTIM%5CTemp%5C688a30d53e0d704df0d2d472eb7417ac.png" alt="688a30d53e0d704df0d2d472eb7417ac"></p>]]></content>
      
      
      <categories>
          
          <category> 装机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 装机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xmind激活亲测有效（23/3/30）</title>
      <link href="/posts/1b0b3702.html"/>
      <url>/posts/1b0b3702.html</url>
      
        <content type="html"><![CDATA[<h1>Xmind激活亲测有效（23/3/30）</h1><p>下载资源</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230330095543117.png" alt="image-20230330095543117"></p><p>双击安装包，程序自动安装在C:\Program Files\XMind下</p><p>替换</p><p>C:\Program Files\XMind\resources下的app.asar,打开xmind即可激活。</p>]]></content>
      
      
      <categories>
          
          <category> XMmid </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XMind </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo：更换电脑，如何继续写博客</title>
      <link href="/posts/f7cfc843.html"/>
      <url>/posts/f7cfc843.html</url>
      
        <content type="html"><![CDATA[<h1>hexo：更换电脑，如何继续写博客</h1><details class="folding-tag" green><summary> 哔哔 </summary>              <div class='content'>              <p>先提一句：</p><p>如果想要在百度收录，需要在百度站长验证一下，最后卡在验证环境如下：明显是访问不到外网。</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/image-20230330190044308.png" alt="image-20230330190044308"></p>              </div>            </details><p>1.将你原来电脑上已经配置好并生成的hexo目录拷到你的新电脑上，注意无需拷全部，只拷如下几个目录：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_config.yml</span><br><span class="line"><span class="keyword">package</span>.json</span><br><span class="line">scaffolds/</span><br><span class="line"><span class="keyword">source</span>/</span><br><span class="line">themes/</span><br></pre></td></tr></table></figure><p>将这些目录放到一个目录下，如：hexo／</p><p>2.在你的新电脑上首先配置hexo环境：安装Node.js<br>3.安装hexo，执行命令：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -g hexo</span><br></pre></td></tr></table></figure><p>4.安装好之后，进入hexo／目录<br>5.模块安装，执行命令：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-git --save</span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-feed --save</span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><p>6.部署，执行命令：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo g</span></span><br><span class="line"><span class="attribute">hexo deploy</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>端口映射</title>
      <link href="/posts/8c17acf8.html"/>
      <url>/posts/8c17acf8.html</url>
      
        <content type="html"><![CDATA[<p>端口映射：</p><p>路由器wan口IP：222.204.50.135。lan口IP：192.168.101.1</p><p>在路由器中将本地服务器端口映射出去，通过公网访问路由器IP+端口，访问到了本地服务器：</p><img src="C:\Users\luo\AppData\Roaming\Typora\typora-user-images\image-20230325170753242.png" alt="image-20230325170753242" style="zoom: 80%;" /><p>可是在外网访问本地服务器时，只能访问到本地服务器，不能通过本地服务器调用局域网内的摄像机资源。</p><p>tip：直接将本地录像机数据放入本地服务器，不用接口调用</p><p>直接访问将摄像头端口映射出去，通过公网访问该路由器IP+端口，可以看见该摄像头：</p><p>但是ping不通222.204.50.135这个教育网ip。</p><img src="C:\Users\luo\AppData\Local\Temp\WeChat Files\f479b05de64819c0aeab4ffabaf1678.jpg" alt="f479b05de64819c0aeab4ffabaf1678" style="zoom:25%;" /><hr><p>反向代理</p><p>访问该云服务器，就相当于访问到了局域网内的本地服务器，</p><p>通过访问云服务器，实现访问内网设备：</p><img src="C:\Users\luo\AppData\Roaming\Typora\typora-user-images\image-20230325172432221.png" alt="image-20230325172432221" style="zoom:25%;" />]]></content>
      
      
      
        <tags>
            
            <tag> 海康SDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>端口映射（1）</title>
      <link href="/posts/fe27148e.html"/>
      <url>/posts/fe27148e.html</url>
      
        <content type="html"><![CDATA[<p>今天研究了一下端口映射。</p><p>可以下载配置apache在本地搭建运行web项目的服务器，再在路由器上做一个端口映射，这样就可以在公网上访问内网中的本地服务器，例如ip：端口号。其中ip为你路由器的出口ip。映射到你本地的服务器。</p><p>期间我给本地服务齐绑定了一个固定的内网ip</p><p>今天还购买了阿里云的域名，要过几天才可以开始备案，我打算备案之后，在路由器的DDNS，动态域名解析中将域名绑定动态的公网ip，实现域名访问局域网内的服务器。</p><p>今天实验发现，外网可以访问到本地服务器，但是不能通过该网页调用内网中的摄像头。</p><p>我又把摄像头ip映射到80端口了，以后再来实验一下</p>]]></content>
      
      
      
        <tags>
            
            <tag> 海康SDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统编程Day1</title>
      <link href="/posts/60d2ece7.html"/>
      <url>/posts/60d2ece7.html</url>
      
        <content type="html"><![CDATA[<h1>Day 1</h1><p>学习了一些命令，这些命令记住常用的，备份难记的。</p><p>常用的比如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">绝对路径中，<span class="built_in">cd</span> ..、<span class="built_in">cd</span> .、 <span class="built_in">cd</span>、 <span class="built_in">cd</span> - 的使用。</span><br><span class="line">./ 本级目录 ../上一级目录</span><br><span class="line"></span><br><span class="line">删除文件<span class="built_in">rm</span></span><br><span class="line"><span class="built_in">rm</span> -rf 递归强制删除</span><br><span class="line"><span class="built_in">mv</span> 文件重命名|移动文件</span><br><span class="line"><span class="built_in">mv</span>和<span class="built_in">cp</span>的区别</span><br><span class="line">1、功能上的区别</span><br><span class="line"><span class="built_in">mv</span>：用户可以使用该命令为文件或目录重命名或将文件由一个目录移入另一个目录中（该文件从原来的文件夹中消失）。</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span>: 该命令的功能是将给出的文件或目录拷贝到另一文件或目录中（该文件仍保存在原文件夹中）。</span><br><span class="line"></span><br><span class="line">2、从inode角度来区分</span><br><span class="line"><span class="built_in">mv</span>：会将存储于indoe索引节点上的文件元信息也移动到新文件中。</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> : 只会复制文件数据，不会复制inode索引节点上的文件元信息。</span><br><span class="line"></span><br><span class="line">创建用户sudo adduser 新用户名--- useradd</span><br><span class="line">删除用户sudo deluser 用户名</span><br><span class="line">find找文件</span><br><span class="line"><span class="built_in">ln</span>创建软链接和硬链接的方式和属性</span><br><span class="line"><span class="built_in">chmod</span>修改权限的两种方式</span><br><span class="line">grep查找文件内容</span><br><span class="line">压缩文件tar、rar、zip等命令---gzip and bzip with tar:因为gzip和bzip不能打包文件夹多个文件。</span><br><span class="line">tar zcvf filename file1 file2</span><br><span class="line">z:gzip方式、c:创建、v:显示压缩、f：名字</span><br><span class="line">tar jcvf filename file1 file2</span><br><span class="line">z:bzip方式、c:创建、v:显示压缩、f：名字</span><br><span class="line">解压</span><br><span class="line">tar zxvf filename</span><br><span class="line">tar jxvf filename</span><br><span class="line"></span><br><span class="line">rar a -r filename file</span><br><span class="line">unrar x filename</span><br><span class="line"></span><br><span class="line">zip -r filename file</span><br><span class="line">unzip filename</span><br><span class="line"></span><br><span class="line">安装软件卸载软件的方法。</span><br><span class="line">sudo aptitude show softname 查看软件安装信息</span><br></pre></td></tr></table></figure><p>文件类型</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">普通文件：-</span><br><span class="line">目录文件：d</span><br><span class="line">字符设备文件：c</span><br><span class="line">块设备文件：<span class="selector-tag">b</span></span><br><span class="line">软连接：l</span><br><span class="line">管道文件：<span class="selector-tag">p</span></span><br><span class="line">套接字：s</span><br><span class="line">未知文件。</span><br></pre></td></tr></table></figure><p>系统目录</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bin：存放二进制可执行文件</span><br><span class="line">boot：存放开机启动程序</span><br><span class="line">dev：存放设备文件： 字符设备、块设备</span><br><span class="line">home：存放普通用户</span><br><span class="line">etc：用户信息和系统配置文件 passwd、<span class="keyword">group</span></span><br><span class="line"><span class="title">lib</span>：库文件：libc.so.<span class="number">6</span></span><br><span class="line">root：管理员宿主目录（家目录）</span><br><span class="line">usr：用户资源管理目录 unix software resource</span><br></pre></td></tr></table></figure><p>简单的快捷键</p><p>tab显示提示、ctrl-a、ctrl-e、ctrl-u、ctrl-Alt-t。</p><p>细节的内容还请再看一遍视频讲解和讲义。</p><hr><p>学习完后写的五子棋游戏服务器，匹配游戏，断线重连，连接mysql数据库，欢迎大家一起学习 <a href="https://github.com/ChenVv-hong/Gobang">https://github.com/ChenVv-hong/Gobang</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git操作手册（给实验室同学）</title>
      <link href="/posts/193a5633.html"/>
      <url>/posts/193a5633.html</url>
      
        <content type="html"><![CDATA[<h2 id="操作手册">操作手册</h2><p>1、安装GIT</p><p><a href="https://blog.csdn.net/adminsir0/article/details/126355313">(3条消息) git安装教程</a>（一直next就行）</p><p>2、注册远程仓库账号</p><p>打开<a href="https://github.com/">GitHub</a>，注册自己账号</p><p>不翻墙的话，注册<a href="https://gitee.com/">Gitee</a>（这个文档展示gitee）</p><p>3、本地创建任意文件夹，鼠标右键选择git bush</p><p>4、配置用户，命令行输入：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config <span class="attr">--global</span> user<span class="selector-class">.name</span> <span class="string">&quot;your name&quot;</span></span><br><span class="line">git config <span class="attr">--global</span> user<span class="selector-class">.email</span> <span class="string">&quot;your_email@email.com&quot;</span></span><br></pre></td></tr></table></figure><p>5、生成SSH密钥</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -<span class="built_in">t</span> rsa -C <span class="string">&quot;your_email@email.com&quot;</span></span><br></pre></td></tr></table></figure><p>进入C:\Users\Administrator.ssh目录下，查看生成的SSH密钥，</p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202212181525633.jpeg" alt="img" style="zoom:50%;" /><p>复制id_ras.pub里面的字符串，在gitee设置中的SSH公钥中添加密钥。</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202212181527256.png" alt="image-20221218152744139"></p><p>6、创建一个文件，在命令行中输入</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">echo</span> <span class="string">&quot;123&quot;</span> &gt; <span class="number">1</span>.txt</span><br></pre></td></tr></table></figure><p>7、命令行输入：git init</p><p>8、命令行输入：git add .</p><p>9、命令行输入：git commit -m “123”</p><p>10、命令行输入：git remote add origin <strong>url</strong>  |  url选择你的远程仓库，比如<strong>gitee</strong>创建完仓库后，会有这个地址，我们选择SSH链接就行。</p><p>例如：<img src="https://raw.githubusercontent.com/jack8luo/picture/main/202212181520074.png" alt="image-20221218152045988"></p><p>11、命令行输入：git push -u origin “master”</p><p>显示成功！</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小路径和</title>
      <link href="/posts/61562a34.html"/>
      <url>/posts/61562a34.html</url>
      
        <content type="html"><![CDATA[<h2 id="64-最小路径和"><a href="https://leetcode.cn/problems/minimum-path-sum/">64. 最小路径和</a></h2><h2 id="题目描述">题目描述</h2><p>给定一个包含非负整数的 <code>*m* x *n*</code> 网格 <code>grid</code> ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p><p>**说明：**每次只能向下或者向右移动一步。</p><h2 id="示例">示例</h2><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202212162305580.jpeg" alt="img"></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = <span class="string">[[1,3,1],[1,5,1],[4,2,1]]</span></span><br><span class="line">输出：<span class="number">7</span></span><br><span class="line">解释：因为路径 <span class="number">1</span>→<span class="number">3</span>→<span class="number">1</span>→<span class="number">1</span>→<span class="number">1</span> 的总和最小。</span><br></pre></td></tr></table></figure><h2 id="思路">思路</h2><p>这就是一道简单的动态规划问题，为什么我最开始的时候没有想到呢？最开始想到的是遍历每一种情况，求其最小值但是遍历不了每一种情况。因为没有经过系统的练习。</p><p>动态规划问题都需要有个中间数组dp。通常用于解决最大最小问题。</p><h2 id="代码实现">代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minPathSum</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = grid.<span class="built_in">size</span>();<span class="type">int</span> n = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n,<span class="number">0</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">0</span>&amp;&amp;j==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">0</span>)</span><br><span class="line">                    dp[i][j] = dp[i][j<span class="number">-1</span>] + grid[i][j];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j == <span class="number">0</span>)</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j] + grid[i][j];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    dp[i][j] = <span class="built_in">min</span>(dp[i<span class="number">-1</span>][j],dp[i][j<span class="number">-1</span>]) + grid[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m<span class="number">-1</span>][n<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>代码还是需要经过系统的学习才行，下次学习的时候尽量把一个专题的东西学完。</p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++、算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不同路径</title>
      <link href="/posts/a42081a0.html"/>
      <url>/posts/a42081a0.html</url>
      
        <content type="html"><![CDATA[<h2 id="62-不同路径"><a href="https://leetcode.cn/problems/unique-paths/">62. 不同路径</a></h2><h2 id="题目描述">题目描述</h2><p>一个机器人位于一个 <code>m x n</code> 网格的左上角 （起始点在下图中标记为 “Start” ）。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</p><p>问总共有多少条不同的路径？</p><p><strong>示例 1：</strong></p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202212121030018.png" alt="img"></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：m = <span class="number">3</span>, <span class="built_in">n</span> = <span class="number">7</span></span><br><span class="line">输出：<span class="number">28</span></span><br></pre></td></tr></table></figure><h2 id="思路">思路</h2><h5 id="思路1">思路1</h5><p>这是一个高中的排列组合的一个数学题。<br>$$<br>C_{m+n-2}^{m-1}=\left(\begin{array}{c}<br>m+n-2 \<br>m-1<br>\end{array}\right)=\frac{(m+n-2)(m+n-3) \cdots n}{(m-1) !}=\frac{(m+n-2) !}{(m-1) !(n-1) !}<br>$$<br>用算法实现这个等式就可以了。</p><h5 id="思路2">思路2</h5><p>dfs递归暴力求解，具体实现还不熟练，直接贴代码，（超时）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>, m, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> m, <span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= m || j &gt;= n)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i == m - <span class="number">1</span> &amp;&amp; j == n - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(i + <span class="number">1</span>, j, m, n) + <span class="built_in">dfs</span>(i, j + <span class="number">1</span>, m, n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="思路3">思路3</h5><p>动态规划，每个答案都是前面两个答案的综总和。</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp<span class="comment">[i]</span><span class="comment">[j]</span> = dp<span class="comment">[i - 1]</span><span class="comment">[j]</span> + dp<span class="comment">[i]</span><span class="comment">[j - 1]</span>;</span><br></pre></td></tr></table></figure><h2 id="代码实现">代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">1</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>动态规划和dfs需要系统的学习，不然真的太模糊了。。。</p><p>就比如爬梯子这道题。</p><p>假设你正在爬楼梯。需要 <code>n</code> 阶你才能到达楼顶。</p><p>每次你可以爬 <code>1</code> 或 <code>2</code> 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><h5 id="示例">示例</h5><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 3</span><br><span class="line">输出：3</span><br><span class="line">解释：有三种方法可以爬到楼顶。</span><br><span class="line">1.<span class="number"> 1 </span>阶 +<span class="number"> 1 </span>阶 +<span class="number"> 1 </span>阶</span><br><span class="line">2.<span class="number"> 1 </span>阶 +<span class="number"> 2 </span>阶</span><br><span class="line">3.<span class="number"> 2 </span>阶 +<span class="number"> 1 </span>阶</span><br></pre></td></tr></table></figure><p>动态规划方程就是</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp<span class="comment">[i]</span> = dp<span class="comment">[i - 1]</span> + dp<span class="comment">[i - 2]</span>;</span><br></pre></td></tr></table></figure><p>需要注意的是：这种动态规划都可以用递归来做，但是递归的空间复杂度太高了， 通常是会超时的。</p><h5 id="递归">递归</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> climbStairs(n-<span class="number">1</span>)+climbStairs(n-<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="动态规划">动态规划</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> n; <span class="comment">// 因为下面直接对dp[2]操作了，防止空指针</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123; <span class="comment">// 注意i是从3开始的</span></span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++、算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>56. 合并区间</title>
      <link href="/posts/2e0786fe.html"/>
      <url>/posts/2e0786fe.html</url>
      
        <content type="html"><![CDATA[<h2 id="56-合并区间"><a href="https://leetcode.cn/problems/merge-intervals/">56. 合并区间</a></h2><h2 id="题目描述">题目描述</h2><p>以数组 <code>intervals</code> 表示若干个区间的集合，其中单个区间为 <code>intervals[i] = [starti, endi]</code> 。请你合并所有重叠的区间，并返回 <em>一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间</em> 。</p><p><strong>示例 1：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：intervals = [[<span class="number">1</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">6</span>],[<span class="number">8</span>,<span class="number">10</span>],[<span class="number">15</span>,<span class="number">18</span>]]</span><br><span class="line">输出：[[<span class="number">1</span>,<span class="number">6</span>],[<span class="number">8</span>,<span class="number">10</span>],[<span class="number">15</span>,<span class="number">18</span>]]</span><br><span class="line">解释：区间 [<span class="number">1</span>,<span class="number">3</span>] 和 [<span class="number">2</span>,<span class="number">6</span>] 重叠, 将它们合并为 [<span class="number">1</span>,<span class="number">6</span>].</span><br></pre></td></tr></table></figure><h2 id="思路">思路</h2><p>开始我是想直接遍历，依次比较两个数组是否合并，能合并就push到目标二维向量res中，这样操作就导致最多只有两个数组能合并，忽略了三个及以上的数组合并的情况，所以最好的做法就是先把第一个数组push到res中，再逐个遍历对比intervals中的数组。</p><h2 id="代码实现">代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//为什么不能放在pubilc中？</span></span><br><span class="line"><span class="comment">// 重载的排序函数不能放在 public 下，这是因为重载的排序函数本质上是一个类内部的函数，它的主要作用是为类的对象提供排序功能。而 public 下的函数是可以在类的内部和外部访问的，因此不能将重载的排序函数放在 public 下。</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare1</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; a,vector&lt;<span class="type">int</span>&gt;&amp; b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">0</span>]&lt;b[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">merge</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; intervals) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="built_in">sort</span>(intervals.<span class="built_in">begin</span>(),intervals.<span class="built_in">end</span>(),compare1);</span><br><span class="line">        res.<span class="built_in">push_back</span>(intervals[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; intervals.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(res[j][<span class="number">1</span>]&gt;=intervals[i][<span class="number">0</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                vector&lt;<span class="type">int</span>&gt; temp;</span><br><span class="line">                temp.<span class="built_in">push_back</span>(res[j][<span class="number">0</span>]);</span><br><span class="line">                temp.<span class="built_in">push_back</span>(<span class="built_in">max</span>(res[j][<span class="number">1</span>],intervals[i][<span class="number">1</span>]));</span><br><span class="line">                res.<span class="built_in">pop_back</span>();</span><br><span class="line">                res.<span class="built_in">push_back</span>(temp);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(intervals[i]);</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Solution a;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; b = &#123;&#123;<span class="number">1</span>,<span class="number">4</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">    b = a.<span class="built_in">merge</span>(b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i : b)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> j : i)</span><br><span class="line">            cout&lt;&lt;j&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码优化">代码优化</h2><p>通过chatGPT它帮我优化了一下代码。</p><p>使用了拉姆达表达式，更熟练的使用向量vector，很精彩</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">merge</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; intervals) &#123;</span><br><span class="line">        <span class="comment">// Use a deque to store the merged intervals</span></span><br><span class="line">        deque&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Sort the intervals by their start time</span></span><br><span class="line">        <span class="built_in">sort</span>(intervals.<span class="built_in">begin</span>(), intervals.<span class="built_in">end</span>(),</span><br><span class="line">            [](<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; b) &#123;</span><br><span class="line">                <span class="keyword">return</span> a[<span class="number">0</span>] &lt; b[<span class="number">0</span>];</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add the first interval to the deque</span></span><br><span class="line">        res.<span class="built_in">push_back</span>(intervals[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Iterate through the remaining intervals</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; intervals.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="comment">// If the end time of the last interval in the deque is greater than</span></span><br><span class="line">            <span class="comment">// or equal to the start time of the current interval, merge them</span></span><br><span class="line">            <span class="keyword">if</span> (res.<span class="built_in">back</span>()[<span class="number">1</span>] &gt;= intervals[i][<span class="number">0</span>]) &#123;</span><br><span class="line">                vector&lt;<span class="type">int</span>&gt; temp = &#123; res.<span class="built_in">back</span>()[<span class="number">0</span>], <span class="built_in">max</span>(res.<span class="built_in">back</span>()[<span class="number">1</span>], intervals[i][<span class="number">1</span>]) &#125;;</span><br><span class="line">                res.<span class="built_in">pop_back</span>();</span><br><span class="line">                res.<span class="built_in">push_back</span>(temp);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Otherwise, just add the current interval to the deque</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(intervals[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Return the merged intervals as a vector</span></span><br><span class="line">        <span class="keyword">return</span> vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Solution a;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; b = &#123;&#123;<span class="number">1</span>,<span class="number">4</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">    b = a.<span class="built_in">merge</span>(b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i : b)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> j : i)</span><br><span class="line">            cout&lt;&lt;j&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>写代码前，先想好思路，不然改代码会改得头大，也会阻塞我们的思路。</p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++、算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跳跃游戏</title>
      <link href="/posts/d94019be.html"/>
      <url>/posts/d94019be.html</url>
      
        <content type="html"><![CDATA[<h2 id="55-跳跃游戏"><a href="https://leetcode.cn/problems/jump-game/">55. 跳跃游戏</a></h2><h2 id="题目描述">题目描述</h2><p>给定一个非负整数数组 <code>nums</code> ，你最初位于数组的 <strong>第一个下标</strong> 。</p><p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>判断你是否能够到达最后一个下标。</p><p><strong>示例 1：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,3,1,1,4]</span><br><span class="line">输出：true</span><br><span class="line">解释：可以先跳<span class="number"> 1 </span>步，从下标<span class="number"> 0 </span>到达下标 1, 然后再从下标<span class="number"> 1 </span>跳<span class="number"> 3 </span>步到达最后一个下标。</span><br></pre></td></tr></table></figure><h2 id="思路">思路</h2><blockquote><p>目前想到两种方法，一种是贪心，就是一直走下去，看我最远能走多远，如果最远的距离大于数组长度，则必可达。</p><p>还有一种是找规律，我们可以发现，如果数组非0，那么必可达终点，所以我们只需要查看0的元素是否可以跳过去。逆向遍历，遇到0，再逆向遍历看看有没有元素能跳过这个0，如果不能则不可达，如果能继续逆向遍历到达终点，那么就是可达。</p></blockquote><h2 id="贪心">贪心</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//贪心</span></span><br><span class="line"><span class="comment">// 判断我从开始位置能到的最远距离与数组的长度做对比，最远位置比数组长度长，则能到达。</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canJump</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> maxlength = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>() - <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;=maxlength)</span><br><span class="line">                maxlength = <span class="built_in">max</span>(maxlength , i + nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxlength&gt;=nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="找规律">找规律</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找规律</span></span><br><span class="line"><span class="comment">// 发现如果数组元素都大于0，则必可达。</span></span><br><span class="line"><span class="comment">// 只需要判断元素中=0的元素之前是否有元素可以跳过这个0</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canJump</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = nums.<span class="built_in">size</span>()<span class="number">-2</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (j = i<span class="number">-1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(j+nums[j] &gt; i) <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j == <span class="number">-1</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>贪心和动态规划回溯（dfs）是重点。</p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++、算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git工作流</title>
      <link href="/posts/7653a710.html"/>
      <url>/posts/7653a710.html</url>
      
        <content type="html"><![CDATA[<h2 id="git工作流：">git工作流：</h2><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202212041100978.png" alt="image-20221204110021821"></p><p>出现的问题：</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202212041409760.png" alt="image-20221204140937710"></p><p>遇到这种情况说明，是因为虽然使用的是git push命令，但是本质还是http。（github在21年为了安全，取消账号密码身份验证（http就需要账号密码登录验证），而使用令牌(Token)的身份验证）</p><p>我们来验证是否可以连接github显示没有问题。发现连接是没有问题的。</p><p>这句话其实一直存在，它只是想告诉你，github 不允许 shell 交互。</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202212041401785.png" alt="image-20221204140109692"></p><p>原因&amp;解决<br>虽然是用 git 命令push，但本质上仍然是 https，所以不允许提交。<br>使用 git remote -v 查看现在的远程 url 地址。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">originhttps:<span class="regexp">//gi</span>thub.com<span class="regexp">/jack8luo/</span>-.git (fetch)</span><br><span class="line">originhttps:<span class="regexp">//gi</span>thub.com<span class="regexp">/jack8luo/</span>-.git (push)</span><br></pre></td></tr></table></figure><p>使用下面的改 url 链接。</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">git</span> <span class="string">remote</span> <span class="built_in">set-url</span> <span class="string">origin</span> <span class="string">git</span>@<span class="string">github</span>.<span class="string">com:jack8luo/</span>-.<span class="string">git</span>   </span><br></pre></td></tr></table></figure><p>再次查看</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote -v                                                 </span><br><span class="line"><span class="keyword">origin</span>git@github.com:<span class="keyword">jack8luo/-.git </span>(fetch)</span><br><span class="line"><span class="keyword">origin</span>git@github.com:<span class="keyword">jack8luo/-.git </span>(push)</span><br></pre></td></tr></table></figure><p>已经改为 ssh 了。现在可以正常 push 了。</p><p>测试：github不与shell交互，这个shell指的就是我们的命令行窗口了。发现使用git的工具bash也出现http连接出错。</p><p>或许也可以尝试重新配置ssh密钥连接一下试试。</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202212041434804.png" alt="img"></p><p>windows下创建文件使用echo ” text “ &gt; 1.txt</p><p>linux使用touch 1.txt</p><p>在windows下使用touch需安装touch</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install touch-<span class="keyword">cli</span> -g</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>常见问题遇见：</p><h2 id="spwan-failed问题">spwan failed问题</h2><h3 id="可以考虑连接手机热点解决，也可以修改自己的端口：443">可以考虑连接手机热点解决，也可以修改自己的端口：443.</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Push failed</span><br><span class="line">Kex_exchange_identification: <span class="keyword">Connection</span> closed <span class="keyword">by</span> remote hostConnection closed <span class="keyword">by</span> <span class="number">20.205</span><span class="number">.243</span><span class="number">.166</span> port <span class="number">22</span></span><br><span class="line">Could <span class="keyword">not</span> <span class="keyword">read</span> <span class="keyword">from</span> remote repository.</span><br><span class="line">Please make sure you have the correct <span class="keyword">access</span> rightsand the repository <span class="keyword">exists</span>.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="解决方法">解决方法</h2><p>一般情况下是以上错误都是因为挂着VPN导致端口冲突</p><p>目前遇到两类情况，解决办法如下。</p><p>1 网络本身无vpn，使用ShadowsocksR等工具科学上网<br>退出ShadowsocksR即可<br>缺点：访问github会变慢，毕竟把vpn关掉了。如果开vpn本身就是为了更快速的访问github，那这样的操作就很费劲，每次和远程仓库交互都要关掉vpn，搞完再打开，推荐2.1。<br>2 网络本身挂载vpn，如openwrt上安装了ShadowsocksR<br>解决办法有两种（推荐第一种）<br>2.1 修改项目目录中隐藏文件夹 .git 内的 config 文件<br>将 Project/.git/config 文件中ssh格式的url，修改为github仓库中https格式的url。如：</p><p>url = <a href="https://github.com/username/SpringBootWebTest.git">https://github.com/username/SpringBootWebTest.git</a></p><p>因为开着vpn，代理端口走22；同时git的ssh一般也使用22端口，这样造成冲突；而git的https一般使用443端口，不会产生冲突。</p><p>一般企业防火墙会打开80和443这两个http/https协议的端口，因此在架设了企业防火墙的时候使用https可以很好地绕开安全限制使用git；但是对于ssh来说，企业防火墙很可能没打开22端口。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旋转图像</title>
      <link href="/posts/a1d0cd32.html"/>
      <url>/posts/a1d0cd32.html</url>
      
        <content type="html"><![CDATA[<h2 id="48-旋转图像"><a href="https://leetcode.cn/problems/rotate-image/">48. 旋转图像</a></h2><h2 id="题目描述">题目描述</h2><p>给定一个 n × n 的二维矩阵 matrix 表示一个图像。请你将图像顺时针旋转 90 度。</p><p>你必须在 原地 旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要 使用另一个矩阵来旋转图像。</p><p><strong>示例 1：</strong></p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202212012027984.png" alt="image-20221201202701906"></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = <span class="string">[[1,2,3],[4,5,6],[7,8,9]]</span></span><br><span class="line">输出：<span class="string">[[7,4,1],[8,5,2],[9,6,3]]</span></span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202212012027198.png" alt="image-20221201202722150"></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = <span class="comment">[<span class="comment">[5,1,9,11]</span>,<span class="comment">[2,4,8,10]</span>,<span class="comment">[13,3,6,7]</span>,<span class="comment">[15,14,12,16]</span>]</span></span><br><span class="line">输出：<span class="comment">[<span class="comment">[15,13,2,5]</span>,<span class="comment">[14,3,4,1]</span>,<span class="comment">[12,6,8,9]</span>,<span class="comment">[16,7,10,11]</span>]</span></span><br></pre></td></tr></table></figure><h2 id="思路">思路</h2><p>顺时针旋转90°==先水平旋转，再主对角线旋转</p><p>这就类似于把一步旋转操作拆分成了两步操作，从而化简了算法的复杂性</p><h2 id="代码">代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span>&amp; a, <span class="type">int</span>&amp; b)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> temp = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 水平翻转</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; matrix.<span class="built_in">size</span>()/<span class="number">2</span>; i++)&#123;</span><br><span class="line">        </span><br><span class="line">            <span class="type">int</span> j = matrix.<span class="built_in">size</span>() - i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; matrix[i].<span class="built_in">size</span>(); k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">swap</span>(matrix[i][k],matrix[j][k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//主对角线翻转</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; matrix.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span> ; j &lt; matrix.<span class="built_in">size</span>(); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">swap</span>(matrix[i][j],matrix[j][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><blockquote><p>就是简单一数学题。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法、c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全排列</title>
      <link href="/posts/12ad1f11.html"/>
      <url>/posts/12ad1f11.html</url>
      
        <content type="html"><![CDATA[<h2 id="46-全排列"><a href="https://leetcode.cn/problems/permutations/">46. 全排列</a></h2><h2 id="题目描述">题目描述</h2><p>给定一个不含重复数字的数组 <code>nums</code> ，返回其 <em>所有可能的全排列</em> 。你可以 <strong>按任意顺序</strong> 返回答案。</p><h2 id="实例">实例</h2><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = <span class="comment">[1,2,3]</span></span><br><span class="line">输出：<span class="comment">[<span class="comment">[1,2,3]</span>,<span class="comment">[1,3,2]</span>,<span class="comment">[2,1,3]</span>,<span class="comment">[2,3,1]</span>,<span class="comment">[3,1,2]</span>,<span class="comment">[3,2,1]</span>]</span></span><br></pre></td></tr></table></figure><h2 id="思路">思路</h2><details class="folding-tag" pink><summary> 哔哔 </summary>              <div class='content'>              <p>全排列的问题做过很多次，但是这次还是没写出来，在这里总结一下。</p><p>全排列就是深度搜索dfs，也叫做回溯算法，相同的题目还有<a href="https://leetcode.cn/problems/combination-sum/">39. 组合总和</a></p><p>。回溯深搜都是暴力算法，不同于遍历，深搜可以更有效地暴力。</p>              </div>            </details><p>在这里介绍一下c++的next_permutation(nums.begin(), nums.end())函数。这个函数返回的是bool，在函数执行中会将nums的下一次排列换成nums。</p><p>比如这道题的解法一就用到了这个函数</p><h2 id="next-permutation">next_permutation</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">permute</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; res;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            res.<span class="built_in">emplace_back</span>(nums);</span><br><span class="line">        &#125;<span class="keyword">while</span>(<span class="built_in">next_permutation</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>()));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>相似的题可以看[力扣hot100–031 下一个排列 | 骆小黑 (<a href="http://luoxiaohei.co">luoxiaohei.co</a>)](<a href="https://blog.luoxiaohei.co/2022/10/17/31">https://blog.luoxiaohei.co/2022/10/17/31</a>. 下一个排列/)</p><hr><h2 id="暴力回溯">暴力回溯</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; tag;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; temp;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">permute</span>(vector&lt;<span class="type">int</span>&gt; &amp;nums)</span><br><span class="line">    &#123;</span><br><span class="line">        n = nums.<span class="built_in">size</span>();</span><br><span class="line">        tag.<span class="built_in">resize</span>(n, <span class="literal">false</span>);</span><br><span class="line">        <span class="built_in">dfs</span>(nums);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (temp.<span class="built_in">size</span>() == n)</span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(temp);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!tag[i])</span><br><span class="line">            &#123;</span><br><span class="line">                temp.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">                tag[i] = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">dfs</span>(nums);</span><br><span class="line">                temp.<span class="built_in">pop_back</span>();<span class="comment">//递归完一个结果123之后清理temp和tag</span></span><br><span class="line">                tag[i] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>相似题可以看[组合总和 | 骆小黑 (<a href="http://luoxiaohei.co">luoxiaohei.co</a>)](<a href="https://blog.luoxiaohei.co/2022/11/27/">https://blog.luoxiaohei.co/2022/11/27/</a> 组合总和/)</p><h2 id="总结">总结</h2><p>加油！未来可期！</p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法、c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找总结</title>
      <link href="/posts/4e337501.html"/>
      <url>/posts/4e337501.html</url>
      
        <content type="html"><![CDATA[<h1>二分查找总结</h1><details class="folding-tag" pink><summary> 哔哔 </summary>              <div class='content'>              <p>​最近做了很多二分查找的算法题，这里来整理一下学到了什么。</p><p>​做到有关二分查找的题目</p><p>​- <a href="https://leetcode.cn/problems/search-in-rotated-sorted-array/">33. 搜索旋转排序数组</a></p><p>​- <a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/">34. 在排序数组中查找元素的第一个和最后一个位置</a></p><p>​- <a href="https://leetcode.cn/problems/combination-sum/">39. 组合总和</a></p>              </div>            </details><p>针对34题总结了一下二分查找的一些细节。</p><p>普通的二分查找很简单。有左闭右闭<strong>两种写法</strong>。</p><p>区别在于r=size（）还是=size（）-1  |  【left，right】【left，right）</p><p>r=size（）左闭右开：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">l=<span class="number">0</span>;</span><br><span class="line">r=size（）</span><br><span class="line"><span class="keyword">while</span>(left &lt;= right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> mid = (left+right)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(A[mid] == val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(A[mid] &gt; val)</span><br><span class="line">right = mid;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(A[mid] &lt; val)</span><br><span class="line">left = mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>r=size()-1左闭右闭：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">l=<span class="number">0</span>;</span><br><span class="line">r=size（）-<span class="number">1</span>；</span><br><span class="line">while(<span class="built_in">left</span> &lt;= <span class="built_in">right</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> <span class="built_in">mid</span> = (<span class="built_in">left</span>+<span class="built_in">right</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="built_in">if</span>(A[<span class="built_in">mid</span>] == val)</span><br><span class="line">            return <span class="built_in">mid</span>;</span><br><span class="line">else <span class="built_in">if</span>(A[<span class="built_in">mid</span>] &gt; val)</span><br><span class="line"><span class="built_in">right</span> = <span class="built_in">mid</span>-<span class="number">1</span>;</span><br><span class="line">else <span class="built_in">if</span>(A[<span class="built_in">mid</span>] &lt; val)</span><br><span class="line"><span class="built_in">left</span> = <span class="built_in">mid</span>+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="更细节的操作：">更细节的操作：</h2><p>若数组中有很多个target，如何找到第一个和最后一个呢？</p><p>普通的二分就很随机了，会随机给你返回一个target。</p><p>所以我们做出如下更改：把a[mid] == target 和 a[mid] &gt; target 合并。就可以找到第一个，从a[mid] &gt; target 就能知道，我们在往左移。</p><p>同理 ：把a[mid] == target 和 a[mid] &lt; target 合并。就可以找到最后一个，从a[mid] &lt; target 就能知道，我们在往右移。</p><h2 id="找到-target的第一个数">找到=target的第一个数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找到=target的第一个数</span></span><br><span class="line"><span class="comment">//左闭右开</span></span><br><span class="line">    <span class="type">int</span> lside;</span><br><span class="line"><span class="type">int</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> r = nums.<span class="built_in">size</span>();<span class="comment">//左闭右开</span></span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[mid] &gt;= target)</span><br><span class="line">        &#123;</span><br><span class="line">            r = mid;</span><br><span class="line">            lside = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找到=target的第一个数</span></span><br><span class="line"><span class="comment">//左闭右闭</span></span><br><span class="line"><span class="type">int</span> lside;</span><br><span class="line">      <span class="type">int</span> l = <span class="number">0</span>;</span><br><span class="line">      <span class="type">int</span> r = nums.<span class="built_in">size</span>()<span class="number">-1</span>;<span class="comment">//左闭右闭</span></span><br><span class="line">      <span class="type">int</span> mid;</span><br><span class="line">      <span class="keyword">while</span> (l&lt;=r)<span class="comment">//左闭右闭</span></span><br><span class="line">      &#123;</span><br><span class="line">          mid = (l+r)&gt;&gt;<span class="number">1</span>; <span class="comment">//，默认的除法是整数除法向下取整</span></span><br><span class="line">          <span class="keyword">if</span>(nums[mid]&gt;=target) </span><br><span class="line">          &#123; </span><br><span class="line">              r = mid<span class="number">-1</span>;</span><br><span class="line">              lside=mid;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">              l = mid+<span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="找到-target的最后一个数">找到=target的最后一个数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//找到=target的最后一个数</span></span><br><span class="line">   <span class="comment">//左闭右闭</span></span><br><span class="line">   <span class="type">int</span> l = <span class="number">0</span>;</span><br><span class="line">   <span class="type">int</span> r = nums.<span class="built_in">size</span>()<span class="number">-1</span>;<span class="comment">//左闭右闭</span></span><br><span class="line"><span class="type">int</span> lside;</span><br><span class="line">   <span class="keyword">while</span> (l &lt;= r) </span><br><span class="line">   &#123;</span><br><span class="line">       mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">if</span> (a[mid] &lt;= target)</span><br><span class="line">       &#123;</span><br><span class="line">           l = mid+<span class="number">1</span>;  </span><br><span class="line">           lside = mid;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           r = mid - <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找到=target的最后一个数</span></span><br><span class="line"><span class="comment">//左闭右开</span></span><br><span class="line"><span class="type">int</span> l = <span class="number">0</span>;</span><br><span class="line">      <span class="type">int</span> r = nums.<span class="built_in">size</span>();<span class="comment">//左闭右开</span></span><br><span class="line">      <span class="type">int</span> mid;</span><br><span class="line">      <span class="type">int</span> lside;</span><br><span class="line">      <span class="keyword">while</span> (l &lt; r)  <span class="comment">//左闭右开</span></span><br><span class="line">      &#123;</span><br><span class="line">          mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">if</span> (nums[mid] &lt;= target)</span><br><span class="line">          &#123;</span><br><span class="line">              l = mid+<span class="number">1</span>;  <span class="comment">// 找到大于第一个大于target的数减1 即可</span></span><br><span class="line">              lside = mid;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">              r = mid;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> lside;</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/20230404142438.png" alt="总结"></p><p>好啦，我要去打怪兽了，掰掰</p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法、c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组合总和</title>
      <link href="/posts/839c1c3a.html"/>
      <url>/posts/839c1c3a.html</url>
      
        <content type="html"><![CDATA[<h4 id="39-组合总和"><a href="https://leetcode.cn/problems/combination-sum/">39. 组合总和</a></h4><h2 id="题目描述">题目描述</h2><p>给你一个 <strong>无重复元素</strong> 的整数数组 candidates 和一个目标整数 target ，找出 candidates 中可以使数字和为目标数 target 的 所有 <strong>不同组合</strong> ，并以列表形式返回。你可以按 <strong>任意顺序</strong> 返回这些组合。</p><p>candidates 中的 <strong>同一个</strong> 数字可以 <strong>无限制重复被选取</strong> 。如果至少一个数字的被选数量不同，则两种组合是不同的。</p><p>对于给定的输入，保证和为 target 的不同组合数少于 150 个。</p><p><strong>示例 1：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：candidates = [2,3,6,7], target = 7</span><br><span class="line">输出：[[2,2,3],[7]]</span><br><span class="line">解释：</span><br><span class="line">2 和<span class="number"> 3 </span>可以形成一组候选，2 +<span class="number"> 2 </span>+<span class="number"> 3 </span>=<span class="number"> 7 </span>。注意<span class="number"> 2 </span>可以使用多次。</span><br><span class="line">7 也是一个候选，<span class="number"> 7 </span>=<span class="number"> 7 </span>。</span><br><span class="line">仅有这两种组合。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: candidates = <span class="comment">[2,3,5]</span>, target = 8</span><br><span class="line">输出: <span class="comment">[<span class="comment">[2,2,2,2]</span>,<span class="comment">[2,3,3]</span>,<span class="comment">[3,5]</span>]</span></span><br></pre></td></tr></table></figure><h2 id="算法思路">算法思路</h2><p>这个题目和背包问题是一样的，采用的dfs的回溯算法。有张图就能很好理解了。</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202211272122380.png" alt=""></p><h2 id="代码实现">代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum</span>(vector&lt;<span class="type">int</span>&gt; &amp;candidates, <span class="type">int</span> target)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sort</span>(candidates.<span class="built_in">begin</span>(),candidates.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> r = candidates.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> rside;</span><br><span class="line">        <span class="comment">// 先二分查找小于等于target值的元素</span></span><br><span class="line">        <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (candidates[mid] == target)</span><br><span class="line">            &#123;</span><br><span class="line">                rside = mid;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (candidates[mid] &lt; target)</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">            rside = r;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; combine;</span><br><span class="line">        <span class="built_in">dfs</span>(candidates, target, combine, <span class="number">0</span>, rside);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;candidates, <span class="type">int</span> target, vector&lt;<span class="type">int</span>&gt; &amp;combine, <span class="type">int</span> idx,<span class="type">int</span> rside)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (idx == candidates.<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(idx &gt; rside)  <span class="comment">//剪枝，当idx&gt;target时，就不用继续执行了。</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(combine);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">dfs</span>(candidates, target, combine, idx + <span class="number">1</span>,rside);</span><br><span class="line">        <span class="keyword">if</span> (target - candidates[idx] &gt;= <span class="number">0</span>) <span class="comment">//剪枝 target是传参量</span></span><br><span class="line">        &#123; <span class="comment">// stop untifin dfs</span></span><br><span class="line">            combine.<span class="built_in">push_back</span>(candidates[idx]);</span><br><span class="line">            <span class="built_in">dfs</span>(candidates, target - candidates[idx], combine, idx,rside);</span><br><span class="line">            combine.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Solution a;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; b = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; c = a.<span class="built_in">combinationSum</span>(b, <span class="number">7</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;rowV : c)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;el : rowV)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; el &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>打印二维vector</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintVecofVec1</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; res)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; rowV : res) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; el : rowV) &#123;</span><br><span class="line">      cout &lt;&lt; el &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;; &quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sort采用的是什么排序？</p><p><strong>sort函数的底层用到的是内省式排序以及插入排序</strong>,内省排序首先从快速排序开始,当递归深度超过一定深度(深度为排序元素数量的对数值)后转为堆排序</p><p>回溯算法不剪枝就是暴力枚举，也可以理解为枚举没办法的办法。</p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法、c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索旋转排序数组</title>
      <link href="/posts/32377bdc.html"/>
      <url>/posts/32377bdc.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>整数数组 <strong>nums</strong> 按升序排列，数组中的值 互不相同 。</p><p>在传递给函数之前，nums 在预先未知的某个下标 k（0 &lt;= k &lt; nums.length）上进行了 <strong>旋转</strong>，使数组变为 <strong>[nums[k], nums[k+1], …, nums[n-1], nums[0], nums[1], …, nums[k-1]]</strong>（下标 <strong>从 0 开始</strong> 计数）。例如， [0,1,2,4,5,6,7] 在下标 3 处经旋转后可能变为 [4,5,6,7,0,1,2] 。</p><p>给你 <strong>旋转后</strong> 的数组 <code>nums</code> 和一个整数 <code>target</code> ，如果 <code>nums</code> 中存在这个目标值 <code>target</code> ，则返回它的下标，否则返回 <code>-1</code> 。</p><p>你必须设计一个时间复杂度为 <code>O(log n)</code> 的算法解决此问题。</p><p><strong>示例 1：</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = <span class="string">[4,5,6,7,0,1,2]</span>, target = <span class="number">0</span></span><br><span class="line">输出：<span class="number">4</span></span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = <span class="string">[4,5,6,7,0,1,2]</span>, target = <span class="number">3</span></span><br><span class="line">输出：-<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="思路">思路</h2><details class="folding-tag" pink><summary> 哔哔 </summary>              <div class='content'>              <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">将数组一分为二，其中一定有一个是有序的，另一个可能是有序，也能是部分有序。</span></span><br><span class="line"><span class="string">此时有序部分用二分法查找。无序部分再一分为二，其中一个一定有序，另一个可能有序，可能无序。就这样循环.</span> </span><br></pre></td></tr></table></figure><p>like this</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202211251152114.png" alt="img"></p>              </div>            </details><h2 id="代码">代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;nums,<span class="type">int</span> target)</span></span>&#123;  <span class="comment">//二分查找升级版</span></span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> r = nums.<span class="built_in">size</span>()<span class="number">-1</span>; <span class="comment">// </span></span><br><span class="line">        <span class="type">int</span> mid;</span><br><span class="line">        <span class="keyword">while</span> (l&lt;=r) <span class="comment">// 有=</span></span><br><span class="line">        &#123;</span><br><span class="line">            mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(target == nums[mid])</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">if</span>(nums[<span class="number">0</span>]&gt;nums[mid])</span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">if</span>(target &gt; nums[mid] &amp;&amp; target &lt;= nums[r])</span><br><span class="line">                    l = mid+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    r = mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(target &lt; nums[mid] &amp;&amp; target &gt;= nums[<span class="number">0</span>])</span><br><span class="line">                    r = mid<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    l = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Solution a;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; b = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">    cout&lt;&lt;a.<span class="built_in">search</span>(b,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：二分查找，快排之类的都是很重要的</p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法、c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长有效括号</title>
      <link href="/posts/6394e680.html"/>
      <url>/posts/6394e680.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述：">题目描述：</h2><p>给你一个只包含 <code>'('</code> 和 <code>')'</code> 的字符串，找出最长有效（格式正确且连续）括号子串的长度。</p><h2 id="实例">实例</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s <span class="operator">=</span> <span class="string">&quot;(()&quot;</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：最长有效括号子串是 <span class="string">&quot;()&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s <span class="operator">=</span> <span class="string">&quot;)()())&quot;</span></span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：最长有效括号子串是 <span class="string">&quot;()()&quot;</span></span><br></pre></td></tr></table></figure><h2 id="思路">思路</h2><p>首先会想到堆栈的符号匹配之类的算法，奈何不记得怎么写了。首先，我们试着用动态规划的思路来写，我们发现，给定一个动态规划的数组dp[]，dp中记录以每个符号结尾的最大有效数，可知以（结尾的为0，以）结尾的要分两种情况讨论即可。</p><p>1、（）型</p><p>这种情况只需要dp[i]=dp[i-2]+2即可</p><p>2、））型</p><p>这种情况需要判断一下</p><p><em>如果dp[i-dp[i-1]-1]=（且dp[i-dp[i-1]-2=（，则dp[i] = dp[i-1]+2</em></p><p><em>如果dp[i-dp[i-1]-1]=（且dp[i-dp[i-1]-2=），则dp[i] = dp[i-1]+dp[i-dp[i-1]-2]+2。</em></p><p>这样我们也能发现，上面斜线部分有冗余部分，实则是：</p><p>如果dp[i-dp[i-1]-1]=（，则dp[i] = dp[i-1]+dp[i-dp[i-1]-2]+2。</p><p><strong>最后就是注意数组不要越界</strong>。</p><h2 id="代码实现">代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestValidParentheses</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> length = <span class="number">0</span> , n = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">&#x27;)&#x27;</span>&amp;&amp;s[i<span class="number">-1</span>] == <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                dp[i] = ( i&gt;=<span class="number">2</span> ? dp[i<span class="number">-2</span>] : <span class="number">0</span>) + <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">&#x27;)&#x27;</span> &amp;&amp; s[i<span class="number">-1</span>] == <span class="string">&#x27;)&#x27;</span>&amp;&amp;i - dp[i - <span class="number">1</span>] &gt; <span class="number">0</span> &amp;&amp; s[i - dp[i - <span class="number">1</span>] - <span class="number">1</span>] == <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                dp[i] = dp[i<span class="number">-1</span>] + ( (i-dp[i<span class="number">-1</span>]) &gt;= <span class="number">2</span> ? dp[i - dp[i<span class="number">-1</span>] - <span class="number">2</span>] : <span class="number">0</span>) + <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            length = <span class="built_in">max</span>(length,dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="补充">补充</h2><h2 id="堆实现符号匹配">堆实现符号匹配</h2><details class="folding-tag" pink><summary> 哔哔 </summary>              <div class='content'>              <p>我记得是在编译原理这门课上，学习了编程实现加减乘除的算数表达式文法的正确性。找到实验代码，感叹之前学习的东西真的忘得太快啦。</p><p>如果想要快速捡起来，还是得做好收集工作啊！</p><p>展示：</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202211251107751.png" alt="image-20221125110714653"></p>              </div>            </details><h2 id="代码">代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">longestValidParentheses</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> maxlen = <span class="number">0</span>;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; a;</span><br><span class="line">        a.<span class="built_in">push</span>(<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">                a.<span class="built_in">push</span>(i);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                a.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(a.<span class="built_in">empty</span>())</span><br><span class="line">                    a.<span class="built_in">push</span>(i);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    maxlen = <span class="built_in">max</span>(maxlen,i - a.<span class="built_in">top</span>());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxlen;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="C-STL-map">C++ STL map</h2><p><strong>map内部数据的组织，map内部自建一颗红黑树(一 种非严格意义上的平衡二叉树)，这颗树具有对数据****自动排序</strong>的功能，所以在map内部所有的数据都是有序的，后边我们会见识到有序的好处。</p><p><strong>map的特点是增加和删除节点对迭代器的影响很小，除了那个操作节点，对其他的节点都没有什么影响。</strong></p><p>**对于迭代器来说，**可以修改实值，而不能修改key</p><p><strong>C++的标准库关联容器map是不允许有key</strong>相同的键值对存在的。</p><h2 id="总结：">总结：</h2><p><strong>map和vector差不多，map有自动排序的功能和定义key元素类型的特性</strong></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法、c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法作业：来回拉人</title>
      <link href="/posts/6874f256.html"/>
      <url>/posts/6874f256.html</url>
      
        <content type="html"><![CDATA[<h1>题目描述</h1><p>人和摩托最快达到目的地题目描述：有n个人和一辆摩托车，摩托车可坐2个人（包括驾驶人），他们要到离他们距离D的目的地，可以利用摩托车来回运人，每个人都会开摩托车，人的速度为v1，摩托车的速度为v2，求他们最快达到目的地的时间。</p><p>输入格式：每行4个整数(n，v1，v2，D)，整数之间有一个空格，速度单位是千米每小时，距离的单位是千米，输入直至n=0数据范围：1&lt;=n&lt;=1000000, 1&lt;=v1,v2&lt;=1000000, 1000&lt;=D&lt;=1000000</p><p>输出格式：每行一个结果，精确到秒（不到1秒的小数舍去），3个整数分别代表小时、分、秒，整数之间有一个空格，最后一行也有回车</p><p>输入样例：</p><p>1 2 4 21</p><p>2 1 7 20</p><p>0</p><p>输出样例：</p><p>5 15 0</p><p>2 51 25</p><h2 id="解题思路">解题思路</h2><p>二分法：车的速度比人快，那么多长的时间就是总路程/人的速度，利用二分法，找到一个合适的时间，使得在这个时间内，车和人相遇n-2次，如果大于n-2次那么这个时间长了，需要减小时间，反之增加时间。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (L &lt; R) <span class="comment">//until L==R//tow part find the really time</span></span><br><span class="line">&#123;</span><br><span class="line">    ll mid = L + R &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">check</span>(mid + <span class="number">1</span>))</span><br><span class="line">        R = mid;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        L = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到遇见次数和时间之间的等式：</p><p>n=（(v2*t-D)*(v1+v2)*(D-v1*t))/(2*v2)</p><p>这个公式我没有推导出来，希望大佬可以交流交流。</p><h2 id="最后代码">最后代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//更现代</span></span><br><span class="line"><span class="comment">// using long long = ll;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span>;</span><br><span class="line"><span class="type">int</span> v1, v2;</span><br><span class="line">ll n, k, D;</span><br><span class="line"><span class="comment">//check this  time can finish all the people</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(ll t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (v2 * t &lt; D)</span><br><span class="line">        <span class="keyword">return</span> cnt &gt;= n;</span><br><span class="line">    cnt = ((v2 * t - D) * (<span class="built_in">static_cast</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(v1) + v2) * (D - v1 * t)) / (<span class="number">2</span>*v2) + <span class="number">2</span>;<span class="comment">//find out this time can cross how many people</span></span><br><span class="line">    <span class="keyword">return</span> cnt &gt;= n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        cin &gt;&gt; v1 &gt;&gt; v2 &gt;&gt; D;</span><br><span class="line"></span><br><span class="line">        D *= <span class="number">3600</span>;</span><br><span class="line"></span><br><span class="line">        ll L = <span class="number">0</span>, R = D / v1;<span class="comment">//R :the people road time</span></span><br><span class="line">        <span class="keyword">while</span> (L &lt; R) <span class="comment">//until L==R//tow part find the really time</span></span><br><span class="line">        &#123;</span><br><span class="line">            ll mid = L + R &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">check</span>(mid + <span class="number">1</span>))</span><br><span class="line">                R = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                L = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出时间</span></span><br><span class="line">        cout &lt;&lt; L / <span class="number">3600</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; L % <span class="number">3600</span> / <span class="number">60</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; L % <span class="number">60</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++、算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hot 23</title>
      <link href="/posts/c0b78844.html"/>
      <url>/posts/c0b78844.html</url>
      
        <content type="html"><![CDATA[<h4 id="23-合并K个升序链表"><a href="https://leetcode.cn/problems/merge-k-sorted-lists/">23. 合并K个升序链表</a></h4><p>给你一个链表数组，每个链表都已经按升序排列。</p><p>请你将所有链表合并到一个升序链表中，返回合并后的链表。</p><h2 id="示例">示例</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入：lists = [[<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">2</span>,<span class="number">6</span>]]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">解释：链表数组如下：</span><br><span class="line">[</span><br><span class="line">  <span class="number">1</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span>,</span><br><span class="line">  <span class="number">1</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>,</span><br><span class="line">  <span class="number">2</span>-&gt;<span class="number">6</span></span><br><span class="line">]</span><br><span class="line">将它们合并到一个有序链表中得到。</span><br><span class="line"><span class="number">1</span>-&gt;<span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span>-&gt;<span class="number">6</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>思路巨简单，难得一次都不用调试！！!循环直接搞定，什么分治大法我不懂！</p><p>用容量为K的最小堆优先队列，把链表的头结点都放进去，然后出队当前优先队列中最小的，挂上链表，，然后让出队的那个节点的下一个入队，再出队当前优先队列中最小的，直到优先队列为空</p><h2 id="代码实现">代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">comp</span> &#123;</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(ListNode* a, ListNode* b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a-&gt;val &gt; b-&gt;val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    priority_queue&lt;ListNode*, vector&lt;ListNode*&gt;, comp&gt; qu;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">nextPermutation</span><span class="params">(vector&lt;ListNode&gt;&amp; lists)</span></span>&#123;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">for</span> (ListNode  list : lists) <span class="comment">//只是加入链表头节点</span></span><br><span class="line">       &#123;</span><br><span class="line">            <span class="keyword">if</span>(list == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            qu.<span class="built_in">push</span>(list);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       ListNode head = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">       ListNode cur = head;</span><br><span class="line">       <span class="keyword">while</span> (!qu.<span class="built_in">empty</span>())</span><br><span class="line">       &#123;</span><br><span class="line">            ListNode nex = qu.<span class="built_in">pop</span>();</span><br><span class="line">            cur.next = nex;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            <span class="comment">//链表没到尾，队列加入尾随节点</span></span><br><span class="line">            <span class="keyword">if</span>(nex-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">                qu.<span class="built_in">push</span>(nex.next);</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>里面涉及优先队列的思想，第一次用到优先队列，很多都不清楚。还有就是判断指针是否指向空时的判断，比如qu.push(list);//list为nullptr不能进行插入操作。</p><p>priority_queue用法详情：<a href="https://blog.csdn.net/weixin_36888577/article/details/79937886">C++ priority_QUEUE</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++、算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活小妙招</title>
      <link href="/posts/29d0960.html"/>
      <url>/posts/29d0960.html</url>
      
        <content type="html"><![CDATA[<p>windows:</p><p>在终端输入一下命令即可批量重命名文件后缀。</p><p>ren :rename。* 所有无后缀文件修改为*.jpg</p><p>ren * *.jpg</p><hr><p>2、如果英文好，不用csdn，用stackoverflow</p><p>3、自定义短语，减轻我们平时打字负担</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202211281100320.png" alt="image-20221128110048237"></p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202211281101526.png" alt="image-20221128110115474"></p><p>4、github commit是提交到本地仓库</p><p>commit &amp; push是提交本地&amp;并推到本地</p><p>commit &amp; sync是提交本地&amp; 同步 — 同步是 什么意思？</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202211281201119.png" alt="image-20221128120102985"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>terminal 美化历程</title>
      <link href="/posts/83c20ea0.html"/>
      <url>/posts/83c20ea0.html</url>
      
        <content type="html"><![CDATA[<details class="folding-tag" green><summary> 前言 </summary>              <div class='content'>              <p>今天呢，看见我的好室友坤坤，弄了一晚上的终端美化，看上去颇有一点意思，所以呢，我就模仿了一下，不算抄袭哈。哈哈哈。<img src="https://raw.githubusercontent.com/jack8luo/picture/main/202211111135114.gif" alt=""></p><p>所以呢，今天我就来记录一下美化的步骤。</p><p>因为很多都不记得了。所以这算不上一篇合格的教程辣。<img src="https://raw.githubusercontent.com/jack8luo/picture/main/202211111137459.gif" alt=""></p>              </div>            </details><p>首先呢，我们在微软software store下载的terminal。是一个黑不溜秋的黑框，很影响我们发现美的眼睛。</p><p>对比一下我们就能看出来美化后的terminal对我们眼睛非常友好了：</p><table><thead><tr><th style="text-align:center"><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202211111416165.png" alt=""></th><th><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202211111112994.png" style="zoom:50%;" /></th></tr></thead></table><p>在software store下载terminal之后，就是安装我们的主题工具了——oh my posh，里面有很多主题：<a href="https://ohmyposh.dev/docs/themes">Themes | Oh My Posh</a></p><p>当然，官方文档都有了，这教程也是翻译翻译。官方文档：<a href="https://ohmyposh.dev/docs/installation/windows">Windows | Oh My Posh</a></p><h2 id="安装oh-my-posh">安装oh my posh</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">winget install JanDeDobbeleer.OhMyPosh <span class="literal">-s</span> winget</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 可能出现的问题 </summary>              <div class='content'>              <ul><li>如果提示无法识别winget，说明电脑系统中没有安装winget，先要去微软商店中搜索winget后下载<a href="https://mirclea.oss-cn-shenzhen.aliyuncs.com/image-20221109110230464.png"><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202211111132478.png" alt=""></a>即可</li><li>如果出现冲突无法下载 <code>oh-my-posh</code> ，安装提示给的oh-my-posh的ID使用命令 <code>winget install --id xxxxx</code> 下载</li><li>找到配置文件，powershell中输入 <code>$Profile</code> 可以查看windows的配置文件，利用 <code>code $Profile</code> 打开文件，并且添加如下的一段代码</li></ul>              </div>            </details><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">BASH</span></span><br><span class="line"><span class="attr">oh-my-posh</span> <span class="string">init pwsh --config $env:POSH_THEMES_PATH\montys.omp.json | Invoke-Expression</span></span><br><span class="line"><span class="attr">cls</span></span><br><span class="line"><span class="comment"># Shows navigable menu of all options when hitting Tab</span></span><br><span class="line"><span class="attr">Set-PSReadlineKeyHandler</span> <span class="string">-Key Tab -Function MenuComplete</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Autocompletion for arrow keys</span></span><br><span class="line"><span class="attr">Set-PSReadlineKeyHandler</span> <span class="string">-Key UpArrow -Function HistorySearchBackward</span></span><br><span class="line"><span class="attr">Set-PSReadlineKeyHandler</span> <span class="string">-Key DownArrow -Function HistorySearchForward</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># auto suggestions</span></span><br><span class="line"><span class="attr">Import-Module</span> <span class="string">PSReadLine</span></span><br><span class="line"><span class="attr">Set-PSReadLineOption</span> <span class="string">-PredictionSource History</span></span><br></pre></td></tr></table></figure><p>第一行为主题的设置，其中 <code>montys.omp.json</code>为主题配置文件，可以修改（可以通过上面的那个oh-my-posh的路径查看所有主题）</p><p>后面的几行都是针对于powershell的命令行提示提示补全的功能</p><blockquote><p>遇到的问题：</p><ul><li><code>$Profile</code>目录不存在，按照提示的路径新建即可，系统也会提示你新建这个文件</li><li>主题的图标出现乱码，使用Nerd字体，去网上下载Nerd字体，这里推荐 JetBrainsMono Nerd Font Mono 字体**（一定要注意，设置字体时，一定要将配置文件中的list级下的所有局部配置的字体删掉，否则字体无法生效）**</li></ul></blockquote><p>最后附上：<strong>[Nerd字体下载网站](<a href="https://mirclea.github.io/2022/11/09/windows-config/">https://mirclea.github.io/2022/11/09/windows-config/</a><a href="https://www.nerdfonts.com/font-downloads">Nerd Fonts - Iconic font aggregator, glyphs/icons collection, &amp; fonts patcher</a></strong></p><details class="folding-tag" green><summary> 结语 </summary>              <div class='content'>              <p>最后呢，最近想学习linux，但是不知道使用虚拟机学习还是服务器，亦或是双系统。最后我选择的是windows下的一个子系统ubuntu。如果有缘再更。</p>              </div>            </details>]]></content>
      
      
      
        <tags>
            
            <tag> terminal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT_TCP通信</title>
      <link href="/posts/c93d3dc1.html"/>
      <url>/posts/c93d3dc1.html</url>
      
        <content type="html"><![CDATA[<h1>QT_TCP通信过程</h1><p>之前我们在计网中，也就是这篇文章：</p><p>介绍了TCP套接字编程，客户端可以输入小写字符给服务器转成大写字符再送回。</p><p>今天，学习了一个QT的TCP通信的例子，关于QT-network方面的知识，记录一下。</p><h2 id="成果">成果</h2><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202210271329175.gif" alt="TCP"></p><p>先介绍一下TCP的连接过程</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202210271320243.png" alt="03_QtTCP通信过程"></p><h2 id="代码实现：">代码实现：</h2><h3 id="服务器端：">服务器端：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;serverwidget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_serverwidget.h&quot;</span></span></span><br><span class="line">ServerWidget::<span class="built_in">ServerWidget</span>(QWidget *parent) :</span><br><span class="line">    <span class="built_in">QWidget</span>(parent),</span><br><span class="line">    <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::ServerWidget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">    tcpServer = <span class="literal">NULL</span>;</span><br><span class="line">    tcpSocket = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    监听套接字,指定父对象</span></span><br><span class="line">    tcpServer = <span class="keyword">new</span> <span class="built_in">QTcpServer</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    tcpServer-&gt;<span class="built_in">listen</span>(QHostAddress::Any,<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setWindowTitle</span>(<span class="string">&quot;服务器端口8888&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有连接建立就会触发newconnection信号</span></span><br><span class="line">    <span class="built_in">connect</span>(tcpServer, QTcpServer::newConnection,[=]()&#123;</span><br><span class="line">        <span class="comment">//取出建立好链接的套接字</span></span><br><span class="line">        tcpSocket = tcpServer-&gt;<span class="built_in">nextPendingConnection</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取对方的ip和端口</span></span><br><span class="line">        QString ip = tcpSocket-&gt;<span class="built_in">peerAddress</span>().<span class="built_in">toString</span>();</span><br><span class="line">        qint16 port = tcpSocket-&gt;<span class="built_in">peerPort</span>();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        QString temp = <span class="built_in">QString</span>(<span class="string">&quot;[%1:%2]:成功链接&quot;</span>).<span class="built_in">arg</span>(ip).<span class="built_in">arg</span>(port);</span><br><span class="line">        <span class="comment">//将数据显示在textEditRead上面</span></span><br><span class="line">        ui-&gt;textEditRead-&gt;<span class="built_in">setText</span>(temp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//tcpSocket在创建后才能用</span></span><br><span class="line">        <span class="comment">//如果数据传送成功，对方的通信套接字会触发readyRead</span></span><br><span class="line">        <span class="built_in">connect</span>(tcpSocket,QTcpSocket::readyRead,[=]()&#123;</span><br><span class="line">            <span class="comment">//从通信套接字取出内容</span></span><br><span class="line">            QByteArray array = tcpSocket-&gt;<span class="built_in">readAll</span>();</span><br><span class="line">            ui-&gt;textEditRead-&gt;<span class="built_in">append</span>(array);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ServerWidget::~<span class="built_in">ServerWidget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ServerWidget::on_pushButtonSent_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tcpSocket == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="comment">//获取内容</span></span><br><span class="line">    QString str = ui-&gt;textEditWrite-&gt;<span class="built_in">toPlainText</span>();</span><br><span class="line">    <span class="comment">//给对方发送数据</span></span><br><span class="line">    tcpSocket-&gt;<span class="built_in">write</span>(str.<span class="built_in">toUtf8</span>().<span class="built_in">data</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ServerWidget::on_pushButtonClose_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tcpSocket == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="comment">//主动断开链接</span></span><br><span class="line">    tcpSocket-&gt;<span class="built_in">disconnectFromHost</span>();</span><br><span class="line">    tcpSocket-&gt;<span class="built_in">close</span>();</span><br><span class="line">    tcpSocket = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="客户端：">客户端：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;clientwidget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_clientwidget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QHostAddress&gt;</span></span></span><br><span class="line"></span><br><span class="line">ClientWidget::<span class="built_in">ClientWidget</span>(QWidget *parent) :</span><br><span class="line">    <span class="built_in">QWidget</span>(parent),</span><br><span class="line">    <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::ClientWidget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">    tcpsocket = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setWindowTitle</span>(<span class="string">&quot;客户端&quot;</span>);</span><br><span class="line"><span class="comment">//    初始化socket并指定父对象</span></span><br><span class="line">    tcpsocket = <span class="keyword">new</span> <span class="built_in">QTcpSocket</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">connect</span>(tcpsocket, QTcpSocket::connected,[=]()&#123;</span><br><span class="line">        ui-&gt;textBrowserRead-&gt;<span class="built_in">setText</span>(<span class="string">&quot;成功连接!&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">//如果数据传送成功，对方的通信套接字会触发readyRead</span></span><br><span class="line">    <span class="built_in">connect</span>(tcpsocket,QTcpSocket::readyRead,[=]()&#123;</span><br><span class="line">        <span class="comment">//获取对方发送的内容</span></span><br><span class="line">        QByteArray array = tcpsocket-&gt;<span class="built_in">readAll</span>();</span><br><span class="line">        <span class="comment">//放入编辑区</span></span><br><span class="line">        ui-&gt;textBrowserRead-&gt;<span class="built_in">append</span>(array);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ClientWidget::~<span class="built_in">ClientWidget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ClientWidget::on_pushButtonConnect_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tcpsocket == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//获取服务器IP和端口</span></span><br><span class="line">    QString ip = ui-&gt;lineEditIp-&gt;<span class="built_in">text</span>();</span><br><span class="line">    qint16 port = ui-&gt;lineEditPort-&gt;<span class="built_in">text</span>().<span class="built_in">toInt</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//主动和服务器链接</span></span><br><span class="line">    tcpsocket-&gt;<span class="built_in">connectToHost</span>(<span class="built_in">QHostAddress</span>(ip),port);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ClientWidget::on_close_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tcpsocket == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="comment">//主动断开与客户端链接</span></span><br><span class="line">    tcpsocket-&gt;<span class="built_in">disconnectFromHost</span>();</span><br><span class="line">    tcpsocket-&gt;<span class="built_in">close</span>();</span><br><span class="line">    tcpsocket == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ClientWidget::on_send_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tcpsocket == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="comment">//获取内容</span></span><br><span class="line">    QString str = ui-&gt;textBrowserWrite-&gt;<span class="built_in">toPlainText</span>();</span><br><span class="line">    <span class="comment">//发送数据</span></span><br><span class="line">    tcpsocket-&gt;<span class="built_in">write</span>(str.<span class="built_in">toUtf8</span>().<span class="built_in">data</span>());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>当然还有ui的设计，这里不做解释。如果你想复现,</p><p>还是找我要源码吧http://wpa.qq.com/msgrd?v=3&amp;uin=768213856&amp;site=qq&amp;menu=yes</p>]]></content>
      
      
      <categories>
          
          <category> QT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT小游戏</title>
      <link href="/posts/a42081a0.html"/>
      <url>/posts/a42081a0.html</url>
      
        <content type="html"><![CDATA[<h2 id="QT翻金币小游戏">QT翻金币小游戏</h2><p>之前自己学习过QT，看黑马的课程按着教程码了一遍翻金币这个项目，学习笔记和源码已经上传的github了，需要自取</p><p><a href="https://github.com/jack8luo/QT_Study_SmallGame">项目地址</a></p>]]></content>
      
      
      <categories>
          
          <category> QT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++、QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP套接字编程</title>
      <link href="/posts/f2006842.html"/>
      <url>/posts/f2006842.html</url>
      
        <content type="html"><![CDATA[<h1>TCP套接字编程</h1><p>先介绍两个主要的结构体。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">IP地址和port捆绑关系的数据结构（标示进程的端节点）：作用是存放本地应用进程ip和端口</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> &#123;</span><br><span class="line"><span class="type">short</span> sin_family; <span class="comment">//AF_INET  地址</span></span><br><span class="line">u_short sin_port; <span class="comment">// port端口</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">in_addr</span> sin_addr ; ip地址</span><br><span class="line"><span class="comment">// IP address, unsigned long</span></span><br><span class="line"><span class="type">char</span> sin_zero[<span class="number">8</span>]; <span class="comment">// align 对齐</span></span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">数据结构 hostent</span><br><span class="line">域名和IP地址的数据结构：作为域名解析的一个函数调用。</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">hostent</span></span><br><span class="line">&#123; <span class="type">char</span> *h_name;  主机域名</span><br><span class="line"><span class="type">char</span> **h_aliases;  域名别名</span><br><span class="line"><span class="type">int</span> h_addrtype; </span><br><span class="line"><span class="type">int</span> h_length; <span class="comment">/*地址长度*/</span> </span><br><span class="line"><span class="type">char</span> **h_addr_list;  ip地址</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> h_addr h_addr_list[0];</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>再介绍socket API里面的几个函数：</p><p>主要的用到的 Socket API 函数和方法有下面这些：</p><ul><li><p><code>socket()</code></p></li><li><p><code>bind()</code></p></li><li><p><code>listen()</code></p></li><li><p><code>accept()</code></p></li><li><p><code>connect()</code></p></li><li><p><code>connect_ex()</code></p></li><li><p><code>send()</code></p></li><li><p><code>recv()</code></p></li><li><p><code>close()</code></p><p>更详细的API说明请看官方文档：<a href="https://docs.python.org/3/library/socket.html#module-socket">socket — Low-level networking interface — Python 3.10.7 documentation</a></p></li></ul><p>TCP运行过程：</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202210071711591.png" alt="TCP.drawio"></p><p><a href="http://server.py">server.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">serverPort = <span class="number">12000</span></span><br><span class="line">serverSocket = socket(AF_INET, SOCK_STREAM)  <span class="comment"># 创建TCP欢迎套接字，使用IPv4协议</span></span><br><span class="line">serverSocket.bind((<span class="string">&#x27;&#x27;</span>, serverPort))  <span class="comment"># 将TCP欢迎套接字绑定到指定端口</span></span><br><span class="line">serverSocket.listen(<span class="number">1</span>)  <span class="comment"># 最大连接数为1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The server in ready to receive&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    connectionSocket, addr = serverSocket.accept()  <span class="comment"># 接收到客户连接请求后，建立新的TCP连接套接字</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Accept new connection from %s:%s...&#x27;</span> % addr)</span><br><span class="line">    sentence = connectionSocket.recv(<span class="number">1024</span>)  <span class="comment"># 获取客户发送的字符串</span></span><br><span class="line">    capitalizedSentence = sentence.upper()  <span class="comment"># 将字符串改为大写</span></span><br><span class="line">    connectionSocket.send(capitalizedSentence)  <span class="comment"># 向用户发送修改后的字符串</span></span><br><span class="line">    connectionSocket.close()  <span class="comment"># 关闭TCP连接套接字</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="http://Client.py">Client.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *  <span class="comment"># 导入socket这个模块API</span></span><br><span class="line"></span><br><span class="line">serverName = <span class="string">&#x27;192.168.70.1&#x27;</span>  <span class="comment"># 指定服务器地址</span></span><br><span class="line">serverPort = <span class="number">12000</span>  <span class="comment"># 指定服务器的端口</span></span><br><span class="line">clientSocket = socket(AF_INET, SOCK_STREAM)  <span class="comment"># 建立TCP套接字，使用IPv4协议 | 返回一个TCP的socket，是一个整数 | 操作系统会给你绑定，绑定什么呢？让你客户端的IP地址、端口号与创建的TCP socket捆绑在一起</span></span><br><span class="line">clientSocket.connect((serverName, serverPort))  <span class="comment"># 向服务器发起连接</span></span><br><span class="line"></span><br><span class="line">sentence = <span class="built_in">input</span>(<span class="string">&#x27;Input lowercase sentence:&#x27;</span>).encode()  <span class="comment"># 用户输入信息，并编码为bytes以便发送</span></span><br><span class="line">clientSocket.send(sentence)  <span class="comment"># 将信息发送到服务器</span></span><br><span class="line">modifiedSentence = clientSocket.recvfrom(<span class="number">1024</span>)  <span class="comment"># 从服务器接收信息</span></span><br><span class="line"><span class="built_in">print</span>(modifiedSentence[<span class="number">0</span>].decode())  <span class="comment"># 显示信息</span></span><br><span class="line">clientSocket.close()  <span class="comment"># 关闭套接字</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从0到1发sci</title>
      <link href="/posts/ae91166f.html"/>
      <url>/posts/ae91166f.html</url>
      
        <content type="html"><![CDATA[<h1>SCI是什么</h1><p>SCI全称：science citation index中文名：科学论文索引。是一个可以检索文献的数据库。</p><p>期刊：cell、nature</p><p>影响因子：期刊品牌前两年期刊售出数量/  总生产数量。</p><p>美国科学情报所ISI对期刊品牌每两周进行一次评估（比如影响因子）</p><p>我们所说的发SCI指的就是发了某个期刊，然后被某个数据库收录（比如sci）</p><hr><p>这些数据库都有他的特点和优势。对于科研人员的我，应该了解每个数据库的特点，检索到全面并且正确的文献信息。</p><h1>文献检索的三个要点：</h1><ol><li>数据库的选择<br>a)确定所在学科的数据库<br>b)中文论文数据库有知网，万方和维普，知网可以绝大部分中文论文<br>c)英文论文和中文论文最大区别：英文论文没有像知网一样一统天下的数据库，由各大不同数据库分散收录<br>d)确定自己学科有哪些数据库:<br>问老师，研究生学长学姐，图书馆学科服务部门人员<br>e)学校图书馆网站<br>f)跨学科，单一学科和学科方向数据库：如Web of science，各学科ssci论文<br>g)数据库贵，学校的数据库采购实力影响检索途径<br>h)几个免费的检索渠道：SSRN，X-MOL学术平台（中国人做的外文文献检索平台），Google,Bing等搜索引擎（检索外文文献的准确性更高，特别是已经知道文献名称时）</li><li>检索词的确定<br>a)检索词要规范正确：用一个词在数据库里搜索，看看搜出来的大部分结果的表述和用词是否一致<br>b)检索词要尽可能全面，不能只用一个关键词检索，把同义词，近义词，上下位概念都去检索，确保文献的完整性，扎实的基础知识和对前沿问题的了解能够帮助准确，全面地检索关键词</li><li>多轮检索的过程<br>一轮检索后，在文献阅读的过程中，要注意：<br>a)这些文献所引用的文献，可以按图索骥补充<br>b)发现文献所提出的有价值的新问题，补充新的关键词去检索</li></ol><hr><h1>从0-1发sci</h1><h2 id="1、明白自己想要发的期刊品牌">1、明白自己想要发的期刊品牌</h2><p>了解中期刊的难度，选择合适自己的。途径：1、IF差与投：输入水刊，出现容易投的水刊。2、问学长学姐3、上小木虫、letpub网站，看论坛。</p><h2 id="2、定好题目">2、定好题目</h2><p>1、如果是为了最快投中，那么就要追热点话题。</p><p>2、在自己论文那方面看50篇论文， 了解行情，衍生出自己的idea，清楚自己应该去怎么改，哪些是别人还没做过的东西。</p><p>50篇不多。不用每篇都细读啊，只需要看介绍introduction和总结，清楚这篇论文在讲什么，中间证明、原理之类的东西没必要看，很浪费时间。</p><p>3、开始写论文，论文的模板在期刊的官网上可以找到。按照这个格式去写。版面费1k-2k。</p><p>4、sci是分区的。1区到4区，论文长度把握好，4区短一些，1区长一些。</p><p>5、英语能力不好的，先用中文写，然后翻译，最后润色。</p><p>6、注意作者名次，第一作者认可度比第二作者高一倍。</p><p>7、投稿是很复杂的，上传很多相关文件，注意期刊投稿相对<strong>领域</strong>。</p><p>8、cover letter就是给编辑人的一封信，整体内容就是告诉编辑人一定要把我这边论文投出去</p><p>9、第一次投稿之后到收到第一条修改意见之间有1-2个月的时间。小修是1个月之内，大修是3个月左右。第二次要重新写cover letter。按经验会修两轮。两轮之后就会接收。</p><p>10、接收之后，编辑人会发你proof的文稿，让你确定是否还有要修改的东西。再发给你相应的版面费。</p><p>11、找审稿人：引用了谁的文章，就选谁作为审稿人。</p><p>12、确认期刊的收稿率、投稿周期，不要太长的时间。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 外挂标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>butterfly全局字体</title>
      <link href="/posts/a30c21f0.html"/>
      <url>/posts/a30c21f0.html</url>
      
        <content type="html"><![CDATA[<h1>butterfly全局字体</h1><p>1、新建custom.css</p><p>2、去<a href="https://www.diyiziti.com/Download/330">圆润字体下载-第一字体网 (diyiziti.com)</a>下载一款喜欢的字体。</p><p>3、css中设置字体格式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span>&#123;</span><br><span class="line">  <span class="attribute">font-family</span>:<span class="string">&#x27;qinfeng&#x27;</span> ;  <span class="comment">/* 字体名自定义即可 */</span></span><br><span class="line">  <span class="attribute">src</span>:<span class="built_in">url</span>(<span class="string">&#x27;/font/nainao.ttf&#x27;</span>); <span class="comment">/* 字体文件路径 */</span></span><br><span class="line">  <span class="attribute">font-display</span> : swap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-id">#site-title</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;qinfeng&#x27;</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h2</span><span class="selector-id">#site-title</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;qinfeng&#x27;</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h3</span><span class="selector-id">#site-title</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;qinfeng&#x27;</span>, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、hexo s查看效果</p>]]></content>
      
      
      <categories>
          
          <category> butterfly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文章加密</title>
      <link href="/posts/750422e1.html"/>
      <url>/posts/750422e1.html</url>
      
        <content type="html"><![CDATA[<p>今天看到了一个很有趣的Hexo插件，可以轻松实现文章加密功能😋。<br>下面是添加加密功能的操作：</p><h2 id="安装hexo-blog-encrypt插件">安装hexo-blog-encrypt插件</h2><ul><li>​在hexo目录下npm install hexo-blog-encrypt</li><li>​在/Hexo/_config.yml文件中添加内容:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">encrypt:</span><br><span class="line"><span class="built_in">enable</span>:<span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="使用插件">使用插件</h2><ul><li>在想要使用加密功能的Blog头部加上对应文字：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo加密功能</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019-09-04 23:20:00</span>   </span><br><span class="line"><span class="attr">tags:</span> [<span class="string">学习笔记</span>,<span class="string">Hexo</span>]</span><br><span class="line"><span class="attr">categories:</span> <span class="string">Hexo</span>      </span><br><span class="line"><span class="attr">password:</span> <span class="string">smile</span>   </span><br><span class="line"><span class="attr">abstract:</span> <span class="string">Welcome</span> <span class="string">to</span> <span class="string">my</span> <span class="string">blog,</span> <span class="string">enter</span> <span class="string">password</span> <span class="string">to</span> <span class="string">read.</span> </span><br><span class="line"><span class="attr">message:</span> <span class="string">密码输入框上描述性内容</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><ul><li>其中：<ul><li>password: 该Blog使用的密码</li><li>abstract: Blog摘要文字（少量）</li><li>message: 密码框上的描述性文字</li></ul></li></ul><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rat_zi"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rat"></use></svg><p>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一段话。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git上传项目到github</title>
      <link href="/posts/d2f744a7.html"/>
      <url>/posts/d2f744a7.html</url>
      
        <content type="html"><![CDATA[<h1>Git使用之如何将本地项目上传到github</h1><details class="folding-tag" green><summary> 哔哔 </summary>              <div class='content'>              <p>因为自己想远程下载操作自己电脑上的项目，怕电脑不在身边，就想出来了部署到github上面。好像还可以管理版本更新，很方便的样子。</p><hr><p>教程是借鉴<a href="https://cloud.tencent.com/developer/article/1504684">Git的使用(tencent.com)</a>这个，侵删。</p><p>选择了我认为最简单的第三种方法。</p>              </div>            </details><ul><li><p>第一步：Git客户端安装好</p></li><li><p>第二步：github注册好账号</p></li><li><p>第三步：本地电脑随便建立一个文件夹，如：github，进入此文件夹，在地址栏中输入cmd</p></li><li><p>第四步：回到之前的github界面，下面几个指令告诉你如何将代码上传</p></li></ul><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202209281506734.png" alt="img"></p><ul><li>第六步：在上面创建的github文件中，放入要上传的代码，然后按照上面的指令开始操作，执行指令<ul><li>1、git init      （建立本地仓库）</li><li>2、git add  *  (将代码添加到本地仓库，《*是添加全部代码，代码全部更新》)</li><li>3、git commit -m “first commit”  (提交到本地缓冲，《引号里说明提交了什么东西，说白了就是注释》）</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202209281507537.png" alt="img"></p><ul><li><p>4、git remote add origin <a href="https://github.com/hongduhong/test.git">https://github.com/hongduhong/test.git</a>   （将本地仓库的代码提交远程github的仓库，《后面的地址就是之前创建github的远程仓库地址》）</p></li><li><p>5、git push -u origin master    （将远程仓库的代码 push到master分支上）</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202209281507772.png" alt="img"></p></li><li><p>6、代码上传成功如下图所示：</p><p><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202209281507477.png" alt="img"></p></li></ul><hr><h1>end</h1><p>补充说明Git命令：</p><h2 id="前言">前言</h2><p>Git 是我们日常工作中使用频率极高的工具，各种指令让人眼花缭乱，今天，我们就在这里总结一下它的一些基本指令，算是做一份操作笔记吧。</p><h2 id="基本指令">基本指令</h2><h3 id="git-add">git add</h3><p>把要提交的文件的信息添加到暂存区中。当使用 git commit 时，将依据暂存区中的内容来进行文件的提交。</p><p>它通常将现有路径的当前内容作为一个整体添加，但是通过一些选项，它也可以用于添加内容，只对所应用的工作树文件进行一些更改，或删除工作树中不存在的路径了。</p><p>“索引”保存工作树内容的快照，并且将该快照作为下一个提交的内容。 因此，在对工作树进行任何更改之后，并且在运行 <code>git commit</code> 命令之前，必须使用 <code>git add</code> 命令将任何新的或修改的文件添加到索引。</p><p>该命令可以在提交之前多次执行。它只在运行 <code>git add</code> 命令时添加指定文件的内容; 如果希望随后的更改包含在下一个提交中，那么必须再次运行 <code>git add</code> 将新的内容添加到索引。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把指定的文件添加到暂存区中</span></span><br><span class="line">$ git add &lt;文件路径&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加所有修改、已删除的文件到暂存区中</span></span><br><span class="line">$ git add -u [&lt;文件路径&gt;]</span><br><span class="line">$ git add --update [&lt;文件路径&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加所有修改、已删除、新增的文件到暂存区中，省略 &lt;文件路径&gt; 即为当前目录</span></span><br><span class="line">$ git add -A [&lt;文件路径&gt;]</span><br><span class="line">$ git add --all [&lt;文件路径&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有修改、已删除但没有提交的文件，进入一个子命令系统</span></span><br><span class="line">$ git add -i [&lt;文件路径&gt;]</span><br><span class="line">$ git add --interactive [&lt;文件路径&gt;]</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="git-branch">git branch</h3><p>操作 Git 的分支命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出本地的所有分支，当前所在分支以 &quot;*&quot; 标出</span></span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出本地的所有分支并显示最后一次提交，当前所在分支以 &quot;*&quot; 标出</span></span><br><span class="line">$ git branch -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新分支，新的分支基于上一次提交建立</span></span><br><span class="line">$ git branch &lt;分支名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改分支名称</span></span><br><span class="line"><span class="comment"># 如果不指定原分支名称则为当前所在分支</span></span><br><span class="line">$ git branch -m [&lt;原分支名称&gt;] &lt;新的分支名称&gt;</span><br><span class="line"><span class="comment"># 强制修改分支名称</span></span><br><span class="line">$ git branch -M [&lt;原分支名称&gt;] &lt;新的分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定的本地分支</span></span><br><span class="line">$ git branch -d &lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制删除指定的本地分支</span></span><br><span class="line">$ git branch -D &lt;分支名称&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="git-checkout">git checkout</h3><p>更新工作树中的文件以匹配索引或指定树中的版本。如果没有给出路径 - <code>git checkout</code> 还会更新 <code>HEAD</code> ，将指定的分支设置为当前分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到已存在的指定分支</span></span><br><span class="line">$ git checkout &lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并切换到指定的分支，保留所有的提交记录</span></span><br><span class="line"><span class="comment"># 等同于 &quot;git branch&quot; 和 &quot;git checkout&quot; 两个命令合并</span></span><br><span class="line">$ git checkout -b &lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并切换到指定的分支，删除所有的提交记录</span></span><br><span class="line">$ git checkout --orphan &lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换掉本地的改动，新增的文件和已经添加到暂存区的内容不受影响</span></span><br><span class="line">$ git checkout &lt;文件路径&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><blockquote><p><code>git checkout</code> 是 git 最常用的命令之一，同时也是一个很危险的命令，因为这条命令会重写工作区。</p></blockquote><h3 id="git-clone">git clone</h3><p>将存储库克隆到新创建的目录中，为克隆的存储库中的每个分支创建远程跟踪分支(使用 <code>git branch -r</code> 可见)，并从克隆检出的存储库作为当前活动分支的初始分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认在当前目录下创建和版本库名相同的文件夹并下载版本到该文件夹下</span></span><br><span class="line">$ git <span class="built_in">clone</span> &lt;远程仓库的网址&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定本地仓库的目录</span></span><br><span class="line">$ git <span class="built_in">clone</span> &lt;远程仓库的网址&gt; &lt;本地目录&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># -b 指定要克隆的分支，默认是master分支</span></span><br><span class="line">$ git <span class="built_in">clone</span> &lt;远程仓库的网址&gt; -b &lt;分支名称&gt; &lt;本地目录&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="git-commit">git commit</h3><p>将索引的当前内容与描述更改的用户和日志消息一起存储在新的提交中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把暂存区中的文件提交到本地仓库，调用文本编辑器输入该次提交的描述信息</span></span><br><span class="line">$ git commit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把暂存区中的文件提交到本地仓库中并添加描述信息</span></span><br><span class="line">$ git commit -m <span class="string">&quot;&lt;提交的描述信息&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把所有修改、已删除的文件提交到本地仓库中</span></span><br><span class="line"><span class="comment"># 不包括未被版本库跟踪的文件，等同于先调用了 &quot;git add -u&quot;</span></span><br><span class="line">$ git commit -a -m <span class="string">&quot;&lt;提交的描述信息&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改上次提交的描述信息</span></span><br><span class="line">$ git commit --amend</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="git-config">git config</h3><p>主要是用来配置 Git 的相关参数，其主要操作有：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看配置信息</span></span><br><span class="line"><span class="comment"># --local：仓库级，--global：全局级，--system：系统级</span></span><br><span class="line">$ git config &lt;--<span class="built_in">local</span> | --global | --system&gt; -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前生效的配置信息</span></span><br><span class="line">$ git config -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line"><span class="comment"># --local：仓库级，--global：全局级，--system：系统级</span></span><br><span class="line">$ git config &lt;--<span class="built_in">local</span> | --global | --system&gt; -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加配置项</span></span><br><span class="line"><span class="comment"># --local：仓库级，--global：全局级，--system：系统级</span></span><br><span class="line">$ git config &lt;--<span class="built_in">local</span> | --global | --system&gt; --add &lt;name&gt; &lt;value&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取配置项</span></span><br><span class="line">$ git config &lt;--<span class="built_in">local</span> | --global | --system&gt; --get &lt;name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除配置项</span></span><br><span class="line">$ git config &lt;--<span class="built_in">local</span> | --global | --system&gt; --<span class="built_in">unset</span> &lt;name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置提交记录中的用户信息</span></span><br><span class="line">$ git config --global user.name &lt;用户名&gt;</span><br><span class="line">$ git config --global user.email &lt;邮箱地址&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改Git缓存区的大小</span></span><br><span class="line"><span class="comment"># 如果提交的内容较大，默认缓存较小，提交会失败</span></span><br><span class="line"><span class="comment"># 缓存大小单位：B，例如：524288000（500MB）</span></span><br><span class="line">$ git config --global http.postBuffer &lt;缓存大小&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用 git status/git diff 命令时以高亮或彩色方式显示改动状态</span></span><br><span class="line">$ git config --global color.ui <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置可以缓存密码，默认缓存时间15分钟</span></span><br><span class="line">$ git config --global credential.helper cache</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置密码的缓存时间</span></span><br><span class="line"><span class="comment"># 缓存时间单位：秒</span></span><br><span class="line">$ git config --global credential.helper <span class="string">&#x27;cache --timeout=&lt;缓存时间&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置长期存储密码</span></span><br><span class="line">$ git config --global credential.helper store</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><blockquote><p>Git 一共有3个配置文件：</p><ol><li>仓库级的配置文件：在仓库的 <code>.git/.gitconfig</code>，该配置文件只对所在的仓库有效。</li><li>全局配置文件：Mac 系统在 <code>~/.gitconfig</code>，Windows 系统在 <code>C:\Users\&lt;用户名&gt;\.gitconfig</code>。</li><li>系统级的配置文件：在 Git 的安装目录下（Mac 系统下安装目录在 <code>/usr/local/git</code>）的 <code>etc</code> 文件夹中的 <code>gitconfig</code>。</li></ol></blockquote><h3 id="git-diff">git diff</h3><p>用于显示提交和工作树等之间的更改。</p><p>此命令比较的是工作目录中当前文件和暂存区域快照之间的差异,也就是修改之后还没有暂存起来的变化内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比较当前文件和暂存区中文件的差异，显示没有暂存起来的更改</span></span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较暂存区中的文件和上次提交时的差异</span></span><br><span class="line">$ git diff --cached</span><br><span class="line">$ git diff --staged</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较当前文件和上次提交时的差异</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看从指定的版本之后改动的内容</span></span><br><span class="line">$ git diff &lt;commit ID&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较两个分支之间的差异</span></span><br><span class="line">$ git diff &lt;分支名称&gt; &lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看两个分支分开后各自的改动内容</span></span><br><span class="line">$ git diff &lt;分支名称&gt;...&lt;分支名称&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="git-fetch">git fetch</h3><p>从远程仓库获取最新的版本到本地的 tmp 分支上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将远程仓库所有分支的最新版本全部取回到本地</span></span><br><span class="line">$ git fetch &lt;远程仓库的别名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将远程仓库指定分支的最新版本取回到本地</span></span><br><span class="line">$ git fetch &lt;远程主机名&gt; &lt;分支名&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="git-init">git init</h3><p>初始化项目所在目录，初始化后会在当前目录下出现一个名为 .git 的目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化本地仓库，在当前目录下生成 .git 文件夹</span></span><br><span class="line">$ git init</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="git-log">git log</h3><p>显示提交的记录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印所有的提交记录</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印从第一次提交到指定的提交的记录</span></span><br><span class="line">$ git <span class="built_in">log</span> &lt;commit ID&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印指定数量的最新提交的记录</span></span><br><span class="line">$ git <span class="built_in">log</span> -&lt;指定的数量&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="git-merge">git merge</h3><p>用于将两个或两个以上的开发历史加入(合并)一起。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把指定的分支合并到当前所在的分支下，并自动进行新的提交</span></span><br><span class="line">$ git merge &lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把指定的分支合并到当前所在的分支下，不进行新的提交</span></span><br><span class="line">$ git merge --no-commit &lt;分支名称&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="git-mv">git mv</h3><p>重命名文件或者文件夹。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重命名指定的文件或者文件夹</span></span><br><span class="line">$ git <span class="built_in">mv</span> &lt;源文件/文件夹&gt; &lt;目标文件/文件夹&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="git-pull">git pull</h3><p>从远程仓库获取最新版本并合并到本地。 首先会执行 <code>git fetch</code>，然后执行 <code>git merge</code>，把获取的分支的 HEAD 合并到当前分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从远程仓库获取最新版本。</span></span><br><span class="line">$ git pull</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="git-push">git push</h3><p>把本地仓库的提交推送到远程仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把本地仓库的分支推送到远程仓库的指定分支</span></span><br><span class="line">$ git push &lt;远程仓库的别名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定的远程仓库的分支</span></span><br><span class="line">$ git push &lt;远程仓库的别名&gt; :&lt;远程分支名&gt;</span><br><span class="line">$ git push &lt;远程仓库的别名&gt; --delete &lt;远程分支名&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="git-remote">git remote</h3><p>操作远程库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出已经存在的远程仓库</span></span><br><span class="line">$ git remote</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出远程仓库的详细信息，在别名后面列出URL地址</span></span><br><span class="line">$ git remote -v</span><br><span class="line">$ git remote --verbose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加远程仓库</span></span><br><span class="line">$ git remote add &lt;远程仓库的别名&gt; &lt;远程仓库的URL地址&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改远程仓库的别名</span></span><br><span class="line">$ git remote rename &lt;原远程仓库的别名&gt; &lt;新的别名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定名称的远程仓库</span></span><br><span class="line">$ git remote remove &lt;远程仓库的别名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改远程仓库的 URL 地址</span></span><br><span class="line">$ git remote set-url &lt;远程仓库的别名&gt; &lt;新的远程仓库URL地址&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="git-reset">git reset</h3><p>还原提交记录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重置暂存区，但文件不受影响</span></span><br><span class="line"><span class="comment"># 相当于将用 &quot;git add&quot; 命令更新到暂存区的内容撤出暂存区，可以指定文件</span></span><br><span class="line"><span class="comment"># 没有指定 commit ID 则默认为当前 HEAD</span></span><br><span class="line">$ git reset [&lt;文件路径&gt;]</span><br><span class="line">$ git reset --mixed [&lt;文件路径&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 HEAD 的指向改变，撤销到指定的提交记录，文件未修改</span></span><br><span class="line">$ git reset &lt;commit ID&gt;</span><br><span class="line">$ git reset --mixed &lt;commit ID&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 HEAD 的指向改变，撤销到指定的提交记录，文件未修改</span></span><br><span class="line"><span class="comment"># 相当于调用 &quot;git reset --mixed&quot; 命令后又做了一次 &quot;git add&quot;</span></span><br><span class="line">$ git reset --soft &lt;commit ID&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 HEAD 的指向改变，撤销到指定的提交记录，文件也修改了</span></span><br><span class="line">$ git reset --hard &lt;commit ID&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="git-revert">git revert</h3><p>生成一个新的提交来撤销某次提交，此次提交之前的所有提交都会被保留。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成一个新的提交来撤销某次提交</span></span><br><span class="line">$ git revert &lt;commit ID&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="git-rm">git rm</h3><p>删除文件或者文件夹。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 移除跟踪指定的文件，并从本地仓库的文件夹中删除</span></span><br><span class="line">$ git <span class="built_in">rm</span> &lt;文件路径&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除跟踪指定的文件夹，并从本地仓库的文件夹中删除</span></span><br><span class="line">$ git <span class="built_in">rm</span> -r &lt;文件夹路径&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除跟踪指定的文件，在本地仓库的文件夹中保留该文件</span></span><br><span class="line">$ git <span class="built_in">rm</span> --cached</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="git-status">git status</h3><p>用于显示工作目录和暂存区的状态。使用此命令能看到那些修改被暂存到了, 哪些没有, 哪些文件没有被 Git tracked 到。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看本地仓库的状态</span></span><br><span class="line">$ git status</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><blockquote><p><code>git status</code> 不显示已经 <code>commit</code> 到项目历史中去的信息。</p><p>看项目历史的信息要使用 <code>git log</code>。</p></blockquote><h3 id="git-tag">git tag</h3><p>操作标签的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印所有的标签</span></span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加轻量标签，指向提交对象的引用，可以指定之前的提交记录</span></span><br><span class="line">$ git tag &lt;标签名称&gt; [&lt;commit ID&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加带有描述信息的附注标签，可以指定之前的提交记录</span></span><br><span class="line">$ git tag -a &lt;标签名称&gt; -m &lt;标签描述信息&gt; [&lt;commit ID&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定的标签</span></span><br><span class="line">$ git checkout &lt;标签名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看标签的信息</span></span><br><span class="line">$ git show &lt;标签名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定的标签</span></span><br><span class="line">$ git tag -d &lt;标签名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将指定的标签提交到远程仓库</span></span><br><span class="line">$ git push &lt;远程仓库的别名&gt; &lt;标签名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将本地所有的标签全部提交到远程仓库</span></span><br><span class="line">$ git push &lt;远程仓库的别名&gt; –tags</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>外挂标签的使用</title>
      <link href="/posts/f301cdf2.html"/>
      <url>/posts/f301cdf2.html</url>
      
        <content type="html"><![CDATA[<p>前言：今天把博客部署到gitee上面了，详情看： 。</p><p>后面写这篇文章觉得样式太简单了，所以我找了一下外挂标签来提高我的B格。具体操作太多了。让我写肯定要累死了，所以备份到我的博客吧，以便我写博客的时候查找，在此感谢</p><p>[Hexo Butterfly 的标签外挂（一） | MaraPython (<a href="http://gitee.io">gitee.io</a>)</p><table><thead><tr><th style="text-align:center"><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202209171728217.jpeg" style="zoom: 25%;" /></th><th><img src="https://raw.githubusercontent.com/jack8luo/picture/main/202209171728217.jpeg" style="zoom: 25%;" /></th></tr></thead></table>]]></content>
      
      
      
        <tags>
            
            <tag> 外挂标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在菜单栏使用阿里彩色图标</title>
      <link href="/posts/8171faa2.html"/>
      <url>/posts/8171faa2.html</url>
      
        <content type="html"><![CDATA[<h1>在菜单栏使用阿里彩色图标</h1><h1>在文章中使用<code>symbol</code>写法来引入<code>iconfont</code>图标</h1><p>复制symbol的js链接，在butterfly中引入js链接。</p><p>在[Blogroot]\themes\butterfly\layout\includes\header\menu_item.pug,</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> theme.menu</span><br><span class="line">  <span class="comment">//- for mobile sidebar</span></span><br><span class="line">  - let sidebarChildHide = theme.hide_sidebar_menu_child ? <span class="string">&#x27;hide&#x27;</span> : <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">  .menus_items</span><br><span class="line">    each value, label in theme.menu</span><br><span class="line">      <span class="keyword">if</span> <span class="built_in">typeof</span> value !== <span class="string">&#x27;object&#x27;</span></span><br><span class="line">        .menus_item</span><br><span class="line">          a.site-page(href=url_for(<span class="built_in">trim</span>(value.<span class="built_in">split</span>(<span class="string">&#x27;||&#x27;</span>)[<span class="number">0</span>])))</span><br><span class="line">            <span class="keyword">if</span> value.<span class="built_in">split</span>(<span class="string">&#x27;||&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">              - <span class="keyword">var</span> icon_value = <span class="built_in">trim</span>(value.<span class="built_in">split</span>(<span class="string">&#x27;||&#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">              <span class="keyword">if</span> icon_value.substring(<span class="number">0</span>,<span class="number">2</span>)==<span class="string">&quot;fa&quot;</span>      </span><br><span class="line">                i.fa-fw(class=icon_value)</span><br><span class="line">              <span class="keyword">else</span> <span class="keyword">if</span> icon_value.substring(<span class="number">0</span>,<span class="number">4</span>)==<span class="string">&quot;icon&quot;</span>          </span><br><span class="line">                svg.icon(aria-hidden=<span class="string">&quot;true&quot;</span>)</span><br><span class="line">                  use(xlink:href=<span class="string">`#`</span>+ icon_value)</span><br><span class="line">            span=<span class="string">&#x27; &#x27;</span>+label</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        .menus_item</span><br><span class="line">          a.site-page(href=<span class="string">&#x27;javascript:void(0);&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> label.<span class="built_in">split</span>(<span class="string">&#x27;||&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">              - <span class="keyword">var</span> icon_label = <span class="built_in">trim</span>(label.<span class="built_in">split</span>(<span class="string">&#x27;||&#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">              <span class="keyword">if</span> icon_label.substring(<span class="number">0</span>,<span class="number">2</span>)==<span class="string">&quot;fa&quot;</span>      </span><br><span class="line">                i.fa-fw(class=icon_label)</span><br><span class="line">              <span class="keyword">else</span> <span class="keyword">if</span> icon_label.substring(<span class="number">0</span>,<span class="number">4</span>)==<span class="string">&quot;icon&quot;</span>    </span><br><span class="line">                svg.icon(aria-hidden=<span class="string">&quot;true&quot;</span>)</span><br><span class="line">                  use(xlink:href=<span class="string">`#`</span>+ icon_label)</span><br><span class="line">            span=<span class="string">&#x27; &#x27;</span>+ <span class="built_in">trim</span>(label.<span class="built_in">split</span>(<span class="string">&#x27;||&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">            i.fas.fa-chevron-down.expand(class=sidebarChildHide)</span><br><span class="line">          ul.menus_item_child</span><br><span class="line">            each val,lab in value</span><br><span class="line">              li</span><br><span class="line">                a.site-page.child(href=url_for(<span class="built_in">trim</span>(val.<span class="built_in">split</span>(<span class="string">&#x27;||&#x27;</span>)[<span class="number">0</span>])))</span><br><span class="line">                  <span class="keyword">if</span> val.<span class="built_in">split</span>(<span class="string">&#x27;||&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">                    - <span class="keyword">var</span> icon_val = <span class="built_in">trim</span>(val.<span class="built_in">split</span>(<span class="string">&#x27;||&#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">                    <span class="keyword">if</span> icon_val.substring(<span class="number">0</span>,<span class="number">2</span>)==<span class="string">&quot;fa&quot;</span>      </span><br><span class="line">                      i.fa-fw(class=icon_val)</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> icon_val.substring(<span class="number">0</span>,<span class="number">4</span>)==<span class="string">&quot;icon&quot;</span></span><br><span class="line">                      svg.icon(aria-hidden=<span class="string">&quot;true&quot;</span>)</span><br><span class="line">                        use(xlink:href=<span class="string">`#`</span>+ icon_val)</span><br><span class="line">                  span=<span class="string">&#x27; &#x27;</span>+ lab</span><br></pre></td></tr></table></figure><p>最后使用：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  主页: https:<span class="regexp">//</span>blog.akilar.top/ || fas fa-tasks</span><br><span class="line">  博客: / || icon-rat</span><br><span class="line">  生活 || icon-tiger :</span><br><span class="line">    相册: <span class="regexp">/gallery/</span> || fa fa-camera</span><br><span class="line">    追番: <span class="regexp">/bangumis/</span> || icon-snake</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法与外挂标签写法汇总</title>
      <link href="/posts/2013454d.html"/>
      <url>/posts/2013454d.html</url>
      
        <content type="html"><![CDATA[<h1>1.Markdown语法自带格式</h1><div class="note info flat"><p>参考：<a href="https://blog.csdn.net/u014061630/article/details/81359144">Markdown语法图文全面详解(10分钟学会)</a></p></div><div class="note warning flat"><p>注意：此页面偶尔会存在CSS冲突问题!</p></div><h2 id="1-1-代码块">1.1 代码块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\```shell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br><span class="line">\```</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-2-多级标题">1.2 多级标题</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># H1</span></span><br><span class="line"><span class="section">## H2</span></span><br><span class="line"><span class="section">### H3</span></span><br><span class="line"><span class="section">#### H4</span></span><br><span class="line"><span class="section">##### H5</span></span><br><span class="line"><span class="section">###### H6</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>见本文章标题!</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-3-文字样式">1.3 文字样式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线演示<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">文字<span class="strong">**加粗**</span>演示</span><br><span class="line"></span><br><span class="line">文字<span class="emphasis">*斜体*</span>演示</span><br><span class="line"></span><br><span class="line">文本<span class="code">`高亮`</span>演示</span><br><span class="line"></span><br><span class="line">文本~~删除~~线演示</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span> = <span class="string">5</span>&gt;</span></span>5号字<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span></span>黑体<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">blue</span>&gt;</span></span>蓝色<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">MistyRose</span>&gt;</span></span>这里的背景色是：MistyRosen，此处输入任意想输入的内容<span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p><u>下划线演示</u></p><p>文字<strong>加粗</strong>演示</p><p>文字<em>斜体</em>演示</p><p>文本<code>高亮</code>演示</p><p>文本<s>删除</s>线演示</p><p><font size = 5>5号字</font><br><font face="黑体">黑体</font><br><font color=blue>蓝色</font></p><table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note info flat"><p>上述要点可参考:<a href="https://blog.csdn.net/qq_43732429/article/details/108034518">【Markdown语法】字体颜色大小及文字底色设置</a></p></div><h2 id="1-4-引用">1.4 引用</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt;  Java</span></span><br><span class="line"><span class="quote">&gt; 二级引用演示</span></span><br><span class="line"><span class="quote">&gt; MySQL</span></span><br><span class="line"><span class="quote">&gt; &gt;外键</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;事务</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;<span class="strong">**行级锁**</span>(引用内部一样可以用格式)</span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt; ....</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><blockquote><p>Java<br>二级引用演示<br>MySQL</p><blockquote><p>外键</p><p>事务</p><p><strong>行级锁</strong>(引用内部一样可以用格式)</p></blockquote><p>…</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-5-分割线">1.5 分割线</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><hr><hr><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-6-列表-跟空格都可以">1.6 列表(*,+,-跟空格都可以)</h2><h3 id="1-6-1-无序列表">1.6.1 无序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> Java</span><br><span class="line"><span class="bullet">*</span> Python</span><br><span class="line"><span class="bullet">*</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> Java</span><br><span class="line"><span class="bullet">+</span> Python</span><br><span class="line"><span class="bullet">+</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Java</span><br><span class="line"><span class="bullet">-</span> Python</span><br><span class="line"><span class="bullet">-</span> ...</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="1-6-2-有序列表">1.6.2 有序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 注意后面有空格</span></span><br><span class="line"><span class="bullet">1.</span> </span><br><span class="line"><span class="bullet">2.</span> </span><br><span class="line"><span class="bullet">3.</span> </span><br><span class="line"><span class="bullet">4.</span> </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li></li><li></li><li></li><li></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-7-图片">1.7 图片</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 本地图片</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/assets/pusheencode.webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:50%;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="section"># 在线图片</span></span><br><span class="line">![<span class="string">code</span>](<span class="link">https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>本地图片:<br><img src="/assets/pusheencode.webp" alt="示例图片" style="zoom:50%;" /><br>在线图片:<br><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png" alt="code"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-8-表格">1.8 表格</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 项目标号 | 资金     | 备注 |</span><br><span class="line">| -------- | -------- | ---- |</span><br><span class="line">| 1        | 100，000 | 无   |</span><br><span class="line">| 2        | 200，000 | 无   |</span><br><span class="line">| 3        | 300,600  | 重要 |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th>项目标号</th><th>资金</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>100，000</td><td>无</td></tr><tr><td>2</td><td>200，000</td><td>无</td></tr><tr><td>3</td><td>300,600</td><td>重要</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-9-公式">1.9 公式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\Gamma(z)=\int<span class="emphasis">_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt.</span></span><br><span class="line"><span class="emphasis">$$</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>$$<br>\Gamma(z)=\int_0^\infty t^{z-1}e^{-t}dt.<br>$$</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1>2.Butterfly外挂标签</h1><div class="note info flat"><p>这部分参考安知鱼:<a href="https://anzhiy.cn/posts/7d58.html">基于Butterfly的外挂标签引入</a></p></div><h2 id="2-1-行内文本样式-text">2.1 行内文本样式 text</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-2-行内文本-span">2.2 行内文本 span</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-3-段落文本-p">2.3 段落文本 p</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% p center logo large, Volantis %&#125;</span><br><span class="line">&#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。</li></ul><p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-4-引用note">2.4 引用note</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">通用配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">语法格式</button></li><li class="tab"><button type="button" data-href="#分栏-3">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-4">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-5">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line">  style: simple</span><br><span class="line">  icons: false</span><br><span class="line">  border<span class="emphasis">_radius: 3</span></span><br><span class="line"><span class="emphasis">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line"><span class="emphasis">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line"><span class="emphasis">  light_</span>bg<span class="emphasis">_offset: 0</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 自带icon</span></span><br><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"><span class="section"># 外部icon</span></span><br><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.自带icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / primary / success / info / warning / danger ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】不显示 icon</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><p>2.外部icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / blue / pink / red / purple / orange / green ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success no-icon %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning no-icon %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger no-icon %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue no-icon %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-5"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div>2.`modern`样式<div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div><p>3.<code>flat</code>样式</p><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><p>4.<code>disabled</code>样式</p><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>2.<code>modern</code>样式</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>3.<code>flat</code>样式</p><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>4.<code>disabled</code>样式</p><div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon flat"><p>2021年快到了…</p></div><div class="note pink no-icon flat"><p>小心开车 安全至上</p></div><div class="note red no-icon flat"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon flat"><p>剪刀石头布</p></div><div class="note green no-icon flat"><p>前端最讨厌的浏览器</p></div>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-5-上标标签-tip">2.5 上标标签 tip</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li><li><code>自定义图标</code>: 支持fontawesome。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip %&#125;default&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip info %&#125;info&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="tip "><p>default</p></div><div class="tip info"><p>info</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-6-动态标签-anima">2.6 动态标签 anima</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><div class="note info flat"><ol><li>将所需的CSS类添加到图标（或DOM中的任何元素）。</li><li>对于父级悬停样式，需要给目标元素添加指定CSS类，同时还要给目标元素的父级元素添加CSS类<code>faa-parent animated-hover</code>。（详情见示例及示例源码）<br>You can regulate the speed of the animation by adding the CSS class or . faa-fastfaa-slow</li><li>可以通过给目标元素添加CSS类<code>faa-fast</code>或<code>faa-slow</code>来控制动画快慢。</li></ol></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.On DOM load（当页面加载时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>2.调整动画速度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated faa-fast %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated faa-slow %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>3.On hover（当鼠标悬停时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated-hover %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated-hover %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>4.On parent hover（当鼠标悬停在父级元素时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-horizontal&quot;</span>&gt;</span></span>warning<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-flash&quot;</span>&gt;</span></span>ban<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.On DOM load（当页面加载时显示动画）</p><div class="tip warning faa-horizontal animated"><p>warning</p></div><div class="tip ban faa-flash animated"><p>ban</p></div>2.调整动画速度<div class="tip warning faa-horizontal animated faa-fast"><p>warning</p></div><div class="tip ban faa-flash animated faa-slow"><p>ban</p></div>3.On hover（当鼠标悬停时显示动画）<div class="tip warning faa-horizontal animated-hover"><p>warning</p></div><div class="tip ban faa-flash animated-hover"><p>ban</p></div>4.On parent hover（当鼠标悬停在父级元素时显示动画）<div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">warning</p></div><div class="tip ban faa-parent animated-hover"><p class="faa-flash">ban</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-7-复选列表-checkbox">2.7 复选列表 checkbox</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: plus, minus, times</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-8-单选列表-radio">2.8 单选列表 radio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-9-时间轴-timeline">2.9 时间轴 timeline</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间线标题（可选）[,color] %&#125;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>title</code>:标题/时间线</li><li><code>color</code>:<code>timeline</code>颜色:default(留空) / blue / pink / red / purple / orange / green</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间轴样式,blue %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-07-24 [<span class="string">2.6.6 -&gt; 3.0</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 如果有 <span class="code">`hexo-lazyload-image`</span> 插件，需要删除并重新安装最新版本，设置 <span class="code">`lazyload.isSPA: true`</span>。</span><br><span class="line"><span class="bullet">2.</span> 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <span class="code">`use_cdn: true`</span> 则需要删除。</span><br><span class="line"><span class="bullet">3.</span> 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class="line"><span class="bullet">4.</span> 2.x 版本的置顶 <span class="code">`top: true`</span> 改为了 <span class="code">`pin: true`</span>，并且同样适用于 <span class="code">`layout: page`</span> 的页面。</span><br><span class="line"><span class="bullet">5.</span> 如果使用了 <span class="code">`hexo-offline`</span> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-05-15 [<span class="string">2.6.3 -&gt; 2.6.6</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6</span>) --&gt;</span><br><span class="line"></span><br><span class="line">不需要额外处理。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-04-20 [<span class="string">2.6.2 -&gt; 2.6.3</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 全局搜索 <span class="code">`seotitle`</span> 并替换为 <span class="code">`seo_title`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的索引规则有变，使用 group 组件的文章内，<span class="code">`group: group_name`</span> 对应的组件名必须是 <span class="code">`group_name`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的列表名优先显示文章的 <span class="code">`short_title`</span> 其次是 <span class="code">`title`</span>。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></div></div><div class='timeline-item-content'><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></div></div><div class='timeline-item-content'><p>不需要额外处理。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></div></div><div class='timeline-item-content'><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-10-链接卡片-link">2.10 链接卡片 link</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-11-按钮-btns">2.11 按钮 btns</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns 样式参数 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>圆角样式：rounded, circle</li><li>增加文字样式：可以在容器内增加 <code>&lt;b&gt;</code>标题<code>&lt;/b&gt;</code>和<code>&lt;p&gt;</code>描述文字<code>&lt;/p&gt;</code></li><li>布局方式：<br>默认为自动宽度，适合视野内只有一两个的情况。</li></ol><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>wide</td><td>宽一点的按钮</td></tr><tr><td>fill</td><td>填充布局，自动铺满至少一行，多了会换行</td></tr><tr><td>center</td><td>居中，按钮之间是固定间距</td></tr><tr><td>around</td><td>居中分散</td></tr><tr><td>grid2</td><td>等宽最多2列，屏幕变窄会适当减少列数</td></tr><tr><td>grid3</td><td>等宽最多3列，屏幕变窄会适当减少列数</td></tr><tr><td>grid4</td><td>等宽最多4列，屏幕变窄会适当减少列数</td></tr><tr><td>grid5</td><td>等宽最多5列，屏幕变窄会适当减少列数</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>2.或者含有图标的按钮</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell 下载源码, /, fas fa-download %&#125;</span><br><span class="line">&#123;% cell 查看文档, /, fas fa-book-open %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle center grid5 %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p red, 专业版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p green, 免费版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><div class="btns circle grid5">            <a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>          </div>2.或者含有图标的按钮<div class="btns rounded grid5">            <a class="button" href='/' title='下载源码'><i class='fas fa-download'></i>下载源码</a><a class="button" href='/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中<div class="btns circle center grid5">            <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p red'>专业版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png'></a><a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p green'>免费版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png'></a>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-12-github卡片-ghcard">2.12 github卡片 ghcard</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% ghcard 用户名, 其它参数（可选） %&#125;</span><br><span class="line">&#123;% ghcard 用户名/仓库, 其它参数（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>使用<code>,</code>分割各个参数。写法为：<code>参数名=参数值</code><br>以下只写几个常用参数值。</p><table><thead><tr><th><strong>参数名</strong></th><th>取值</th><th>释义</th></tr></thead><tbody><tr><td>hide</td><td>stars,commits,prs,issues,contribs</td><td>隐藏指定统计</td></tr><tr><td>count_private</td><td>true</td><td>将私人项目贡献添加到总提交计数中</td></tr><tr><td>show_icons</td><td>true</td><td>显示图标</td></tr><tr><td>theme</td><td>查阅:<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/themes/README.md">Available Themes</a></td><td>主题</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.用户信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard fomalhaut1998 %&#125; | &#123;% ghcard fomalhaut1998, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=buefy %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=onedark %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=algolia %&#125; | &#123;% ghcard fomalhaut1998, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><p>2.仓库信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=buefy %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=onedark %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=algolia %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.用户信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=calm&show_owner=true"/></a></td></tr></tbody></table><p>2.仓库信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=calm&show_owner=true"/></a></td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-13-github徽标-ghbdage">2.13 github徽标 ghbdage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage [right],[left],[logo]||[color],[link],[title]||[option] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>left</code>：徽标左边的信息，必选参数。</li><li><code>right</code>: 徽标右边的信息，必选参数，</li><li><code>logo</code>：徽标图标，图标名称详见<a href="https://simpleicons.org/">simpleicons</a>，可选参数。</li><li><code>color</code>：徽标右边的颜色，可选参数。</li><li><code>link</code>：指向的链接，可选参数。</li><li><code>title</code>：徽标的额外信息，可选参数。主要用于优化SEO，但<code>object</code>标签不会像<code>a</code>标签一样在鼠标悬停显示<code>title</code>信息。</li><li><code>option</code>：自定义参数，支持<a href="https://shields.io/">shields.io</a>的全部API参数支持，具体参数可以参看上文中的拓展写法示例。形式为<code>name1=value2&amp;name2=value2</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.基本参数,定义徽标左右文字和图标</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Theme,Butterfly %&#125;</span><br><span class="line">&#123;% bdage Frame,Hexo,hexo %&#125;</span><br></pre></td></tr></table></figure><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割</span><br><span class="line">&#123;% bdage Source,GitHub,GitHub||,https://github.com/ %&#125;</span><br></pre></td></tr></table></figure><p>3.拓展参数，支持shields的API的全部参数内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&amp;logoWidth=20 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割</span><br><span class="line">&#123;% bdage Hosted,Vercel,Vercel||||style=social&amp;logoWidth=20&amp;logoColor=violet %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.基本参数,定义徽标左右文字和图标</p><p><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Butterfly-Theme-orange?logo=&color=orange&link=&"></object><br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Hexo-Frame-orange?logo=hexo&color=orange&link=&"></object></p><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><p><object class="ghbdage" style="margin-inline:5px" title="本站使用JsDelivr为静态资源提供CDN加速" standby="loading..." data="https://img.shields.io/badge/JsDelivr-CDN-orange?logo=jsDelivr&color=abcdef&link=https://metroui.org.ua/index.html&"></object><br>//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/GitHub-Source-orange?logo=GitHub&color=orange&link=https://github.com/&"></object></p><p>3.拓展参数，支持shields的API的全部参数内容</p><p><object class="ghbdage" style="margin-inline:5px" title="本站采用双线部署，默认线路托管于Vercel" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=brightgreen&link=https://vercel.com/&style=social&logoWidth=20"></object><br>//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=orange&link=&style=social&logoWidth=20&logoColor=violet"></object></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-14-网站卡片-sites">2.14 网站卡片 sites</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class="line">&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="site-card-group"><a class="site-card" href="https://fomalhaut1998.com"><div class="img"><img src="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png"/><span class="title">fomalhaut1998</span><span class="desc">简约风格</span></div></a><a class="site-card" href="https://inkss.cn"><div class="img"><img src="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg"/><span class="title">inkss</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://blog.mhuig.top"><div class="img"><img src="https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png"/><span class="title">MHuiG</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://colsrch.top"><div class="img"><img src="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg"/><span class="title">Colsrch</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://linhk1606.github.io"><div class="img"><img src="https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png"/></div><div class="info"><img src="https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png"/><span class="title">Linhk1606</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-15-行内图片-inlineimage">2.15 行内图片 inlineimage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>高度</code>：height=20px</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。</span><br><span class="line"></span><br><span class="line">这又是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一段话。</p><p>这又是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 一段话。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-16-单张图片-image">2.16 单张图片 image</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>图片宽度高度：width=300px, height=32px</li><li>图片描述：alt=图片描述（butterfly需要在主题配置文件中开启图片描述）</li><li>占位背景色：bg=#f2f2f2</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>2.指定宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %&#125;</span><br></pre></td></tr></table></figure><p>3.指定宽度并添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>4.设置占位背景色：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.添加描述：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>2..指定宽度<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" style="width:400px;"/></div></div>3.指定宽度并添加描述：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。" style="width:400px;"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>4.设置占位背景色：<div class="img-wrap"><div class="img-bg" style="background:#1D0C04"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="优化不同宽度浏览的观感" style="width:400px;"/></div><span class="image-caption">优化不同宽度浏览的观感</span></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-17-音频-audio">2.17 音频 audio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-18-视频-video">2.18 视频 video</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>对齐方向</code>：left, center, right</li><li><code>列数</code>：逗号后面直接写列数，支持 1 ～ 4 列。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.100%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br></pre></td></tr></table></figure><p>2.50%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><p>3.25%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.100%宽度</p><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>2.50%宽度<div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div>3.25%宽度<div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-19-相册-gallery">2.19 相册 gallery</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 圖片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>gallerygroup 相册图库</li></ul><table><thead><tr><th>参数名</th><th>释义</th></tr></thead><tbody><tr><td>name</td><td>图库名字</td></tr><tr><td>description</td><td>图库描述</td></tr><tr><td>link</td><td>链接到对应相册的地址</td></tr><tr><td>img-url</td><td>图库封面</td></tr></tbody></table><ul><li><p>gallery 相册</p><p>区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。无需再自己配置长宽。<strong>建议在粘贴时故意使用长短、大小、横竖不一的图片</strong>，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 &#x27;/gallery/MC/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup Gundam 哦咧哇gundam哒！ &#x27;/gallery/Gundam/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png %&#125;</span><br><span class="line">&#123;% galleryGroup I-am-Akilar 某种意义上也算自拍吧 &#x27;/gallery/I-am-Akilar/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.gallerygroup 相册图库</p><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">MC</div>  <p>在Rikkaの六花服务器里留下的足迹</p>  <a href='/gallery/MC/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Gundam</div>  <p>哦咧哇gundam哒！</p>  <a href='/gallery/Gundam/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">I-am-Akilar</div>  <p>某种意义上也算自拍吧</p>  <a href='/gallery/I-am-Akilar/'></a>  </figcaption>  </figure></div>2.gallery 相册<div class="fj-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt=""></p>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-20-折叠框-folding">2.20 折叠框 folding</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><!-- tab 参数配置 --><ol><li><p><code>颜色</code>：blue, cyan, green, yellow, red</p></li><li><p><code>状态</code>：状态填写 open 代表默认打开。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> haha</span><br><span class="line"><span class="bullet">-</span> hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;height:24px&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-21-分栏-tab">2.21 分栏 tab</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>Unique name :</p><ul><li><p>选项卡块标签的唯一名称，不带逗号。</p></li><li><p>将在#id中用作每个标签及其索引号的前缀。</p></li><li><p>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。</p></li><li><p>仅当前帖子/页面的URL必须是唯一的！</p></li></ul></li><li><p>[index]:</p><ul><li><p>活动选项卡的索引号。</p></li><li><p>如果未指定，将选择第一个标签（1）。</p></li><li><p>如果index为-1，则不会选择任何选项卡。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[Tab caption]:</p><ul><li><p>当前选项卡的标题。</p></li><li><p>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</p></li><li><p>如果未指定标题，但指定了图标，则标题将为空。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[@icon]:</p><ul><li><p>FontAwesome图标名称（全名，看起来像“ fas fa-font”）</p></li><li><p>可以指定带空格或不带空格；</p></li><li><p>例如’Tab caption @icon’ 和 ‘Tab caption@icon’.</p></li><li><p>可选参数。</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.Demo 1 - 预设选择第一个【默认】</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>2.Demo 2 - 预设选择tabs</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>3.Demo 3 - 没有预设值</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.Demo 1 - 预设选择第一个【默认】</p><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>2.Demo 2 - 预设选择tabs</p><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>3.Demo 3 - 没有预设值</p><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-22-诗词标签-poem">2.22 诗词标签 poem</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><ol><li><code>title</code>：诗词标题</li><li><code>author</code>：作者，可以不写</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% poem 水调歌头,苏轼 %&#125;</span><br><span class="line">丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</span><br><span class="line">明月几时有？把酒问青天。</span><br><span class="line">不知天上宫阙，今夕是何年？</span><br><span class="line">我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</span><br><span class="line">起舞弄清影，何似在人间？</span><br><span class="line"></span><br><span class="line">转朱阁，低绮户，照无眠。</span><br><span class="line">不应有恨，何事长向别时圆？</span><br><span class="line">人有悲欢离合，月有阴晴圆缺，此事古难全。</span><br><span class="line">但愿人长久，千里共婵娟。</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？</p><p>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-23-阿里图标-icon">2.23 阿里图标 icon</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon [icon-xxxx],[font-size] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>icon-xxxx</code>：表示图标<code>font-class</code>,可以在自己的阿里矢量图标库项目的<code>font-class</code>引用方案内查询并复制。</li><li><code>font-size</code>：表示图标大小，直接填写数字即可，单位为<code>em</code>。图标大小默认值为<code>1em</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon icon-rat<span class="emphasis">_zi %&#125;&#123;% icon icon-rat,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-ox_</span>chou,3 %&#125;&#123;% icon icon-ox,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-tiger<span class="emphasis">_yin,5 %&#125;&#123;% icon icon-tiger,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rabbit_</span>mao,1 %&#125;&#123;% icon icon-rabbit,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dragon<span class="emphasis">_chen,3 %&#125;&#123;% icon icon-dragon,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-snake_</span>si,5 %&#125;&#123;% icon icon-snake,6 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-horse<span class="emphasis">_wu %&#125;&#123;% icon icon-horse,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-goat_</span>wei,3 %&#125;&#123;% icon icon-goat,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-monkey<span class="emphasis">_shen,5 %&#125;&#123;% icon icon-monkey,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rooster_</span>you %&#125;&#123;% icon icon-rooster,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dog<span class="emphasis">_xu,3 %&#125;&#123;% icon icon-dog,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-boar_</span>hai,5 %&#125;&#123;% icon icon-boar,6 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rat_zi"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rat"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-ox_chou"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-ox"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-tiger_yin"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-tiger"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rabbit_mao"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rabbit"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dragon_chen"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dragon"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-snake_si"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-snake"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-horse_wu"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-horse"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-goat_wei"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-goat"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-monkey_shen"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-monkey"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rooster_you"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rooster"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dog_xu"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dog"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-boar_hai"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-boar"></use></svg></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-24-特效标签wow">2.24 特效标签wow</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow [animete],[duration],[delay],[offset],[iteration] %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endwow %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>animate</code>: 动画样式，效果详见<a href="https://animate.style/">animate.css参考文档</a></li><li><code>duration</code>: 选填项，动画持续时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>delay</code>: 选填项，动画开始的延迟时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>offset</code>: 选填项，开始动画的距离（相对浏览器底部）</li><li><code>iteration</code>: 选填项，动画重复的次数</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.flip动画效果。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>3.slideInRight动画效果，持续5s，延时5s</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__slideInRight,5s,5s %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note orange &#x27;fas fa-car&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`slideInRight`动画效果，持续`5s`，延时`5s`。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__heartBeat,,5s,,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note red &#x27;fas fa-battery-half&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`heartBeat`动画效果，延时`5s`，重复`10`次。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.flip动画效果。</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>3.slideInRight动画效果，持续5s，延时5s</p><div class='wow animate__slideInRight' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='' ><div class="note orange icon-padding modern"><i class="note-icon fas fa-car"></i><p><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。</p></div></div><p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><div class='wow animate__heartBeat' data-wow-duration='' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='10' ><div class="note red icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-25-进度条-progress">2.25  进度条 progress</h2><div class="note info flat"><p>进度条标签参考<a href="https://rongbuqiu.com/jdt.html">沂佰孜猫-给HEXO文章添加彩色进度条</a>。<br>源样式提取自<a href="https://zwying0814.gitbook.io/cuteen/">Cuteen</a>主题。</p></div><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress [width] [color] [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>width</code>: 0到100的阿拉伯数字</li><li><code>color</code>: 颜色，取值有red,yellow,green,cyan,blue,gray</li><li><code>text</code>:进度条上的文字内容</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress 10 red 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 30 yellow 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 50 green 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 70 cyan 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 90 blue 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 100 gray 进度条样式预览 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-red"  style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-yellow"  style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-green"  style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-cyan"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-gray"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-26-注释-notation">2.26 注释 notation</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota [label] , [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p><code>label</code>: 注释词汇</p></li><li><p><code>text</code>: 悬停显示的注解内容</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><span class='nota' data-nota='可以看到注解内容出现在顶栏'>把鼠标移动到我上面试试</span></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-27-气泡注释-bubble">2.27 气泡注释 bubble</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bubble [content] , [notation] ,[background-color] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>content</code>: 注释词汇</li><li><code>notation</code>: 悬停显示的注解内容</li><li><code>background-color</code>: 可选，气泡背景色。默认为“#71a4e3”</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的&#123;% bubble 兄弟相邻选择器,&quot;例如 h1 + p &#123;margin-top:50px;&#125;&quot; %&#125;，&#123;% bubble flex布局,&quot;Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;,&quot;#ec5830&quot; %&#125;，&#123;% bubble transform变换,&quot;transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。&quot;,&quot;#1db675&quot; %&#125;，animation的&#123;% bubble 贝塞尔速度曲线,&quot;贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋&quot;,&quot;#de4489&quot; %&#125;写法，还有今天刚看到的&#123;% bubble clip-path,&quot;clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。&quot;,&quot;#868fd7&quot; %&#125;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的<span class="bubble-content">兄弟相邻选择器</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">例如 h1 + p {margin-top:50px;}</span></span>，<span class="bubble-content">flex布局</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">Flex 是 Flexible Box 的缩写，意为弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;</span></span>，<span class="bubble-content">transform变换</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#1db675;">transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</span></span>，animation的<span class="bubble-content">贝塞尔速度曲线</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#de4489;">贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋</span></span>写法，还有今天刚看到的<span class="bubble-content">clip-path</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。</span></span>属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-28-引用文献-reference">2.28 引用文献 reference</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% referto [id] , [literature] %&#125;</span><br><span class="line">&#123;% referfrom [id] , [literature] , [url] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>referto 引用上标</p><ul><li><p><code>id</code>: 上标序号内容，需与referfrom标签的id对应才能实现跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li></ul></li><li><p>referfrom 引用出处</p><ul><li><p><code>id</code>: 序号内容，需与referto标签的id对应才能实现 跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li><li><p><code>url</code>: 引用的参考文献链接，可省略</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Akilarの糖果屋(akilar.top)是一个私人性质的博客&#123;% referto &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27; %&#125;，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架&#123;% referto &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27; %&#125;，Butterfly主题&#123;% referto &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">本项目参考了Volantis&#123;% referto &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27; %&#125;的标签样式。引入<span class="code">`[tag].js`</span>，并针对<span class="code">`butterfly`</span>主题修改了相应的<span class="code">`[tag].styl`</span>。在此鸣谢<span class="code">`Volantis`</span>主题众开发者。</span><br><span class="line">主要参考内容包括各个volantis的内置标签插件文档&#123;% referto &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27; %&#125;</span><br><span class="line">Butterfly主题的各个衍生魔改&#123;% referto &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27; %&#125;&#123;% referto &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27; %&#125;&#123;% referto &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27; %&#125;&#123;% referto &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% referfrom &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27;,&#x27;https://jq.qq.com/?<span class="emphasis">_wv=1027&amp;k=pGLB2C0N&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27;,&#x27;https://hexo.io/zh-cn/docs/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27;,&#x27;https://butterfly.js.org/posts/21cfbf15/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27;,&#x27;https://volantis.js.org/v5/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27;,&#x27;https://volantis.js.org/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27;,&#x27;https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27;,&#x27;https://lovelijunyi.gitee.io/posts/c898.html&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27;,&#x27;https://github.com/l-lin/font-awesome-animation&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27;,&#x27;https://www.antmoe.com/posts/3b43914f/&#x27; %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>Akilarの糖果屋(akilar.top)是一个私人性质的博客<span class="hidden-anchor" id="referto_[1]"></span><sup class="reference"><a href="#referfrom_[1]">[1]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Akilarの糖果屋群聊简介</span><span class="reference-title">参考资料</span></span></span>，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架<span class="hidden-anchor" id="referto_[2]"></span><sup class="reference"><a href="#referfrom_[2]">[2]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Hexo中文文档</span><span class="reference-title">参考资料</span></span></span>，Butterfly主题<span class="hidden-anchor" id="referto_[3]"></span><sup class="reference"><a href="#referfrom_[3]">[3]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档(一) 快速开始</span><span class="reference-title">参考资料</span></span></span></p><p>本项目参考了Volantis<span class="hidden-anchor" id="referto_[4]"></span><sup class="reference"><a href="#referfrom_[4]">[4]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">hexo-theme-volantis 标签插件</span><span class="reference-title">参考资料</span></span></span>的标签样式。引入<code>[tag].js</code>，并针对<code>butterfly</code>主题修改了相应的<code>[tag].styl</code>。在此鸣谢<code>Volantis</code>主题众开发者。<br>主要参考内容包括各个volantis的内置标签插件文档<span class="hidden-anchor" id="referto_[5]"></span><sup class="reference"><a href="#referfrom_[5]">[5]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Volantis文档:内置标签插件</span><span class="reference-title">参考资料</span></span></span><br>Butterfly主题的各个衍生魔改<span class="hidden-anchor" id="referto_[6]"></span><sup class="reference"><a href="#referfrom_[6]">[6]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档:标签外挂（Tag Plugins</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[7]"></span><sup class="reference"><a href="#referfrom_[7]">[7]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小弋の生活馆全样式预览</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[8]"></span><sup class="reference"><a href="#referfrom_[8]">[8]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">l-lin-font-awesome-animation</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[9]"></span><sup class="reference"><a href="#referfrom_[9]">[9]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小康的butterfly主题使用文档</span><span class="reference-title">参考资料</span></span></span></p><div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://jq.qq.com/?_wv=1027&k=pGLB2C0N">Akilarの糖果屋群聊简介</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://hexo.io/zh-cn/docs/">Hexo中文文档</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[3]"></span><a class="reference-anchor" href="#referto_[3]">[3]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安装文档(一) 快速开始</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[4]"></span><a class="reference-anchor" href="#referto_[4]">[4]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/v5/tag-plugins/">hexo-theme-volantis 标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[5]"></span><a class="reference-anchor" href="#referto_[5]">[5]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/tag-plugins/">Volantis文档:内置标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[6]"></span><a class="reference-anchor" href="#referto_[6]">[6]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Butterfly 安装文档:标签外挂（Tag Plugins</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[7]"></span><a class="reference-anchor" href="#referto_[7]">[7]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://lovelijunyi.gitee.io/posts/c898.html">小弋の生活馆全样式预览</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[8]"></span><a class="reference-anchor" href="#referto_[8]">[8]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://github.com/l-lin/font-awesome-animation">l-lin-font-awesome-animation</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[9]"></span><a class="reference-anchor" href="#referto_[9]">[9]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly主题使用文档</a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-29-PDF展示">2.29 PDF展示</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf 文件路径 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>文件路径</code>: 可以是相对路径或者是在线链接</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.本地文件:在md文件路径下创建一个同名文件夹，其内放pdf文件名为xxx.pdf的文件</span></span><br><span class="line">&#123;% pdf xxx.pdf %&#125;</span><br><span class="line"><span class="section"># 2.在线链接</span></span><br><span class="line">&#123;% pdf https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>2.在线链接(要放到最外层才能起作用)</p><pre><code>&lt;div class=&quot;row&quot;&gt;&lt;embed src=&quot;https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;&lt;/div&gt;</code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-30-Hexo-tag-map-插件">2.30 Hexo-tag-map 插件</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% + 标签值 + 经度 + 纬度 + 文本 + 缩放等级 + 宽 + 高 + 默认图层 + %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th style="text-align:center">地图名</th><th style="text-align:center">标签值 &lt;必填&gt;</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">缩放等级 (默认 14)</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">默认图层 (默认 1)</th></tr></thead><tbody><tr><td style="text-align:center">混合地图</td><td style="text-align:center">map</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~7</td></tr><tr><td style="text-align:center">谷歌地图</td><td style="text-align:center">googleMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~20</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">高德地图</td><td style="text-align:center">gaodeMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">百度地图</td><td style="text-align:center">baiduMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 4~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~2</td></tr><tr><td style="text-align:center">Geoq 地图</td><td style="text-align:center">geoqMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~5</td></tr><tr><td style="text-align:center">openstreet 地图</td><td style="text-align:center">openstreetMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">不支持此参数</td></tr></tbody></table><ol><li>参数之间，用英文逗号相隔</li><li>参数必须按上述事例顺序输入，不得为空</li><li>同一个页面，同一组经纬度值，只能插入一个相同标签值的地图 (若有需要，可以将第二个地图上，经度或纬度末尾删除一两个数)</li><li>参数取值必须在上述范围内</li><li>默认图层：即地图叠加层的值，默认常规地图还是卫星地图，可按地图显示顺序取值</li><li>缩放等级，数字越大，地图比例尺越小，显示的越精细</li><li>除标签值外，其他参数选填，但 每个参数的左边的参数必填</li><li>谷歌地图需要外网才能加载查看</li></ol><p>坐标获取：<a href="https://lbs.amap.com/tools/picker">高德地图坐标拾取系统</a> 、<a href="https://api.map.baidu.com/lbsapi/getpoint/index.html">百度地图坐标拾取系统</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% map 120.101101,30.239119 %&#125;</span><br><span class="line">&#123;% googleMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！ %&#125;</span><br><span class="line">&#123;% geoqMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！, 13, 90%, 320px, 3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div class="map-box"><div id="map-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div></div><script type="text/javascript">var normalm=L.tileLayer.chinaProvider('GaoDe.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Amap'});var imgm=L.tileLayer.chinaProvider('GaoDe.Satellite.Map',{maxZoom:20,minZoom:1,attribution:'Amap'});var imga=L.tileLayer.chinaProvider('GaoDe.Satellite.Annotion',{maxZoom:20,minZoom:1,attribution:'Amap'});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'});routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1,attribution:'Google Maps'});var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:21,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm]),image=L.layerGroup([imgm,imga]);var baseLayers={"高德地图":normal,"智图地图":normalm1,"谷歌地图":normalMap,"高德卫星地图":imgm,"谷歌卫星地图":satelliteMap,"高德卫星标注":image,"谷歌卫星标注":routeMap};var mymap=L.map('map-120.101101-30.239119',{center:[30.239119,120.101101],zoom:14,layers:[normal],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);</script><br><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="googleMap-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:22,minZoom:1,attribution:'Google Maps'});var baseLayers={"谷歌地图":normalMap,"谷歌卫星图":satelliteMap,"谷歌卫星标注": routeMap};var overlayLayers={};var mymap=L.map("googleMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:14,layers:[normalMap],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="geoqMap-120.101101-30.239119" style="max-width:90%; height:320px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm2=L.tileLayer.chinaProvider('Geoq.Normal.PurplishBlue',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm3=L.tileLayer.chinaProvider('Geoq.Normal.Gray',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm4=L.tileLayer.chinaProvider('Geoq.Normal.Warm',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm5=L.tileLayer.chinaProvider('Geoq.Theme.Hydro',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm1,normalm2,normalm3,normalm4,normalm5]);var baseLayers={"智图地图":normalm1,"午夜蓝":normalm2,"灰色":normalm3,"暖色":normalm4,"水系":normalm5};var mymap=L.map("geoqMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:13,layers:[normalm3],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-31-隐藏块">2.31 隐藏块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>content：要隐藏的内容</li><li>display：展示前按钮显示的文字（可选）</li><li>bg：按钮的背景颜色（可选）</li><li>color：按钮显示的文字的颜色（可选）</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock 点我预览, blue %&#125;</span><br><span class="line">这里有张图片：</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;image (1)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:67%;&quot;</span> /&gt;</span></span></span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="hide-block"><button type="button" class="hide-button" style="background-color:  blue;">点我预览    </button><div class="hide-content"><p>这里有张图片：<br><img src="https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb" alt="image (1)" style="zoom:67%;" /></p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 演示 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 外挂标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>word论文格式</title>
      <link href="/posts/f92dd4c1.html"/>
      <url>/posts/f92dd4c1.html</url>
      
        <content type="html"><![CDATA[<h1>优雅搞定word论文模板</h1><h3 id="Q：怎么修改默认标题字体">Q：怎么修改默认标题字体</h3><h3 id="A：右键点击修改。">A：右键点击修改。</h3><p><img src="https://s2.loli.net/2022/05/24/6TN9RorpljU15uM.png" alt="image-20220524213950373"></p><h3 id="点击修改字体">点击修改字体</h3><p><img src="https://s2.loli.net/2022/05/24/fmxbRcoUyikV21D.png" alt="image-20220524214048455"></p><h3 id="修改成一级标题三号中文宋体黑体居中，英文字体times-new-roman。">修改成一级标题三号中文宋体黑体居中，英文字体times new roman。</h3><p><img src="https://s2.loli.net/2022/05/24/VxncEFvARZ7tzPq.png" alt="image-20220524214244871"></p><p>设置行距在段落中有，设置两倍行距。</p><p>同样地设置正文字体：宋体小四times new roman，行间距1.25。二级三级标题设置方法一样。</p><h2 id="标号如何自动生成：">标号如何自动生成：</h2><h3 id="Q-如何设置自己想要的标号，比如：第一章、第1章这种。">Q:如何设置自己想要的标号，比如：第一章、第1章这种。</h3><h3 id="A-点击开始选项栏中的定义新的多级列表">A:点击开始选项栏中的定义新的多级列表</h3><p><img src="https://s2.loli.net/2022/05/24/CDUyq4IovX3NfSz.png" alt="image-20220524214850349"></p><p><img src="https://s2.loli.net/2022/05/24/Vsvq47aibjGlrfD.png" alt="image-20220524215407245"></p><h3 id="Q-如何设置成第一章1-1、1-2这样子">Q:如何设置成第一章1.1、1.2这样子</h3><h3 id="A-image-20220524215617233">A:<img src="https://s2.loli.net/2022/05/24/gbUqj3WoXRlsHVQ.png" alt="image-20220524215617233"></h3><p><img src="https://s2.loli.net/2022/05/24/MyIELQmtcxAnjdT.png" alt="image-20220524220420629"></p><h1>优雅搞定word论文图片&amp;表格</h1><p>图片样式选择嵌入型</p><p><img src="https://s2.loli.net/2022/05/24/2OdfhGF3YaocMrA.png" alt="image-20220524220740210"></p><p><img src="https://s2.loli.net/2022/05/24/1pOgrnemJPUki7z.png" alt="image-20220524220840289"></p><p>点击引用选项中的交叉引用，可以插入引用，但是会遇见如下情况：</p><p><img src="https://s2.loli.net/2022/05/24/TSg1xhmIKn3Ajqd.png" alt="image-20220524221112075"></p><p>解决办法：ctrl + A全选，按F9刷新即可解决。</p><p>tips：两张图片并排放可以用表格实现，插入两列表格，然后插入图片，最后在表格设计中隐藏框框。</p><p>tips：两张图片组合成一张图片：1、设置图片为四周型。2、选中两张图片，点击组合。最后设置为嵌入型就可以。</p><p>Q:如果我们标题是汉字一，图片编号会变成一-1这样子，怎么办？</p><p>A:按Alt+F9，在每章标题上按ctrl+F9进入域，输入SEQ seq \h</p><p><img src="https://s2.loli.net/2022/05/24/RVdipzncq6MJOPD.png" alt="image-20220524221835190"></p><p>在空白处按ctrl+F9，输入SEQ seq \c。剪切这部分，点击ctrl+h，进入替换页面。把^d STYLEREF 1\s替换为剪切的部分。</p><p><img src="https://s2.loli.net/2022/05/24/iQblfeqks2tZV3D.png" alt="image-20220524222056969"></p><p>按Alt + F9退出域，ctrl+A全选，按F9刷新即可完成。</p><p>Tips：建议写完所有论文之后再设置这个图注。</p><p>表格和图片引用是一样的，这里不赘诉了。</p><p>设计一个好看的表结构：</p><p>插入表格，进入表格设计，右击表格点击新建表格样式，选择古典型1</p><p><img src="https://s2.loli.net/2022/05/24/nRat5yObDC6HAWp.png" alt="image-20220524222645757"></p><p>设置字体：和正文一样。</p><p>设置格式：首先在将格式应用于首列，在框线出取消右框线，再选择应用于首行，把字体改成不倾斜即可。</p><p><img src="https://s2.loli.net/2022/05/24/lBqOwHpQmbuxjFr.png" alt="image-20220524223029002"></p>]]></content>
      
      
      <categories>
          
          <category> 论文模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clion如何创建并运行C/C++文件</title>
      <link href="/posts/9611847.html"/>
      <url>/posts/9611847.html</url>
      
        <content type="html"><![CDATA[<h1>Clion如何创建并运行C/C++文件</h1><p>主要步骤如下：</p><p>第一步： 新建一个project</p><p><img src="https://img-blog.csdnimg.cn/202002282029161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzY2NTcx,size_16,color_FFFFFF,t_70" alt=""></p><p>第二步： 新建一个C/C++文件</p><p><img src="https://img-blog.csdnimg.cn/20200228203510712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzY2NTcx,size_16,color_FFFFFF,t_70" alt=""></p><p>第三步： 进入界面</p><p><img src="https://img-blog.csdnimg.cn/20200228203545167.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzY2NTcx,size_16,color_FFFFFF,t_70" alt=""></p><p>第四步：</p><pre><code>    默认生成了main.c文件，但是我们不能运行。我们缺少编译环境，点击Setting打开设置，搜索Toolchains，发现Clion提供的编译环境有几种MinGW，CygWin，Visual studio等。我此处选择的时MinGW，因为我的安装了MinGW，默认选择了MinGW，如果你没有下载的话，后面的位置原先有个download，点击就可以下载了。安装好之后，然后再Environment右侧选择mingw-w64的位置即可。</code></pre><p><img src="https://img-blog.csdnimg.cn/20200228203631876.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzY2NTcx,size_16,color_FFFFFF,t_70" alt=""></p><p>第五步： 运行main.c文件即可</p><p><img src="https://img-blog.csdnimg.cn/20200228203650243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MzY2NTcx,size_16,color_FFFFFF,t_70" alt=""></p><p>以上： 就是如何创建并运行一个C/C++文件的步骤。</p>]]></content>
      
      
      
        <tags>
            
            <tag> C++、clion </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
